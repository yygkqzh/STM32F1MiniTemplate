; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_cortex.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_cortex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_cortex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_ClearPendingIRQ PROC
;;;419      */
;;;420    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;421    {
000002  4604              MOV      r4,r0
;;;422      /* Check the parameters */
;;;423      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L1.10|
000008  e004              B        |L1.20|
                  |L1.10|
00000a  f24011a7          MOV      r1,#0x1a7
00000e  a008              ADR      r0,|L1.48|
000010  f7fffffe          BL       assert_failed
                  |L1.20|
;;;424    
;;;425      /* Clear pending interrupt */
;;;426      NVIC_ClearPendingIRQ(IRQn);
000014  4620              MOV      r0,r4
000016  2800              CMP      r0,#0
000018  db07              BLT      |L1.42|
00001a  f000021f          AND      r2,r0,#0x1f
00001e  2101              MOVS     r1,#1
000020  4091              LSLS     r1,r1,r2
000022  4a12              LDR      r2,|L1.108|
000024  0943              LSRS     r3,r0,#5
000026  f8421023          STR      r1,[r2,r3,LSL #2]
                  |L1.42|
00002a  bf00              NOP      
;;;427    }
00002c  bd10              POP      {r4,pc}
;;;428    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
000030  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000034  72697665
000038  72732f53
00003c  544d3332
000040  46317878
000044  5f48414c
000048  5f447269
00004c  7665722f
000050  5372632f
000054  73746d33
000058  32663178
00005c  785f6861
000060  6c5f636f
000064  727465  
000067  782e6300          DCB      "x.c",0
00006b  00                DCB      0
                  |L1.108|
                          DCD      0xe000e280

                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_DisableIRQ PROC
;;;202      */
;;;203    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;204    {
000002  4604              MOV      r4,r0
;;;205      /* Check the parameters */
;;;206      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L2.10|
000008  e003              B        |L2.18|
                  |L2.10|
00000a  21ce              MOVS     r1,#0xce
00000c  a00f              ADR      r0,|L2.76|
00000e  f7fffffe          BL       assert_failed
                  |L2.18|
;;;207    
;;;208      /* Disable interrupt */
;;;209      NVIC_DisableIRQ(IRQn);
000012  4620              MOV      r0,r4
000014  2800              CMP      r0,#0
000016  db17              BLT      |L2.72|
000018  f000021f          AND      r2,r0,#0x1f
00001c  2101              MOVS     r1,#1
00001e  4091              LSLS     r1,r1,r2
000020  4a19              LDR      r2,|L2.136|
000022  0943              LSRS     r3,r0,#5
000024  f8421023          STR      r1,[r2,r3,LSL #2]
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  bf00              NOP      
00002e  f3bf8f4f          DSB      
000032  bf00              NOP      
000034  bf00              NOP      
000036  bf00              NOP      
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  f3bf8f6f          ISB      
000042  bf00              NOP      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L2.72|
000048  bf00              NOP      
;;;210    }
00004a  bd10              POP      {r4,pc}
;;;211    
                          ENDP

                  |L2.76|
00004c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000050  72697665
000054  72732f53
000058  544d3332
00005c  46317878
000060  5f48414c
000064  5f447269
000068  7665722f
00006c  5372632f
000070  73746d33
000074  32663178
000078  785f6861
00007c  6c5f636f
000080  727465  
000083  782e6300          DCB      "x.c",0
000087  00                DCB      0
                  |L2.136|
                          DCD      0xe000e180

                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_EnableIRQ PROC
;;;186      */
;;;187    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189      /* Check the parameters */
;;;190      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L3.10|
000008  e003              B        |L3.18|
                  |L3.10|
00000a  21be              MOVS     r1,#0xbe
00000c  a008              ADR      r0,|L3.48|
00000e  f7fffffe          BL       assert_failed
                  |L3.18|
;;;191    
;;;192      /* Enable interrupt */
;;;193      NVIC_EnableIRQ(IRQn);
000012  4620              MOV      r0,r4
000014  2800              CMP      r0,#0
000016  db09              BLT      |L3.44|
000018  f000021f          AND      r2,r0,#0x1f
00001c  2101              MOVS     r1,#1
00001e  4091              LSLS     r1,r1,r2
000020  0942              LSRS     r2,r0,#5
000022  0092              LSLS     r2,r2,#2
000024  f10222e0          ADD      r2,r2,#0xe000e000
000028  f8c21100          STR      r1,[r2,#0x100]
                  |L3.44|
00002c  bf00              NOP      
;;;194    }
00002e  bd10              POP      {r4,pc}
;;;195    
                          ENDP

                  |L3.48|
000030  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000034  72697665
000038  72732f53
00003c  544d3332
000040  46317878
000044  5f48414c
000048  5f447269
00004c  7665722f
000050  5372632f
000054  73746d33
000058  32663178
00005c  785f6861
000060  6c5f636f
000064  727465  
000067  782e6300          DCB      "x.c",0
00006b  00                DCB      0

                          AREA ||i.HAL_NVIC_GetActive||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetActive PROC
;;;436      */
;;;437    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;438    {
000002  4604              MOV      r4,r0
;;;439      /* Check the parameters */
;;;440      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L4.10|
000008  e004              B        |L4.20|
                  |L4.10|
00000a  f44f71dc          MOV      r1,#0x1b8
00000e  a00b              ADR      r0,|L4.60|
000010  f7fffffe          BL       assert_failed
                  |L4.20|
;;;441    
;;;442      /* Return 1 if active else 0 */
;;;443      return NVIC_GetActive(IRQn);
000014  4620              MOV      r0,r4
000016  2800              CMP      r0,#0
000018  db0d              BLT      |L4.54|
00001a  4917              LDR      r1,|L4.120|
00001c  0942              LSRS     r2,r0,#5
00001e  f8511022          LDR      r1,[r1,r2,LSL #2]
000022  f000031f          AND      r3,r0,#0x1f
000026  2201              MOVS     r2,#1
000028  409a              LSLS     r2,r2,r3
00002a  4011              ANDS     r1,r1,r2
00002c  b109              CBZ      r1,|L4.50|
00002e  2101              MOVS     r1,#1
000030  e002              B        |L4.56|
                  |L4.50|
000032  2100              MOVS     r1,#0
000034  e000              B        |L4.56|
                  |L4.54|
000036  2100              MOVS     r1,#0
                  |L4.56|
000038  4608              MOV      r0,r1
;;;444    }
00003a  bd10              POP      {r4,pc}
;;;445    
                          ENDP

                  |L4.60|
00003c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000040  72697665
000044  72732f53
000048  544d3332
00004c  46317878
000050  5f48414c
000054  5f447269
000058  7665722f
00005c  5372632f
000060  73746d33
000064  32663178
000068  785f6861
00006c  6c5f636f
000070  727465  
000073  782e6300          DCB      "x.c",0
000077  00                DCB      0
                  |L4.120|
                          DCD      0xe000e300

                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPendingIRQ PROC
;;;403      */
;;;404    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  4604              MOV      r4,r0
;;;406      /* Check the parameters */
;;;407      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L5.10|
000008  e004              B        |L5.20|
                  |L5.10|
00000a  f2401197          MOV      r1,#0x197
00000e  a00b              ADR      r0,|L5.60|
000010  f7fffffe          BL       assert_failed
                  |L5.20|
;;;408    
;;;409      /* Return 1 if pending else 0 */
;;;410      return NVIC_GetPendingIRQ(IRQn);
000014  4620              MOV      r0,r4
000016  2800              CMP      r0,#0
000018  db0d              BLT      |L5.54|
00001a  4917              LDR      r1,|L5.120|
00001c  0942              LSRS     r2,r0,#5
00001e  f8511022          LDR      r1,[r1,r2,LSL #2]
000022  f000031f          AND      r3,r0,#0x1f
000026  2201              MOVS     r2,#1
000028  409a              LSLS     r2,r2,r3
00002a  4011              ANDS     r1,r1,r2
00002c  b109              CBZ      r1,|L5.50|
00002e  2101              MOVS     r1,#1
000030  e002              B        |L5.56|
                  |L5.50|
000032  2100              MOVS     r1,#0
000034  e000              B        |L5.56|
                  |L5.54|
000036  2100              MOVS     r1,#0
                  |L5.56|
000038  4608              MOV      r0,r1
;;;411    }
00003a  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  |L5.60|
00003c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000040  72697665
000044  72732f53
000048  544d3332
00004c  46317878
000050  5f48414c
000054  5f447269
000058  7665722f
00005c  5372632f
000060  73746d33
000064  32663178
000068  785f6861
00006c  6c5f636f
000070  727465  
000073  782e6300          DCB      "x.c",0
000077  00                DCB      0
                  |L5.120|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriority PROC
;;;370      */
;;;371    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;372    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;373      /* Check the parameters */
;;;374      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
00000c  2c07              CMP      r4,#7
00000e  d007              BEQ      |L6.32|
000010  2c06              CMP      r4,#6
000012  d005              BEQ      |L6.32|
000014  2c05              CMP      r4,#5
000016  d003              BEQ      |L6.32|
000018  2c04              CMP      r4,#4
00001a  d001              BEQ      |L6.32|
00001c  2c03              CMP      r4,#3
00001e  d100              BNE      |L6.34|
                  |L6.32|
000020  e004              B        |L6.44|
                  |L6.34|
000022  f44f71bb          MOV      r1,#0x176
000026  a022              ADR      r0,|L6.176|
000028  f7fffffe          BL       assert_failed
                  |L6.44|
;;;375     /* Get priority for Cortex-M system or device specific interrupts */
;;;376      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
00002c  4628              MOV      r0,r5
00002e  2800              CMP      r0,#0
000030  db03              BLT      |L6.58|
000032  4b2e              LDR      r3,|L6.236|
000034  5c1b              LDRB     r3,[r3,r0]
000036  091b              LSRS     r3,r3,#4
000038  e007              B        |L6.74|
                  |L6.58|
00003a  4b2d              LDR      r3,|L6.240|
00003c  f0000c0f          AND      r12,r0,#0xf
000040  f1ac0c04          SUB      r12,r12,#4
000044  f813300c          LDRB     r3,[r3,r12]
000048  091b              LSRS     r3,r3,#4
                  |L6.74|
00004a  4619              MOV      r1,r3
00004c  4622              MOV      r2,r4
00004e  f0020007          AND      r0,r2,#7
000052  f1c00807          RSB      r8,r0,#7
000056  f1b80f04          CMP      r8,#4
00005a  d902              BLS      |L6.98|
00005c  f04f0804          MOV      r8,#4
000060  e001              B        |L6.102|
                  |L6.98|
000062  f1c00807          RSB      r8,r0,#7
                  |L6.102|
000066  46c4              MOV      r12,r8
000068  f1000804          ADD      r8,r0,#4
00006c  f1b80f07          CMP      r8,#7
000070  d202              BCS      |L6.120|
000072  f04f0800          MOV      r8,#0
000076  e001              B        |L6.124|
                  |L6.120|
000078  f1a00803          SUB      r8,r0,#3
                  |L6.124|
00007c  4643              MOV      r3,r8
00007e  fa21f803          LSR      r8,r1,r3
000082  f04f0901          MOV      r9,#1
000086  fa09f90c          LSL      r9,r9,r12
00008a  f1a90901          SUB      r9,r9,#1
00008e  ea080809          AND      r8,r8,r9
000092  f8c68000          STR      r8,[r6,#0]
000096  f04f0801          MOV      r8,#1
00009a  fa08f803          LSL      r8,r8,r3
00009e  f1a80801          SUB      r8,r8,#1
0000a2  ea080801          AND      r8,r8,r1
0000a6  f8c78000          STR      r8,[r7,#0]
0000aa  bf00              NOP      
;;;377    }
0000ac  e8bd87f0          POP      {r4-r10,pc}
;;;378    
                          ENDP

                  |L6.176|
0000b0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
0000b4  72697665
0000b8  72732f53
0000bc  544d3332
0000c0  46317878
0000c4  5f48414c
0000c8  5f447269
0000cc  7665722f
0000d0  5372632f
0000d4  73746d33
0000d8  32663178
0000dc  785f6861
0000e0  6c5f636f
0000e4  727465  
0000e7  782e6300          DCB      "x.c",0
0000eb  00                DCB      0
                  |L6.236|
                          DCD      0xe000e400
                  |L6.240|
                          DCD      0xe000ed18

                          AREA ||i.HAL_NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPriorityGrouping PROC
;;;343      */
;;;344    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000000  b510              PUSH     {r4,lr}
;;;345    {
;;;346      /* Get the PRIGROUP[10:8] field value */
;;;347      return NVIC_GetPriorityGrouping();
000002  f7fffffe          BL       __NVIC_GetPriorityGrouping
;;;348    }
000006  bd10              POP      {r4,pc}
;;;349    
                          ENDP


                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPendingIRQ PROC
;;;385      */
;;;386    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;387    {
000002  4604              MOV      r4,r0
;;;388      /* Check the parameters */
;;;389      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
000004  2c00              CMP      r4,#0
000006  db00              BLT      |L8.10|
000008  e004              B        |L8.20|
                  |L8.10|
00000a  f2401185          MOV      r1,#0x185
00000e  a008              ADR      r0,|L8.48|
000010  f7fffffe          BL       assert_failed
                  |L8.20|
;;;390      
;;;391      /* Set interrupt pending */
;;;392      NVIC_SetPendingIRQ(IRQn);
000014  4620              MOV      r0,r4
000016  2800              CMP      r0,#0
000018  db07              BLT      |L8.42|
00001a  f000021f          AND      r2,r0,#0x1f
00001e  2101              MOVS     r1,#1
000020  4091              LSLS     r1,r1,r2
000022  4a12              LDR      r2,|L8.108|
000024  0943              LSRS     r3,r0,#5
000026  f8421023          STR      r1,[r2,r3,LSL #2]
                  |L8.42|
00002a  bf00              NOP      
;;;393    }
00002c  bd10              POP      {r4,pc}
;;;394    
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
000030  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000034  72697665
000038  72732f53
00003c  544d3332
000040  46317878
000044  5f48414c
000048  5f447269
00004c  7665722f
000050  5372632f
000054  73746d33
000058  32663178
00005c  785f6861
000060  6c5f636f
000064  727465  
000067  782e6300          DCB      "x.c",0
00006b  00                DCB      0
                  |L8.108|
                          DCD      0xe000e200

                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;164      */
;;;165    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;166    { 
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;167      uint32_t prioritygroup = 0x00U;
00000a  2700              MOVS     r7,#0
;;;168      
;;;169      /* Check the parameters */
;;;170      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
00000c  2d10              CMP      r5,#0x10
00000e  d200              BCS      |L9.18|
000010  e003              B        |L9.26|
                  |L9.18|
000012  21aa              MOVS     r1,#0xaa
000014  a020              ADR      r0,|L9.152|
000016  f7fffffe          BL       assert_failed
                  |L9.26|
;;;171      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
00001a  2c10              CMP      r4,#0x10
00001c  d200              BCS      |L9.32|
00001e  e003              B        |L9.40|
                  |L9.32|
000020  21ab              MOVS     r1,#0xab
000022  a01d              ADR      r0,|L9.152|
000024  f7fffffe          BL       assert_failed
                  |L9.40|
;;;172      
;;;173      prioritygroup = NVIC_GetPriorityGrouping();
000028  f7fffffe          BL       __NVIC_GetPriorityGrouping
00002c  4607              MOV      r7,r0
;;;174      
;;;175      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
00002e  4639              MOV      r1,r7
000030  4622              MOV      r2,r4
000032  462b              MOV      r3,r5
000034  f0010007          AND      r0,r1,#7
000038  f1c00a07          RSB      r10,r0,#7
00003c  f1ba0f04          CMP      r10,#4
000040  d902              BLS      |L9.72|
000042  f04f0a04          MOV      r10,#4
000046  e001              B        |L9.76|
                  |L9.72|
000048  f1c00a07          RSB      r10,r0,#7
                  |L9.76|
00004c  46d1              MOV      r9,r10
00004e  f1000a04          ADD      r10,r0,#4
000052  f1ba0f07          CMP      r10,#7
000056  d202              BCS      |L9.94|
000058  f04f0a00          MOV      r10,#0
00005c  e001              B        |L9.98|
                  |L9.94|
00005e  f1a00a03          SUB      r10,r0,#3
                  |L9.98|
000062  46d4              MOV      r12,r10
000064  f04f0a01          MOV      r10,#1
000068  fa0afa09          LSL      r10,r10,r9
00006c  f1aa0a01          SUB      r10,r10,#1
000070  ea0a0a02          AND      r10,r10,r2
000074  fa0afa0c          LSL      r10,r10,r12
000078  f04f0b01          MOV      r11,#1
00007c  fa0bfb0c          LSL      r11,r11,r12
000080  f1ab0b01          SUB      r11,r11,#1
000084  ea0b0b03          AND      r11,r11,r3
000088  ea4a060b          ORR      r6,r10,r11
00008c  4631              MOV      r1,r6
00008e  4640              MOV      r0,r8
000090  f7fffffe          BL       __NVIC_SetPriority
;;;176    }
000094  e8bd9ff0          POP      {r4-r12,pc}
;;;177    
                          ENDP

                  |L9.152|
000098  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
00009c  72697665
0000a0  72732f53
0000a4  544d3332
0000a8  46317878
0000ac  5f48414c
0000b0  5f447269
0000b4  7665722f
0000b8  5372632f
0000bc  73746d33
0000c0  32663178
0000c4  785f6861
0000c8  6c5f636f
0000cc  727465  
0000cf  782e6300          DCB      "x.c",0
0000d3  00                DCB      0

                          AREA ||i.HAL_NVIC_SetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;142      */
;;;143    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  b510              PUSH     {r4,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145      /* Check the parameters */
;;;146      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
000004  2c07              CMP      r4,#7
000006  d007              BEQ      |L10.24|
000008  2c06              CMP      r4,#6
00000a  d005              BEQ      |L10.24|
00000c  2c05              CMP      r4,#5
00000e  d003              BEQ      |L10.24|
000010  2c04              CMP      r4,#4
000012  d001              BEQ      |L10.24|
000014  2c03              CMP      r4,#3
000016  d100              BNE      |L10.26|
                  |L10.24|
000018  e003              B        |L10.34|
                  |L10.26|
00001a  2192              MOVS     r1,#0x92
00001c  a009              ADR      r0,|L10.68|
00001e  f7fffffe          BL       assert_failed
                  |L10.34|
;;;147      
;;;148      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;149      NVIC_SetPriorityGrouping(PriorityGroup);
000022  bf00              NOP      
000024  f0040107          AND      r1,r4,#7
000028  4a15              LDR      r2,|L10.128|
00002a  6810              LDR      r0,[r2,#0]
00002c  f64f02ff          MOV      r2,#0xf8ff
000030  4010              ANDS     r0,r0,r2
000032  4a14              LDR      r2,|L10.132|
000034  4302              ORRS     r2,r2,r0
000036  ea422001          ORR      r0,r2,r1,LSL #8
00003a  4a11              LDR      r2,|L10.128|
00003c  6010              STR      r0,[r2,#0]
00003e  bf00              NOP      
;;;150    }
000040  bd10              POP      {r4,pc}
;;;151    
                          ENDP

000042  0000              DCW      0x0000
                  |L10.68|
000044  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000048  72697665
00004c  72732f53
000050  544d3332
000054  46317878
000058  5f48414c
00005c  5f447269
000060  7665722f
000064  5372632f
000068  73746d33
00006c  32663178
000070  785f6861
000074  6c5f636f
000078  727465  
00007b  782e6300          DCB      "x.c",0
00007f  00                DCB      0
                  |L10.128|
                          DCD      0xe000ed0c
                  |L10.132|
                          DCD      0x05fa0000

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;215      */
;;;216    void HAL_NVIC_SystemReset(void)
000000  bf00              NOP      
000002  bf00              NOP      
000004  bf00              NOP      
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f3bf8f4f          DSB      
00000e  bf00              NOP      
000010  bf00              NOP      
000012  bf00              NOP      
000014  4809              LDR      r0,|L11.60|
000016  6800              LDR      r0,[r0,#0]
000018  f40060e0          AND      r0,r0,#0x700
00001c  4908              LDR      r1,|L11.64|
00001e  4308              ORRS     r0,r0,r1
000020  1d00              ADDS     r0,r0,#4
000022  4906              LDR      r1,|L11.60|
000024  6008              STR      r0,[r1,#0]
000026  bf00              NOP      
000028  bf00              NOP      
00002a  bf00              NOP      
00002c  f3bf8f4f          DSB      
000030  bf00              NOP      
000032  bf00              NOP      
000034  bf00              NOP      
000036  bf00              NOP      
                  |L11.56|
000038  bf00              NOP      
00003a  e7fd              B        |L11.56|
;;;217    {
;;;218      /* System Reset */
;;;219      NVIC_SystemReset();
;;;220    }
;;;221    
                          ENDP

                  |L11.60|
                          DCD      0xe000ed0c
                  |L11.64|
                          DCD      0x05fa0000

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=2

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;453      */
;;;454    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  b510              PUSH     {r4,lr}
;;;455    {
000002  4604              MOV      r4,r0
;;;456      /* Check the parameters */
;;;457      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
000004  2c04              CMP      r4,#4
000006  d000              BEQ      |L12.10|
000008  b904              CBNZ     r4,|L12.12|
                  |L12.10|
00000a  e004              B        |L12.22|
                  |L12.12|
00000c  f24011c9          MOV      r1,#0x1c9
000010  a00b              ADR      r0,|L12.64|
000012  f7fffffe          BL       assert_failed
                  |L12.22|
;;;458      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000016  2c04              CMP      r4,#4
000018  d108              BNE      |L12.44|
;;;459      {
;;;460        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
00001a  f04f20e0          MOV      r0,#0xe000e000
00001e  6900              LDR      r0,[r0,#0x10]
000020  f0400004          ORR      r0,r0,#4
000024  f04f21e0          MOV      r1,#0xe000e000
000028  6108              STR      r0,[r1,#0x10]
00002a  e007              B        |L12.60|
                  |L12.44|
;;;461      }
;;;462      else
;;;463      {
;;;464        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
00002c  f04f20e0          MOV      r0,#0xe000e000
000030  6900              LDR      r0,[r0,#0x10]
000032  f0200004          BIC      r0,r0,#4
000036  f04f21e0          MOV      r1,#0xe000e000
00003a  6108              STR      r0,[r1,#0x10]
                  |L12.60|
;;;465      }
;;;466    }
00003c  bd10              POP      {r4,pc}
;;;467    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
000040  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_corte"
000044  72697665
000048  72732f53
00004c  544d3332
000050  46317878
000054  5f48414c
000058  5f447269
00005c  7665722f
000060  5372632f
000064  73746d33
000068  32663178
00006c  785f6861
000070  6c5f636f
000074  727465  
000077  782e6300          DCB      "x.c",0
00007b  00                DCB      0

                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;480      */
;;;481    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;482    {
;;;483      /* NOTE : This function Should not be modified, when the callback is needed,
;;;484                the HAL_SYSTICK_Callback could be implemented in the user file
;;;485       */
;;;486    }
;;;487    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Config PROC
;;;228      */
;;;229    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  b570              PUSH     {r4-r6,lr}
;;;230    {
000002  4604              MOV      r4,r0
;;;231       return SysTick_Config(TicksNumb);
000004  4625              MOV      r5,r4
000006  1e68              SUBS     r0,r5,#1
000008  f1b07f80          CMP      r0,#0x1000000
00000c  d301              BCC      |L14.18|
00000e  2001              MOVS     r0,#1
000010  e00f              B        |L14.50|
                  |L14.18|
000012  1e68              SUBS     r0,r5,#1
000014  f04f21e0          MOV      r1,#0xe000e000
000018  6148              STR      r0,[r1,#0x14]
00001a  210f              MOVS     r1,#0xf
00001c  f04f30ff          MOV      r0,#0xffffffff
000020  f7fffffe          BL       __NVIC_SetPriority
000024  2000              MOVS     r0,#0
000026  f04f21e0          MOV      r1,#0xe000e000
00002a  6188              STR      r0,[r1,#0x18]
00002c  2007              MOVS     r0,#7
00002e  6108              STR      r0,[r1,#0x10]
000030  2000              MOVS     r0,#0
                  |L14.50|
;;;232    }
000032  bd70              POP      {r4-r6,pc}
;;;233    /**
                          ENDP


                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;471      */
;;;472    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;473    {
;;;474      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;475    }
000006  bd10              POP      {r4,pc}
;;;476    
                          ENDP


                          AREA ||i.__NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  __NVIC_GetPriorityGrouping PROC
;;;1498    */
;;;1499   __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L16.12|
;;;1500   {
;;;1501     return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;1502   }
000008  4770              BX       lr
;;;1503   
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0xe000ed0c

                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  __NVIC_SetPriority PROC
;;;1638    */
;;;1639   __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1640   {
;;;1641     if ((int32_t)(IRQn) >= 0)
000002  2800              CMP      r0,#0
000004  db04              BLT      |L17.16|
;;;1642     {
;;;1643       NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e13              LSRS     r3,r2,#24
00000a  4a05              LDR      r2,|L17.32|
00000c  5413              STRB     r3,[r2,r0]
00000e  e006              B        |L17.30|
                  |L17.16|
;;;1644     }
;;;1645     else
;;;1646     {
;;;1647       SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000010  070a              LSLS     r2,r1,#28
000012  0e14              LSRS     r4,r2,#24
000014  4a03              LDR      r2,|L17.36|
000016  f000030f          AND      r3,r0,#0xf
00001a  1f1b              SUBS     r3,r3,#4
00001c  54d4              STRB     r4,[r2,r3]
                  |L17.30|
;;;1648     }
;;;1649   }
00001e  bd10              POP      {r4,pc}
;;;1650   
                          ENDP

                  |L17.32|
                          DCD      0xe000e400
                  |L17.36|
                          DCD      0xe000ed18

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH|
#line 478
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX|
#line 665
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
