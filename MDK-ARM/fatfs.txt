; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\fatfs.o --asm_dir=./ --list_dir=--list --depend=template\fatfs.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\fatfs.crf ../Src/fatfs.c]
                          THUMB

                          AREA ||i.MX_FATFS_Init||, CODE, READONLY, ALIGN=2

                  MX_FATFS_Init PROC
;;;33     
;;;34     void MX_FATFS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36       /*## FatFS: Link the USER driver ###########################*/
;;;37       retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
000002  4906              LDR      r1,|L1.28|
000004  4806              LDR      r0,|L1.32|
000006  f7fffffe          BL       FATFS_LinkDriver
00000a  4906              LDR      r1,|L1.36|
00000c  7008              STRB     r0,[r1,#0]
;;;38     
;;;39       /* USER CODE BEGIN Init */
;;;40       /* additional user code for init */
;;;41     	mount_disk();
00000e  f7fffffe          BL       mount_disk
;;;42     	//get_disk_info();
;;;43     	create_file();
000012  f7fffffe          BL       create_file
;;;44     	read_file();
000016  f7fffffe          BL       read_file
;;;45       /* USER CODE END Init */
;;;46     }
00001a  bd10              POP      {r4,pc}
;;;47     
                          ENDP

                  |L1.28|
                          DCD      USERPath
                  |L1.32|
                          DCD      USER_Driver
                  |L1.36|
                          DCD      retUSER

                          AREA ||i.create_file||, CODE, READONLY, ALIGN=2

                  create_file PROC
;;;90     
;;;91     void create_file(void)
000000  b570              PUSH     {r4-r6,lr}
;;;92     {
000002  f5ad5d82          SUB      sp,sp,#0x1040
;;;93       FIL file;
;;;94       FIL *pf = &file;
000006  ac05              ADD      r4,sp,#0x14
;;;95       uint8_t res;
;;;96     	
;;;97       res = f_open(pf, "0:/test.txt", FA_OPEN_ALWAYS | FA_WRITE);
000008  2212              MOVS     r2,#0x12
00000a  a108              ADR      r1,|L2.44|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       f_open
000012  4605              MOV      r5,r0
;;;98       if (res == FR_OK)
;;;99       {
;;;100        //printf("creat ok\n"); 				
;;;101      }
;;;102      else
;;;103      {
;;;104        //printf("creat failed\n");
;;;105       // printf("error code: %d\n",res);	
;;;106      }
;;;107      
;;;108      f_printf(pf, "hello fatfs!\n");
000014  a108              ADR      r1,|L2.56|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       f_printf
;;;109      
;;;110      res = f_close(pf);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       f_close
000022  4605              MOV      r5,r0
;;;111        if (res != FR_OK)
;;;112        {
;;;113          //printf("close file error\n");
;;;114          //printf("error code: %d\n",res);				
;;;115        }
;;;116    }
000024  f50d5d82          ADD      sp,sp,#0x1040
000028  bd70              POP      {r4-r6,pc}
;;;117    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
00002c  303a2f74          DCB      "0:/test.txt",0
000030  6573742e
000034  74787400
                  |L2.56|
000038  68656c6c          DCB      "hello fatfs!\n",0
00003c  6f206661
000040  74667321
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.format_disk||, CODE, READONLY, ALIGN=2

                  format_disk PROC
;;;72     
;;;73     void format_disk(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75       uint8_t res = 0;
000002  2400              MOVS     r4,#0
;;;76           
;;;77       //printf("PROCESSING...\n");
;;;78       res = f_mkfs(USERPath, 1, 4096);
000004  f44f5280          MOV      r2,#0x1000
000008  2101              MOVS     r1,#1
00000a  4807              LDR      r0,|L3.40|
00000c  f7fffffe          BL       f_mkfs
000010  4604              MOV      r4,r0
;;;79       if (res == FR_OK)
000012  b91c              CBNZ     r4,|L3.28|
;;;80       {
;;;81         HAL_Delay(100);
000014  2064              MOVS     r0,#0x64
000016  f7fffffe          BL       HAL_Delay
                  |L3.26|
;;;82     		return;
;;;83       }
;;;84       else
;;;85       {
;;;86     		HAL_Delay(100);
;;;87         //printf("failed with: %d\n",res);
;;;88       }
;;;89     }
00001a  bd10              POP      {r4,pc}
                  |L3.28|
00001c  2064              MOVS     r0,#0x64              ;86
00001e  f7fffffe          BL       HAL_Delay
000022  bf00              NOP      
000024  e7f9              B        |L3.26|
;;;90     
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      USERPath

                          AREA ||i.get_disk_info||, CODE, READONLY, ALIGN=2

                  get_disk_info PROC
;;;117    
;;;118    void get_disk_info(void)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  f5ad5d82          SUB      sp,sp,#0x1040
;;;120    	FATFS fs;
;;;121    	FATFS *fls = &fs;
000006  a903              ADD      r1,sp,#0xc
000008  9102              STR      r1,[sp,#8]
;;;122    	FRESULT res;
;;;123    	DWORD fre_clust;	
;;;124    	uint16_t total_size=0;
00000a  2500              MOVS     r5,#0
;;;125    	uint16_t free_size=0;
00000c  2600              MOVS     r6,#0
;;;126    	UNUSED(total_size);
;;;127    	UNUSED(free_size);
;;;128    	res = f_getfree("/",&fre_clust,&fls);         /* Get Number of Free Clusters */
00000e  aa02              ADD      r2,sp,#8
000010  a901              ADD      r1,sp,#4
000012  a010              ADR      r0,|L4.84|
000014  f7fffffe          BL       f_getfree
000018  4604              MOV      r4,r0
;;;129    	if (res == FR_OK) 
00001a  b9bc              CBNZ     r4,|L4.76|
;;;130    	{
;;;131    		total_size = ((fls->n_fatent-2)*fls->csize)*4;
00001c  9802              LDR      r0,[sp,#8]
00001e  f5005080          ADD      r0,r0,#0x1000
000022  6980              LDR      r0,[r0,#0x18]
000024  1e80              SUBS     r0,r0,#2
000026  9902              LDR      r1,[sp,#8]
000028  f5015180          ADD      r1,r1,#0x1000
00002c  7889              LDRB     r1,[r1,#2]
00002e  4348              MULS     r0,r1,r0
000030  f64f71ff          MOV      r1,#0xffff
000034  ea010580          AND      r5,r1,r0,LSL #2
;;;132    		free_size = (fre_clust*fls->csize)*4;
000038  9802              LDR      r0,[sp,#8]
00003a  f5005080          ADD      r0,r0,#0x1000
00003e  7881              LDRB     r1,[r0,#2]
000040  9801              LDR      r0,[sp,#4]
000042  4348              MULS     r0,r1,r0
000044  f64f71ff          MOV      r1,#0xffff
000048  ea010680          AND      r6,r1,r0,LSL #2
                  |L4.76|
;;;133    	                                             /* Print free space in unit of MB (assuming 4096 bytes/sector) */
;;;134            //printf("%d KB Total Drive Space.\n"
;;;135             //      "%d KB Available Space.\n",
;;;136            //       ((fls->n_fatent-2)*fls->csize)*4,(fre_clust*fls->csize)*4);
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		//printf("get disk info error\n");
;;;141    		//printf("error code: %d\n",res);
;;;142    	}																									   
;;;143    }
00004c  f50d5d82          ADD      sp,sp,#0x1040
000050  bd70              POP      {r4-r6,pc}
;;;144    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
000054  2f00              DCB      "/",0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.get_fattime||, CODE, READONLY, ALIGN=1

                  get_fattime PROC
;;;52       */
;;;53     DWORD get_fattime(void)
000000  2000              MOVS     r0,#0
;;;54     {
;;;55       /* USER CODE BEGIN get_fattime */
;;;56       return 0;
;;;57       /* USER CODE END get_fattime */
;;;58     }
000002  4770              BX       lr
;;;59     
                          ENDP


                          AREA ||i.mount_disk||, CODE, READONLY, ALIGN=2

                  mount_disk PROC
;;;60     /* USER CODE BEGIN Application */
;;;61     void mount_disk(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63       uint8_t res = f_mount(&USERFatFS, USERPath, 1);
000002  2201              MOVS     r2,#1
000004  4905              LDR      r1,|L6.28|
000006  4806              LDR      r0,|L6.32|
000008  f7fffffe          BL       f_mount
00000c  4604              MOV      r4,r0
;;;64       if (res == FR_NO_FILESYSTEM)
00000e  2c0d              CMP      r4,#0xd
000010  d102              BNE      |L6.24|
;;;65       {
;;;66     		format_disk();
000012  f7fffffe          BL       format_disk
                  |L6.22|
;;;67         //printf("FAILED: %d\n",res);
;;;68        return;
;;;69      }
;;;70       //printf("MOUNT OK\n");
;;;71     }
000016  bd10              POP      {r4,pc}
                  |L6.24|
000018  bf00              NOP      
00001a  e7fc              B        |L6.22|
;;;72     
                          ENDP

                  |L6.28|
                          DCD      USERPath
                  |L6.32|
                          DCD      USERFatFS

                          AREA ||i.read_file||, CODE, READONLY, ALIGN=2

                  read_file PROC
;;;144    
;;;145    void read_file(void)
000000  b510              PUSH     {r4,lr}
;;;146    {
000002  f5ad5d86          SUB      sp,sp,#0x10c0
;;;147      FIL file;
;;;148      FRESULT res;
;;;149      UINT bw;
;;;150      uint8_t rbuf[100] = {0};
000006  2164              MOVS     r1,#0x64
000008  a80b              ADD      r0,sp,#0x2c
00000a  f7fffffe          BL       __aeabi_memclr4
;;;151      
;;;152      res = f_open(&file, "0:/test.txt", FA_READ);
00000e  2201              MOVS     r2,#1
000010  a10a              ADR      r1,|L7.60|
000012  a825              ADD      r0,sp,#0x94
000014  f7fffffe          BL       f_open
000018  4604              MOV      r4,r0
;;;153      if (res != FR_OK)
00001a  b114              CBZ      r4,|L7.34|
                  |L7.28|
;;;154      {
;;;155        //printf("open error: %d\n",res);
;;;156        return;
;;;157      }
;;;158      f_read(&file, rbuf, 20, &bw);
;;;159      //printf("%s\n", rbuf);
;;;160      
;;;161      res = f_close(&file);
;;;162      if (res != FR_OK)
;;;163      {
;;;164         //printf("close file error\n");
;;;165         //printf("error code: %d\n",res);				
;;;166      }
;;;167    }
00001c  f50d5d86          ADD      sp,sp,#0x10c0
000020  bd10              POP      {r4,pc}
                  |L7.34|
000022  ab24              ADD      r3,sp,#0x90           ;158
000024  2214              MOVS     r2,#0x14              ;158
000026  a90b              ADD      r1,sp,#0x2c           ;158
000028  a825              ADD      r0,sp,#0x94           ;158
00002a  f7fffffe          BL       f_read
00002e  a825              ADD      r0,sp,#0x94           ;161
000030  f7fffffe          BL       f_close
000034  4604              MOV      r4,r0                 ;161
000036  bf00              NOP      
000038  e7f0              B        |L7.28|
;;;168    /* USER CODE END Application */
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
00003c  303a2f74          DCB      "0:/test.txt",0
000040  6573742e
000044  74787400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USERFatFS
                          %        4148
                  USERFile
                          %        4140

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CHANNEL_OFFSET_TAB
000000  081c3044          DCB      0x08,0x1c,0x30,0x44
000004  586c80            DCB      0x58,0x6c,0x80

                          AREA ||.data||, DATA, ALIGN=0

                  retUSER
000000  00                DCB      0x00
                  USERPath
000001  000000            DCB      0x00,0x00,0x00
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "../Src/fatfs.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_fatfs_c_ff45d98e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___7_fatfs_c_ff45d98e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_fatfs_c_ff45d98e____REVSH|
#line 478
|__asm___7_fatfs_c_ff45d98e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_fatfs_c_ff45d98e____RRX|
#line 665
|__asm___7_fatfs_c_ff45d98e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
