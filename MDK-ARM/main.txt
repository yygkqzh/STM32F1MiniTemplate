; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\main.o --asm_dir=./ --list_dir=--list --depend=template\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;161      */
;;;162    void Error_Handler(void)
000000  b672              CPSID    i
;;;163    {
;;;164      /* USER CODE BEGIN Error_Handler_Debug */
;;;165      /* User can add his own implementation to report the HAL error return state */
;;;166      __disable_irq();
;;;167      while (1)
000002  bf00              NOP      
                  |L1.4|
000004  e7fe              B        |L1.4|
;;;168      {
;;;169      }
;;;170      /* USER CODE END Error_Handler_Debug */
;;;171    }
;;;172    
                          ENDP


                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;112      */
;;;113    void SystemClock_Config(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115      LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
000002  2002              MOVS     r0,#2
000004  493c              LDR      r1,|L2.248|
000006  6809              LDR      r1,[r1,#0]
000008  f0210107          BIC      r1,r1,#7
00000c  4301              ORRS     r1,r1,r0
00000e  4a3a              LDR      r2,|L2.248|
000010  6011              STR      r1,[r2,#0]
000012  bf00              NOP      
;;;116      while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
000014  bf00              NOP      
                  |L2.22|
000016  bf00              NOP      
000018  4837              LDR      r0,|L2.248|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000007          AND      r0,r0,#7
000020  2802              CMP      r0,#2
000022  d1f8              BNE      |L2.22|
;;;117      {
;;;118      }
;;;119      LL_RCC_HSE_Enable();
000024  bf00              NOP      
000026  4835              LDR      r0,|L2.252|
000028  6800              LDR      r0,[r0,#0]
00002a  f4403080          ORR      r0,r0,#0x10000
00002e  4933              LDR      r1,|L2.252|
000030  6008              STR      r0,[r1,#0]
000032  bf00              NOP      
;;;120    
;;;121       /* Wait till HSE is ready */
;;;122      while(LL_RCC_HSE_IsReady() != 1)
000034  bf00              NOP      
                  |L2.54|
000036  bf00              NOP      
000038  4830              LDR      r0,|L2.252|
00003a  6800              LDR      r0,[r0,#0]
00003c  f3c04040          UBFX     r0,r0,#17,#1
000040  2800              CMP      r0,#0
000042  d0f8              BEQ      |L2.54|
;;;123      {
;;;124    
;;;125      }
;;;126      LL_RCC_HSE_EnableCSS();
000044  bf00              NOP      
000046  482d              LDR      r0,|L2.252|
000048  6800              LDR      r0,[r0,#0]
00004a  f4402000          ORR      r0,r0,#0x80000
00004e  492b              LDR      r1,|L2.252|
000050  6008              STR      r0,[r1,#0]
000052  bf00              NOP      
;;;127      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
000054  f44f3080          MOV      r0,#0x10000
000058  f44f11e0          MOV      r1,#0x1c0000
00005c  4a27              LDR      r2,|L2.252|
00005e  6852              LDR      r2,[r2,#4]
000060  f422127c          BIC      r2,r2,#0x3f0000
000064  f4003340          AND      r3,r0,#0x30000
000068  430b              ORRS     r3,r3,r1
00006a  431a              ORRS     r2,r2,r3
00006c  4b23              LDR      r3,|L2.252|
00006e  605a              STR      r2,[r3,#4]
000070  bf00              NOP      
;;;128      LL_RCC_PLL_Enable();
000072  bf00              NOP      
000074  4618              MOV      r0,r3
000076  6800              LDR      r0,[r0,#0]
000078  f0407080          ORR      r0,r0,#0x1000000
00007c  4619              MOV      r1,r3
00007e  6008              STR      r0,[r1,#0]
000080  bf00              NOP      
;;;129    
;;;130       /* Wait till PLL is ready */
;;;131      while(LL_RCC_PLL_IsReady() != 1)
000082  bf00              NOP      
                  |L2.132|
000084  bf00              NOP      
000086  481d              LDR      r0,|L2.252|
000088  6800              LDR      r0,[r0,#0]
00008a  f3c06040          UBFX     r0,r0,#25,#1
00008e  2800              CMP      r0,#0
000090  d0f8              BEQ      |L2.132|
;;;132      {
;;;133    
;;;134      }
;;;135      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
000092  2000              MOVS     r0,#0
000094  4919              LDR      r1,|L2.252|
000096  6849              LDR      r1,[r1,#4]
000098  f02101f0          BIC      r1,r1,#0xf0
00009c  4301              ORRS     r1,r1,r0
00009e  4a17              LDR      r2,|L2.252|
0000a0  6051              STR      r1,[r2,#4]
0000a2  bf00              NOP      
;;;136      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
0000a4  1510              ASRS     r0,r2,#20
0000a6  4611              MOV      r1,r2
0000a8  6849              LDR      r1,[r1,#4]
0000aa  f42161e0          BIC      r1,r1,#0x700
0000ae  4301              ORRS     r1,r1,r0
0000b0  6051              STR      r1,[r2,#4]
0000b2  bf00              NOP      
;;;137      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
0000b4  2000              MOVS     r0,#0
0000b6  4611              MOV      r1,r2
0000b8  6849              LDR      r1,[r1,#4]
0000ba  f4215160          BIC      r1,r1,#0x3800
0000be  4301              ORRS     r1,r1,r0
0000c0  6051              STR      r1,[r2,#4]
0000c2  bf00              NOP      
;;;138      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
0000c4  2002              MOVS     r0,#2
0000c6  4611              MOV      r1,r2
0000c8  6849              LDR      r1,[r1,#4]
0000ca  f0210103          BIC      r1,r1,#3
0000ce  4301              ORRS     r1,r1,r0
0000d0  6051              STR      r1,[r2,#4]
0000d2  bf00              NOP      
;;;139    
;;;140       /* Wait till System clock is ready */
;;;141      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
0000d4  bf00              NOP      
                  |L2.214|
0000d6  bf00              NOP      
0000d8  4808              LDR      r0,|L2.252|
0000da  6840              LDR      r0,[r0,#4]
0000dc  f000000c          AND      r0,r0,#0xc
0000e0  2808              CMP      r0,#8
0000e2  d1f8              BNE      |L2.214|
;;;142      {
;;;143    
;;;144      }
;;;145      LL_SetSystemCoreClock(72000000);
0000e4  4806              LDR      r0,|L2.256|
0000e6  f7fffffe          BL       LL_SetSystemCoreClock
;;;146    
;;;147       /* Update the time base */
;;;148      if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
0000ea  2000              MOVS     r0,#0
0000ec  f7fffffe          BL       HAL_InitTick
0000f0  b108              CBZ      r0,|L2.246|
;;;149      {
;;;150        Error_Handler();
0000f2  f7fffffe          BL       Error_Handler
                  |L2.246|
;;;151      }
;;;152    }
0000f6  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L2.248|
                          DCD      0x40022000
                  |L2.252|
                          DCD      0x40021000
                  |L2.256|
                          DCD      0x044aa200

                          AREA ||i.assert_failed||, CODE, READONLY, ALIGN=1

                  assert_failed PROC
;;;180      */
;;;181    void assert_failed(uint8_t *file, uint32_t line)
000000  4770              BX       lr
;;;182    {
;;;183      /* USER CODE BEGIN 6 */
;;;184      /* User can add his own implementation to report the file name and line number,
;;;185         ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
;;;186      /* USER CODE END 6 */
;;;187    }
;;;188    #endif /* USE_FULL_ASSERT */
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;66       */
;;;67     int main(void)
000000  f7fffffe          BL       HAL_Init
;;;68     {
;;;69       /* USER CODE BEGIN 1 */
;;;70     
;;;71       /* USER CODE END 1 */
;;;72     
;;;73       /* MCU Configuration--------------------------------------------------------*/
;;;74     
;;;75       /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;76       HAL_Init();
;;;77     
;;;78       /* USER CODE BEGIN Init */
;;;79     
;;;80       /* USER CODE END Init */
;;;81     
;;;82       /* Configure the system clock */
;;;83       SystemClock_Config();
000004  f7fffffe          BL       SystemClock_Config
;;;84     
;;;85       /* USER CODE BEGIN SysInit */
;;;86     
;;;87       /* USER CODE END SysInit */
;;;88     
;;;89       /* Initialize all configured peripherals */
;;;90       MX_GPIO_Init();
000008  f7fffffe          BL       MX_GPIO_Init
;;;91       MX_DMA_Init();
00000c  f7fffffe          BL       MX_DMA_Init
;;;92       MX_SPI1_Init();
000010  f7fffffe          BL       MX_SPI1_Init
;;;93       MX_FATFS_Init();
000014  f7fffffe          BL       MX_FATFS_Init
;;;94       /* USER CODE BEGIN 2 */
;;;95      
;;;96       /* USER CODE END 2 */
;;;97     
;;;98       /* Infinite loop */
;;;99       /* USER CODE BEGIN WHILE */
;;;100      while (1)
000018  bf00              NOP      
                  |L4.26|
00001a  e7fe              B        |L4.26|
;;;101      {
;;;102        /* USER CODE END WHILE */
;;;103    
;;;104        /* USER CODE BEGIN 3 */
;;;105      }
;;;106      /* USER CODE END 3 */
;;;107    }
;;;108    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CHANNEL_OFFSET_TAB
000000  081c3044          DCB      0x08,0x1c,0x30,0x44
000004  586c80            DCB      0x58,0x6c,0x80

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 478
|__asm___6_main_c_main____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 665
|__asm___6_main_c_main____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
