; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_dma.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_dma.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;857      */
;;;858    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;859    {
;;;860      /* Clear all flags */
;;;861      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;862    
;;;863      /* Configure DMA Channel data length */
;;;864      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;865    
;;;866      /* Memory to Peripheral */
;;;867      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6844              LDR      r4,[r0,#4]
000014  2c10              CMP      r4,#0x10
000016  d104              BNE      |L1.34|
;;;868      {
;;;869        /* Configure DMA Channel destination address */
;;;870        hdma->Instance->CPAR = DstAddress;
000018  6804              LDR      r4,[r0,#0]
00001a  60a2              STR      r2,[r4,#8]
;;;871    
;;;872        /* Configure DMA Channel source address */
;;;873        hdma->Instance->CMAR = SrcAddress;
00001c  6804              LDR      r4,[r0,#0]
00001e  60e1              STR      r1,[r4,#0xc]
000020  e003              B        |L1.42|
                  |L1.34|
;;;874      }
;;;875      /* Peripheral to Memory */
;;;876      else
;;;877      {
;;;878        /* Configure DMA Channel source address */
;;;879        hdma->Instance->CPAR = SrcAddress;
000022  6804              LDR      r4,[r0,#0]
000024  60a1              STR      r1,[r4,#8]
;;;880    
;;;881        /* Configure DMA Channel destination address */
;;;882        hdma->Instance->CMAR = DstAddress;
000026  6804              LDR      r4,[r0,#0]
000028  60e2              STR      r2,[r4,#0xc]
                  |L1.42|
;;;883      }
;;;884    }
00002a  bd30              POP      {r4,r5,pc}
;;;885    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;415      */
;;;416    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;417    {
;;;418      HAL_StatusTypeDef status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;419      
;;;420      if(hdma->State != HAL_DMA_STATE_BUSY)
000004  f8910021          LDRB     r0,[r1,#0x21]
000008  2802              CMP      r0,#2
00000a  d008              BEQ      |L2.30|
;;;421      {
;;;422        /* no transfer ongoing */
;;;423        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2004              MOVS     r0,#4
00000e  6388              STR      r0,[r1,#0x38]
;;;424        
;;;425        /* Process Unlocked */
;;;426        __HAL_UNLOCK(hdma);
000010  bf00              NOP      
000012  2000              MOVS     r0,#0
000014  f8810020          STRB     r0,[r1,#0x20]
000018  bf00              NOP      
;;;427        
;;;428        return HAL_ERROR;
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;429      }
;;;430      else
;;;431    
;;;432      {
;;;433        /* Disable DMA IT */
;;;434        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;435          
;;;436        /* Disable the channel */
;;;437        __HAL_DMA_DISABLE(hdma);
;;;438          
;;;439        /* Clear all flags */
;;;440        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;441      }
;;;442      /* Change the DMA state */
;;;443      hdma->State = HAL_DMA_STATE_READY;
;;;444    
;;;445      /* Process Unlocked */
;;;446      __HAL_UNLOCK(hdma);      
;;;447      
;;;448      return status; 
;;;449    }
00001c  4770              BX       lr
                  |L2.30|
00001e  6808              LDR      r0,[r1,#0]            ;434
000020  6800              LDR      r0,[r0,#0]            ;434
000022  f020000e          BIC      r0,r0,#0xe            ;434
000026  680b              LDR      r3,[r1,#0]            ;434
000028  6018              STR      r0,[r3,#0]            ;434
00002a  6808              LDR      r0,[r1,#0]            ;437
00002c  6800              LDR      r0,[r0,#0]            ;437
00002e  f0200001          BIC      r0,r0,#1              ;437
000032  680b              LDR      r3,[r1,#0]            ;437
000034  6018              STR      r0,[r3,#0]            ;437
000036  f8913040          LDRB     r3,[r1,#0x40]         ;440
00003a  2001              MOVS     r0,#1                 ;440
00003c  4098              LSLS     r0,r0,r3              ;440
00003e  6bcb              LDR      r3,[r1,#0x3c]         ;440
000040  6058              STR      r0,[r3,#4]            ;440
000042  2001              MOVS     r0,#1                 ;443
000044  f8810021          STRB     r0,[r1,#0x21]         ;443
000048  bf00              NOP                            ;446
00004a  2000              MOVS     r0,#0                 ;446
00004c  f8810020          STRB     r0,[r1,#0x20]         ;446
000050  bf00              NOP                            ;446
000052  4610              MOV      r0,r2                 ;448
000054  e7e2              B        |L2.28|
;;;450    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;456      */
;;;457    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;458    {  
000002  4604              MOV      r4,r0
;;;459      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;460      
;;;461      if(HAL_DMA_STATE_BUSY != hdma->State)
000006  f8940021          LDRB     r0,[r4,#0x21]
00000a  2802              CMP      r0,#2
00000c  d003              BEQ      |L3.22|
;;;462      {
;;;463        /* no transfer ongoing */
;;;464        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000e  2004              MOVS     r0,#4
000010  63a0              STR      r0,[r4,#0x38]
;;;465            
;;;466        status = HAL_ERROR;
000012  2501              MOVS     r5,#1
000014  e048              B        |L3.168|
                  |L3.22|
;;;467      }
;;;468      else
;;;469      { 
;;;470        /* Disable DMA IT */
;;;471        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000016  6820              LDR      r0,[r4,#0]
000018  6800              LDR      r0,[r0,#0]
00001a  f020000e          BIC      r0,r0,#0xe
00001e  6821              LDR      r1,[r4,#0]
000020  6008              STR      r0,[r1,#0]
;;;472    
;;;473        /* Disable the channel */
;;;474        __HAL_DMA_DISABLE(hdma);
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
;;;475    
;;;476        /* Clear all flags */
;;;477        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
00002e  491f              LDR      r1,|L3.172|
000030  6820              LDR      r0,[r4,#0]
000032  4288              CMP      r0,r1
000034  d101              BNE      |L3.58|
000036  2001              MOVS     r0,#1
000038  e026              B        |L3.136|
                  |L3.58|
00003a  491c              LDR      r1,|L3.172|
00003c  3114              ADDS     r1,r1,#0x14
00003e  6820              LDR      r0,[r4,#0]
000040  4288              CMP      r0,r1
000042  d101              BNE      |L3.72|
000044  2010              MOVS     r0,#0x10
000046  e01f              B        |L3.136|
                  |L3.72|
000048  4918              LDR      r1,|L3.172|
00004a  3128              ADDS     r1,r1,#0x28
00004c  6820              LDR      r0,[r4,#0]
00004e  4288              CMP      r0,r1
000050  d101              BNE      |L3.86|
000052  1580              ASRS     r0,r0,#22
000054  e018              B        |L3.136|
                  |L3.86|
000056  4915              LDR      r1,|L3.172|
000058  313c              ADDS     r1,r1,#0x3c
00005a  6820              LDR      r0,[r4,#0]
00005c  4288              CMP      r0,r1
00005e  d101              BNE      |L3.100|
000060  1480              ASRS     r0,r0,#18
000062  e011              B        |L3.136|
                  |L3.100|
000064  4911              LDR      r1,|L3.172|
000066  3150              ADDS     r1,r1,#0x50
000068  6820              LDR      r0,[r4,#0]
00006a  4288              CMP      r0,r1
00006c  d102              BNE      |L3.116|
00006e  f44f3080          MOV      r0,#0x10000
000072  e009              B        |L3.136|
                  |L3.116|
000074  490d              LDR      r1,|L3.172|
000076  3164              ADDS     r1,r1,#0x64
000078  6820              LDR      r0,[r4,#0]
00007a  4288              CMP      r0,r1
00007c  d102              BNE      |L3.132|
00007e  f44f1080          MOV      r0,#0x100000
000082  e001              B        |L3.136|
                  |L3.132|
000084  f04f7080          MOV      r0,#0x1000000
                  |L3.136|
000088  4908              LDR      r1,|L3.172|
00008a  3908              SUBS     r1,r1,#8
00008c  6048              STR      r0,[r1,#4]
;;;478    
;;;479        /* Change the DMA state */
;;;480        hdma->State = HAL_DMA_STATE_READY;
00008e  2001              MOVS     r0,#1
000090  f8840021          STRB     r0,[r4,#0x21]
;;;481    
;;;482        /* Process Unlocked */
;;;483        __HAL_UNLOCK(hdma);
000094  bf00              NOP      
000096  2000              MOVS     r0,#0
000098  f8840020          STRB     r0,[r4,#0x20]
00009c  bf00              NOP      
;;;484    
;;;485        /* Call User Abort callback */
;;;486        if(hdma->XferAbortCallback != NULL)
00009e  6b60              LDR      r0,[r4,#0x34]
0000a0  b110              CBZ      r0,|L3.168|
;;;487        {
;;;488          hdma->XferAbortCallback(hdma);
0000a2  4620              MOV      r0,r4
0000a4  6b61              LDR      r1,[r4,#0x34]
0000a6  4788              BLX      r1
                  |L3.168|
;;;489        } 
;;;490      }
;;;491      return status;
0000a8  4628              MOV      r0,r5
;;;492    }
0000aa  bd70              POP      {r4-r6,pc}
;;;493    
                          ENDP

                  |L3.172|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;219      */
;;;220    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;221    {
000002  4604              MOV      r4,r0
;;;222      /* Check the DMA handle allocation */
;;;223      if(hdma == NULL)
000004  b90c              CBNZ     r4,|L4.10|
;;;224      {
;;;225        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L4.8|
;;;226      }
;;;227    
;;;228      /* Check the parameters */
;;;229      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;230    
;;;231      /* Disable the selected DMA Channelx */
;;;232      __HAL_DMA_DISABLE(hdma);
;;;233    
;;;234      /* Reset DMA Channel control register */
;;;235      hdma->Instance->CCR  = 0U;
;;;236    
;;;237      /* Reset DMA Channel Number of Data to Transfer register */
;;;238      hdma->Instance->CNDTR = 0U;
;;;239    
;;;240      /* Reset DMA Channel peripheral address register */
;;;241      hdma->Instance->CPAR  = 0U;
;;;242    
;;;243      /* Reset DMA Channel memory address register */
;;;244      hdma->Instance->CMAR = 0U;
;;;245    
;;;246    #if defined (DMA2)
;;;247      /* calculation of the channel index */
;;;248      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;249      {
;;;250        /* DMA1 */
;;;251        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;252        hdma->DmaBaseAddress = DMA1;
;;;253      }
;;;254      else
;;;255      {
;;;256        /* DMA2 */
;;;257        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;258        hdma->DmaBaseAddress = DMA2;
;;;259      }
;;;260    #else
;;;261      /* DMA1 */
;;;262      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;263      hdma->DmaBaseAddress = DMA1;
;;;264    #endif /* DMA2 */
;;;265    
;;;266      /* Clear all flags */
;;;267      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
;;;268    
;;;269      /* Clean all callbacks */
;;;270      hdma->XferCpltCallback = NULL;
;;;271      hdma->XferHalfCpltCallback = NULL;
;;;272      hdma->XferErrorCallback = NULL;
;;;273      hdma->XferAbortCallback = NULL;
;;;274    
;;;275      /* Reset the error code */
;;;276      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;277    
;;;278      /* Reset the DMA state */
;;;279      hdma->State = HAL_DMA_STATE_RESET;
;;;280    
;;;281      /* Release Lock */
;;;282      __HAL_UNLOCK(hdma);
;;;283    
;;;284      return HAL_OK;
;;;285    }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  492a              LDR      r1,|L4.180|
00000c  6820              LDR      r0,[r4,#0]            ;229
00000e  4288              CMP      r0,r1                 ;229
000010  d01d              BEQ      |L4.78|
000012  4928              LDR      r1,|L4.180|
000014  3114              ADDS     r1,r1,#0x14           ;229
000016  6820              LDR      r0,[r4,#0]            ;229
000018  4288              CMP      r0,r1                 ;229
00001a  d018              BEQ      |L4.78|
00001c  4925              LDR      r1,|L4.180|
00001e  3128              ADDS     r1,r1,#0x28           ;229
000020  6820              LDR      r0,[r4,#0]            ;229
000022  4288              CMP      r0,r1                 ;229
000024  d013              BEQ      |L4.78|
000026  4923              LDR      r1,|L4.180|
000028  313c              ADDS     r1,r1,#0x3c           ;229
00002a  6820              LDR      r0,[r4,#0]            ;229
00002c  4288              CMP      r0,r1                 ;229
00002e  d00e              BEQ      |L4.78|
000030  4920              LDR      r1,|L4.180|
000032  3150              ADDS     r1,r1,#0x50           ;229
000034  6820              LDR      r0,[r4,#0]            ;229
000036  4288              CMP      r0,r1                 ;229
000038  d009              BEQ      |L4.78|
00003a  491e              LDR      r1,|L4.180|
00003c  3164              ADDS     r1,r1,#0x64           ;229
00003e  6820              LDR      r0,[r4,#0]            ;229
000040  4288              CMP      r0,r1                 ;229
000042  d004              BEQ      |L4.78|
000044  491b              LDR      r1,|L4.180|
000046  3178              ADDS     r1,r1,#0x78           ;229
000048  6820              LDR      r0,[r4,#0]            ;229
00004a  4288              CMP      r0,r1                 ;229
00004c  d100              BNE      |L4.80|
                  |L4.78|
00004e  e003              B        |L4.88|
                  |L4.80|
000050  21e5              MOVS     r1,#0xe5              ;229
000052  a019              ADR      r0,|L4.184|
000054  f7fffffe          BL       assert_failed
                  |L4.88|
000058  6820              LDR      r0,[r4,#0]            ;232
00005a  6800              LDR      r0,[r0,#0]            ;232
00005c  f0200001          BIC      r0,r0,#1              ;232
000060  6821              LDR      r1,[r4,#0]            ;232
000062  6008              STR      r0,[r1,#0]            ;232
000064  2000              MOVS     r0,#0                 ;235
000066  6821              LDR      r1,[r4,#0]            ;235
000068  6008              STR      r0,[r1,#0]            ;235
00006a  6821              LDR      r1,[r4,#0]            ;238
00006c  6048              STR      r0,[r1,#4]            ;238
00006e  6821              LDR      r1,[r4,#0]            ;241
000070  6088              STR      r0,[r1,#8]            ;241
000072  6821              LDR      r1,[r4,#0]            ;244
000074  60c8              STR      r0,[r1,#0xc]          ;244
000076  490f              LDR      r1,|L4.180|
000078  6820              LDR      r0,[r4,#0]            ;262
00007a  1a40              SUBS     r0,r0,r1              ;262
00007c  2114              MOVS     r1,#0x14              ;262
00007e  fbb0f0f1          UDIV     r0,r0,r1              ;262
000082  0080              LSLS     r0,r0,#2              ;262
000084  6420              STR      r0,[r4,#0x40]         ;262
000086  480b              LDR      r0,|L4.180|
000088  3808              SUBS     r0,r0,#8              ;263
00008a  63e0              STR      r0,[r4,#0x3c]         ;263
00008c  f8941040          LDRB     r1,[r4,#0x40]         ;267
000090  2001              MOVS     r0,#1                 ;267
000092  4088              LSLS     r0,r0,r1              ;267
000094  6be1              LDR      r1,[r4,#0x3c]         ;267
000096  6048              STR      r0,[r1,#4]            ;267
000098  2000              MOVS     r0,#0                 ;270
00009a  62a0              STR      r0,[r4,#0x28]         ;270
00009c  62e0              STR      r0,[r4,#0x2c]         ;271
00009e  6320              STR      r0,[r4,#0x30]         ;272
0000a0  6360              STR      r0,[r4,#0x34]         ;273
0000a2  63a0              STR      r0,[r4,#0x38]         ;276
0000a4  f8840021          STRB     r0,[r4,#0x21]         ;279
0000a8  bf00              NOP                            ;282
0000aa  f8840020          STRB     r0,[r4,#0x20]         ;282
0000ae  bf00              NOP                            ;282
0000b0  bf00              NOP                            ;284
0000b2  e7a9              B        |L4.8|
;;;286    
                          ENDP

                  |L4.180|
                          DCD      0x40020008
                  |L4.184|
0000b8  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
0000bc  72697665
0000c0  72732f53
0000c4  544d3332
0000c8  46317878
0000cc  5f48414c
0000d0  5f447269
0000d4  7665722f
0000d8  5372632f
0000dc  73746d33
0000e0  32663178
0000e4  785f6861
0000e8  6c5f646d
0000ec  612e63  
0000ef  00                DCB      0

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;831      */
;;;832    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;833    {
;;;834      return hdma->ErrorCode;
000002  6b88              LDR      r0,[r1,#0x38]
;;;835    }
000004  4770              BX       lr
;;;836    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;819      */
;;;820    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;821    {
;;;822      /* Return DMA handle state */
;;;823      return hdma->State;
000002  f8910021          LDRB     r0,[r1,#0x21]
;;;824    }
000006  4770              BX       lr
;;;825    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;602      */
;;;603    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;604    {
000002  4604              MOV      r4,r0
;;;605      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6be0              LDR      r0,[r4,#0x3c]
000006  6805              LDR      r5,[r0,#0]
;;;606      uint32_t source_it = hdma->Instance->CCR;
000008  6820              LDR      r0,[r4,#0]
00000a  6806              LDR      r6,[r0,#0]
;;;607      
;;;608      /* Half Transfer Complete Interrupt management ******************************/
;;;609      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  f8941040          LDRB     r1,[r4,#0x40]
000010  2004              MOVS     r0,#4
000012  4088              LSLS     r0,r0,r1
000014  4028              ANDS     r0,r0,r5
000016  2800              CMP      r0,#0
000018  d046              BEQ      |L7.168|
00001a  f0060004          AND      r0,r6,#4
00001e  2800              CMP      r0,#0
000020  d042              BEQ      |L7.168|
;;;610      {
;;;611        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;612        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0000020          AND      r0,r0,#0x20
00002a  b928              CBNZ     r0,|L7.56|
;;;613        {
;;;614          /* Disable the half transfer interrupt */
;;;615          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
00002c  6820              LDR      r0,[r4,#0]
00002e  6800              LDR      r0,[r0,#0]
000030  f0200004          BIC      r0,r0,#4
000034  6821              LDR      r1,[r4,#0]
000036  6008              STR      r0,[r1,#0]
                  |L7.56|
;;;616        }
;;;617        /* Clear the half transfer complete flag */
;;;618        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000038  4957              LDR      r1,|L7.408|
00003a  6820              LDR      r0,[r4,#0]
00003c  4288              CMP      r0,r1
00003e  d101              BNE      |L7.68|
000040  2004              MOVS     r0,#4
000042  e027              B        |L7.148|
                  |L7.68|
000044  4954              LDR      r1,|L7.408|
000046  3114              ADDS     r1,r1,#0x14
000048  6820              LDR      r0,[r4,#0]
00004a  4288              CMP      r0,r1
00004c  d101              BNE      |L7.82|
00004e  2040              MOVS     r0,#0x40
000050  e020              B        |L7.148|
                  |L7.82|
000052  4951              LDR      r1,|L7.408|
000054  3128              ADDS     r1,r1,#0x28
000056  6820              LDR      r0,[r4,#0]
000058  4288              CMP      r0,r1
00005a  d101              BNE      |L7.96|
00005c  1500              ASRS     r0,r0,#20
00005e  e019              B        |L7.148|
                  |L7.96|
000060  494d              LDR      r1,|L7.408|
000062  313c              ADDS     r1,r1,#0x3c
000064  6820              LDR      r0,[r4,#0]
000066  4288              CMP      r0,r1
000068  d102              BNE      |L7.112|
00006a  f44f4080          MOV      r0,#0x4000
00006e  e011              B        |L7.148|
                  |L7.112|
000070  4949              LDR      r1,|L7.408|
000072  3150              ADDS     r1,r1,#0x50
000074  6820              LDR      r0,[r4,#0]
000076  4288              CMP      r0,r1
000078  d102              BNE      |L7.128|
00007a  f44f2080          MOV      r0,#0x40000
00007e  e009              B        |L7.148|
                  |L7.128|
000080  4945              LDR      r1,|L7.408|
000082  3164              ADDS     r1,r1,#0x64
000084  6820              LDR      r0,[r4,#0]
000086  4288              CMP      r0,r1
000088  d102              BNE      |L7.144|
00008a  f44f0080          MOV      r0,#0x400000
00008e  e001              B        |L7.148|
                  |L7.144|
000090  f04f6080          MOV      r0,#0x4000000
                  |L7.148|
000094  4940              LDR      r1,|L7.408|
000096  3908              SUBS     r1,r1,#8
000098  6048              STR      r0,[r1,#4]
;;;619    
;;;620        /* DMA peripheral state is not updated in Half Transfer */
;;;621        /* but in Transfer Complete case */
;;;622    
;;;623        if(hdma->XferHalfCpltCallback != NULL)
00009a  6ae0              LDR      r0,[r4,#0x2c]
00009c  2800              CMP      r0,#0
00009e  d07a              BEQ      |L7.406|
;;;624        {
;;;625          /* Half transfer callback */
;;;626          hdma->XferHalfCpltCallback(hdma);
0000a0  4620              MOV      r0,r4
0000a2  6ae1              LDR      r1,[r4,#0x2c]
0000a4  4788              BLX      r1
0000a6  e076              B        |L7.406|
                  |L7.168|
;;;627        }
;;;628      }
;;;629    
;;;630      /* Transfer Complete Interrupt management ***********************************/
;;;631      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
0000a8  f8941040          LDRB     r1,[r4,#0x40]
0000ac  2002              MOVS     r0,#2
0000ae  4088              LSLS     r0,r0,r1
0000b0  4028              ANDS     r0,r0,r5
0000b2  b3a0              CBZ      r0,|L7.286|
0000b4  f0060002          AND      r0,r6,#2
0000b8  b388              CBZ      r0,|L7.286|
;;;632      {
;;;633        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
0000ba  6820              LDR      r0,[r4,#0]
0000bc  6800              LDR      r0,[r0,#0]
0000be  f0000020          AND      r0,r0,#0x20
0000c2  b940              CBNZ     r0,|L7.214|
;;;634        {
;;;635          /* Disable the transfer complete and error interrupt */
;;;636          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
0000c4  6820              LDR      r0,[r4,#0]
0000c6  6800              LDR      r0,[r0,#0]
0000c8  f020000a          BIC      r0,r0,#0xa
0000cc  6821              LDR      r1,[r4,#0]
0000ce  6008              STR      r0,[r1,#0]
;;;637    
;;;638          /* Change the DMA state */
;;;639          hdma->State = HAL_DMA_STATE_READY;
0000d0  2001              MOVS     r0,#1
0000d2  f8840021          STRB     r0,[r4,#0x21]
                  |L7.214|
;;;640        }
;;;641        /* Clear the transfer complete flag */
;;;642          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0000d6  4930              LDR      r1,|L7.408|
0000d8  6820              LDR      r0,[r4,#0]
0000da  4288              CMP      r0,r1
0000dc  d101              BNE      |L7.226|
0000de  2002              MOVS     r0,#2
0000e0  e028              B        |L7.308|
                  |L7.226|
0000e2  492d              LDR      r1,|L7.408|
0000e4  3114              ADDS     r1,r1,#0x14
0000e6  6820              LDR      r0,[r4,#0]
0000e8  4288              CMP      r0,r1
0000ea  d101              BNE      |L7.240|
0000ec  2020              MOVS     r0,#0x20
0000ee  e021              B        |L7.308|
                  |L7.240|
0000f0  4929              LDR      r1,|L7.408|
0000f2  3128              ADDS     r1,r1,#0x28
0000f4  6820              LDR      r0,[r4,#0]
0000f6  4288              CMP      r0,r1
0000f8  d101              BNE      |L7.254|
0000fa  1540              ASRS     r0,r0,#21
0000fc  e01a              B        |L7.308|
                  |L7.254|
0000fe  4926              LDR      r1,|L7.408|
000100  313c              ADDS     r1,r1,#0x3c
000102  6820              LDR      r0,[r4,#0]
000104  4288              CMP      r0,r1
000106  d102              BNE      |L7.270|
000108  f44f5000          MOV      r0,#0x2000
00010c  e012              B        |L7.308|
                  |L7.270|
00010e  4922              LDR      r1,|L7.408|
000110  3150              ADDS     r1,r1,#0x50
000112  6820              LDR      r0,[r4,#0]
000114  4288              CMP      r0,r1
000116  d103              BNE      |L7.288|
000118  f44f3000          MOV      r0,#0x20000
00011c  e00a              B        |L7.308|
                  |L7.286|
00011e  e017              B        |L7.336|
                  |L7.288|
000120  491d              LDR      r1,|L7.408|
000122  3164              ADDS     r1,r1,#0x64
000124  6820              LDR      r0,[r4,#0]
000126  4288              CMP      r0,r1
000128  d102              BNE      |L7.304|
00012a  f44f1000          MOV      r0,#0x200000
00012e  e001              B        |L7.308|
                  |L7.304|
000130  f04f7000          MOV      r0,#0x2000000
                  |L7.308|
000134  4918              LDR      r1,|L7.408|
000136  3908              SUBS     r1,r1,#8
000138  6048              STR      r0,[r1,#4]
;;;643    
;;;644        /* Process Unlocked */
;;;645        __HAL_UNLOCK(hdma);
00013a  bf00              NOP      
00013c  2000              MOVS     r0,#0
00013e  f8840020          STRB     r0,[r4,#0x20]
000142  bf00              NOP      
;;;646    
;;;647        if(hdma->XferCpltCallback != NULL)
000144  6aa0              LDR      r0,[r4,#0x28]
000146  b330              CBZ      r0,|L7.406|
;;;648        {
;;;649          /* Transfer complete callback */
;;;650          hdma->XferCpltCallback(hdma);
000148  4620              MOV      r0,r4
00014a  6aa1              LDR      r1,[r4,#0x28]
00014c  4788              BLX      r1
00014e  e022              B        |L7.406|
                  |L7.336|
;;;651        }
;;;652      }
;;;653    
;;;654      /* Transfer Error Interrupt management **************************************/
;;;655      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
000150  f8941040          LDRB     r1,[r4,#0x40]
000154  2008              MOVS     r0,#8
000156  4088              LSLS     r0,r0,r1
000158  4028              ANDS     r0,r0,r5
00015a  b1e0              CBZ      r0,|L7.406|
00015c  f0060008          AND      r0,r6,#8
000160  b1c8              CBZ      r0,|L7.406|
;;;656      {
;;;657        /* When a DMA transfer error occurs */
;;;658        /* A hardware clear of its EN bits is performed */
;;;659        /* Disable ALL DMA IT */
;;;660        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000162  6820              LDR      r0,[r4,#0]
000164  6800              LDR      r0,[r0,#0]
000166  f020000e          BIC      r0,r0,#0xe
00016a  6821              LDR      r1,[r4,#0]
00016c  6008              STR      r0,[r1,#0]
;;;661    
;;;662        /* Clear all flags */
;;;663        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
00016e  f8941040          LDRB     r1,[r4,#0x40]
000172  2001              MOVS     r0,#1
000174  4088              LSLS     r0,r0,r1
000176  6be1              LDR      r1,[r4,#0x3c]
000178  6048              STR      r0,[r1,#4]
;;;664    
;;;665        /* Update error code */
;;;666        hdma->ErrorCode = HAL_DMA_ERROR_TE;
00017a  2001              MOVS     r0,#1
00017c  63a0              STR      r0,[r4,#0x38]
;;;667    
;;;668        /* Change the DMA state */
;;;669        hdma->State = HAL_DMA_STATE_READY;
00017e  f8840021          STRB     r0,[r4,#0x21]
;;;670    
;;;671        /* Process Unlocked */
;;;672        __HAL_UNLOCK(hdma);
000182  bf00              NOP      
000184  2000              MOVS     r0,#0
000186  f8840020          STRB     r0,[r4,#0x20]
00018a  bf00              NOP      
;;;673    
;;;674        if (hdma->XferErrorCallback != NULL)
00018c  6b20              LDR      r0,[r4,#0x30]
00018e  b110              CBZ      r0,|L7.406|
;;;675        {
;;;676          /* Transfer error callback */
;;;677          hdma->XferErrorCallback(hdma);
000190  4620              MOV      r0,r4
000192  6b21              LDR      r1,[r4,#0x30]
000194  4788              BLX      r1
                  |L7.406|
;;;678        }
;;;679      }
;;;680      return;
;;;681    }
000196  bd70              POP      {r4-r6,pc}
;;;682    
                          ENDP

                  |L7.408|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145      uint32_t tmp = 0U;
000004  2500              MOVS     r5,#0
;;;146    
;;;147      /* Check the DMA handle allocation */
;;;148      if(hdma == NULL)
000006  b90c              CBNZ     r4,|L8.12|
;;;149      {
;;;150        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L8.10|
;;;151      }
;;;152    
;;;153      /* Check the parameters */
;;;154      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;155      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;156      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;157      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;158      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;159      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;160      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;161      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;162    
;;;163    #if defined (DMA2)
;;;164      /* calculation of the channel index */
;;;165      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;166      {
;;;167        /* DMA1 */
;;;168        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;169        hdma->DmaBaseAddress = DMA1;
;;;170      }
;;;171      else 
;;;172      {
;;;173        /* DMA2 */
;;;174        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;175        hdma->DmaBaseAddress = DMA2;
;;;176      }
;;;177    #else
;;;178      /* DMA1 */
;;;179      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;180      hdma->DmaBaseAddress = DMA1;
;;;181    #endif /* DMA2 */
;;;182    
;;;183      /* Change DMA peripheral state */
;;;184      hdma->State = HAL_DMA_STATE_BUSY;
;;;185    
;;;186      /* Get the CR register value */
;;;187      tmp = hdma->Instance->CCR;
;;;188    
;;;189      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;190      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
;;;191                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;192                          DMA_CCR_DIR));
;;;193    
;;;194      /* Prepare the DMA Channel configuration */
;;;195      tmp |=  hdma->Init.Direction        |
;;;196              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;197              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;198              hdma->Init.Mode                | hdma->Init.Priority;
;;;199    
;;;200      /* Write to DMA Channel CR register */
;;;201      hdma->Instance->CCR = tmp;
;;;202    
;;;203      /* Initialise the error code */
;;;204      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;205    
;;;206      /* Initialize the DMA state*/
;;;207      hdma->State = HAL_DMA_STATE_READY;
;;;208      /* Allocate lock resource and initialize it */
;;;209      hdma->Lock = HAL_UNLOCKED;
;;;210    
;;;211      return HAL_OK;
;;;212    }
00000a  bd70              POP      {r4-r6,pc}
                  |L8.12|
00000c  4958              LDR      r1,|L8.368|
00000e  6820              LDR      r0,[r4,#0]            ;154
000010  4288              CMP      r0,r1                 ;154
000012  d01d              BEQ      |L8.80|
000014  4956              LDR      r1,|L8.368|
000016  3114              ADDS     r1,r1,#0x14           ;154
000018  6820              LDR      r0,[r4,#0]            ;154
00001a  4288              CMP      r0,r1                 ;154
00001c  d018              BEQ      |L8.80|
00001e  4954              LDR      r1,|L8.368|
000020  3128              ADDS     r1,r1,#0x28           ;154
000022  6820              LDR      r0,[r4,#0]            ;154
000024  4288              CMP      r0,r1                 ;154
000026  d013              BEQ      |L8.80|
000028  4951              LDR      r1,|L8.368|
00002a  313c              ADDS     r1,r1,#0x3c           ;154
00002c  6820              LDR      r0,[r4,#0]            ;154
00002e  4288              CMP      r0,r1                 ;154
000030  d00e              BEQ      |L8.80|
000032  494f              LDR      r1,|L8.368|
000034  3150              ADDS     r1,r1,#0x50           ;154
000036  6820              LDR      r0,[r4,#0]            ;154
000038  4288              CMP      r0,r1                 ;154
00003a  d009              BEQ      |L8.80|
00003c  494c              LDR      r1,|L8.368|
00003e  3164              ADDS     r1,r1,#0x64           ;154
000040  6820              LDR      r0,[r4,#0]            ;154
000042  4288              CMP      r0,r1                 ;154
000044  d004              BEQ      |L8.80|
000046  494a              LDR      r1,|L8.368|
000048  3178              ADDS     r1,r1,#0x78           ;154
00004a  6820              LDR      r0,[r4,#0]            ;154
00004c  4288              CMP      r0,r1                 ;154
00004e  d100              BNE      |L8.82|
                  |L8.80|
000050  e003              B        |L8.90|
                  |L8.82|
000052  219a              MOVS     r1,#0x9a              ;154
000054  a047              ADR      r0,|L8.372|
000056  f7fffffe          BL       assert_failed
                  |L8.90|
00005a  6860              LDR      r0,[r4,#4]            ;155
00005c  b130              CBZ      r0,|L8.108|
00005e  6860              LDR      r0,[r4,#4]            ;155
000060  2810              CMP      r0,#0x10              ;155
000062  d003              BEQ      |L8.108|
000064  6860              LDR      r0,[r4,#4]            ;155
000066  f5b04f80          CMP      r0,#0x4000            ;155
00006a  d100              BNE      |L8.110|
                  |L8.108|
00006c  e003              B        |L8.118|
                  |L8.110|
00006e  219b              MOVS     r1,#0x9b              ;155
000070  a040              ADR      r0,|L8.372|
000072  f7fffffe          BL       assert_failed
                  |L8.118|
000076  68a0              LDR      r0,[r4,#8]            ;156
000078  2840              CMP      r0,#0x40              ;156
00007a  d001              BEQ      |L8.128|
00007c  68a0              LDR      r0,[r4,#8]            ;156
00007e  b900              CBNZ     r0,|L8.130|
                  |L8.128|
000080  e003              B        |L8.138|
                  |L8.130|
000082  219c              MOVS     r1,#0x9c              ;156
000084  a03b              ADR      r0,|L8.372|
000086  f7fffffe          BL       assert_failed
                  |L8.138|
00008a  68e0              LDR      r0,[r4,#0xc]          ;157
00008c  2880              CMP      r0,#0x80              ;157
00008e  d001              BEQ      |L8.148|
000090  68e0              LDR      r0,[r4,#0xc]          ;157
000092  b900              CBNZ     r0,|L8.150|
                  |L8.148|
000094  e003              B        |L8.158|
                  |L8.150|
000096  219d              MOVS     r1,#0x9d              ;157
000098  a036              ADR      r0,|L8.372|
00009a  f7fffffe          BL       assert_failed
                  |L8.158|
00009e  6920              LDR      r0,[r4,#0x10]         ;158
0000a0  b138              CBZ      r0,|L8.178|
0000a2  6920              LDR      r0,[r4,#0x10]         ;158
0000a4  f5b07f80          CMP      r0,#0x100             ;158
0000a8  d003              BEQ      |L8.178|
0000aa  6920              LDR      r0,[r4,#0x10]         ;158
0000ac  f5b07f00          CMP      r0,#0x200             ;158
0000b0  d100              BNE      |L8.180|
                  |L8.178|
0000b2  e003              B        |L8.188|
                  |L8.180|
0000b4  219e              MOVS     r1,#0x9e              ;158
0000b6  a02f              ADR      r0,|L8.372|
0000b8  f7fffffe          BL       assert_failed
                  |L8.188|
0000bc  6960              LDR      r0,[r4,#0x14]         ;159
0000be  b138              CBZ      r0,|L8.208|
0000c0  6960              LDR      r0,[r4,#0x14]         ;159
0000c2  f5b06f80          CMP      r0,#0x400             ;159
0000c6  d003              BEQ      |L8.208|
0000c8  6960              LDR      r0,[r4,#0x14]         ;159
0000ca  f5b06f00          CMP      r0,#0x800             ;159
0000ce  d100              BNE      |L8.210|
                  |L8.208|
0000d0  e003              B        |L8.218|
                  |L8.210|
0000d2  219f              MOVS     r1,#0x9f              ;159
0000d4  a027              ADR      r0,|L8.372|
0000d6  f7fffffe          BL       assert_failed
                  |L8.218|
0000da  69a0              LDR      r0,[r4,#0x18]         ;160
0000dc  b110              CBZ      r0,|L8.228|
0000de  69a0              LDR      r0,[r4,#0x18]         ;160
0000e0  2820              CMP      r0,#0x20              ;160
0000e2  d100              BNE      |L8.230|
                  |L8.228|
0000e4  e003              B        |L8.238|
                  |L8.230|
0000e6  21a0              MOVS     r1,#0xa0              ;160
0000e8  a022              ADR      r0,|L8.372|
0000ea  f7fffffe          BL       assert_failed
                  |L8.238|
0000ee  69e0              LDR      r0,[r4,#0x1c]         ;161
0000f0  b158              CBZ      r0,|L8.266|
0000f2  69e0              LDR      r0,[r4,#0x1c]         ;161
0000f4  f5b05f80          CMP      r0,#0x1000            ;161
0000f8  d007              BEQ      |L8.266|
0000fa  69e0              LDR      r0,[r4,#0x1c]         ;161
0000fc  f5b05f00          CMP      r0,#0x2000            ;161
000100  d003              BEQ      |L8.266|
000102  69e0              LDR      r0,[r4,#0x1c]         ;161
000104  f5b05f40          CMP      r0,#0x3000            ;161
000108  d100              BNE      |L8.268|
                  |L8.266|
00010a  e003              B        |L8.276|
                  |L8.268|
00010c  21a1              MOVS     r1,#0xa1              ;161
00010e  a019              ADR      r0,|L8.372|
000110  f7fffffe          BL       assert_failed
                  |L8.276|
000114  4916              LDR      r1,|L8.368|
000116  6820              LDR      r0,[r4,#0]            ;179
000118  1a40              SUBS     r0,r0,r1              ;179
00011a  2114              MOVS     r1,#0x14              ;179
00011c  fbb0f0f1          UDIV     r0,r0,r1              ;179
000120  0080              LSLS     r0,r0,#2              ;179
000122  6420              STR      r0,[r4,#0x40]         ;179
000124  4812              LDR      r0,|L8.368|
000126  3808              SUBS     r0,r0,#8              ;180
000128  63e0              STR      r0,[r4,#0x3c]         ;180
00012a  2002              MOVS     r0,#2                 ;184
00012c  f8840021          STRB     r0,[r4,#0x21]         ;184
000130  6820              LDR      r0,[r4,#0]            ;187
000132  6805              LDR      r5,[r0,#0]            ;187
000134  f64370f0          MOV      r0,#0x3ff0            ;190
000138  4385              BICS     r5,r5,r0              ;190
00013a  e9d40101          LDRD     r0,r1,[r4,#4]         ;195
00013e  4308              ORRS     r0,r0,r1              ;195
000140  68e1              LDR      r1,[r4,#0xc]          ;195
000142  4308              ORRS     r0,r0,r1              ;195
000144  6921              LDR      r1,[r4,#0x10]         ;195
000146  4308              ORRS     r0,r0,r1              ;195
000148  6961              LDR      r1,[r4,#0x14]         ;195
00014a  4308              ORRS     r0,r0,r1              ;195
00014c  69a1              LDR      r1,[r4,#0x18]         ;195
00014e  4308              ORRS     r0,r0,r1              ;195
000150  69e1              LDR      r1,[r4,#0x1c]         ;195
000152  4308              ORRS     r0,r0,r1              ;195
000154  4305              ORRS     r5,r5,r0              ;195
000156  6820              LDR      r0,[r4,#0]            ;201
000158  6005              STR      r5,[r0,#0]            ;201
00015a  2000              MOVS     r0,#0                 ;204
00015c  63a0              STR      r0,[r4,#0x38]         ;204
00015e  2001              MOVS     r0,#1                 ;207
000160  f8840021          STRB     r0,[r4,#0x21]         ;207
000164  2000              MOVS     r0,#0                 ;209
000166  f8840020          STRB     r0,[r4,#0x20]         ;209
00016a  bf00              NOP                            ;211
00016c  e74d              B        |L8.10|
;;;213    
                          ENDP

00016e  0000              DCW      0x0000
                  |L8.368|
                          DCD      0x40020008
                  |L8.372|
000174  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
000178  72697665
00017c  72732f53
000180  544d3332
000184  46317878
000188  5f48414c
00018c  5f447269
000190  7665722f
000194  5372632f
000198  73746d33
00019c  32663178
0001a0  785f6861
0001a4  6c5f646d
0001a8  612e63  
0001ab  00                DCB      0

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;501      */
;;;502    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;503    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;504      uint32_t temp;
;;;505      uint32_t tickstart = 0U;
00000a  f04f0800          MOV      r8,#0
;;;506    
;;;507      if(HAL_DMA_STATE_BUSY != hdma->State)
00000e  f8940021          LDRB     r0,[r4,#0x21]
000012  2802              CMP      r0,#2
000014  d009              BEQ      |L9.42|
;;;508      {
;;;509        /* no transfer ongoing */
;;;510        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000016  2004              MOVS     r0,#4
000018  63a0              STR      r0,[r4,#0x38]
;;;511        __HAL_UNLOCK(hdma);
00001a  bf00              NOP      
00001c  2000              MOVS     r0,#0
00001e  f8840020          STRB     r0,[r4,#0x20]
000022  bf00              NOP      
;;;512        return HAL_ERROR;
000024  2001              MOVS     r0,#1
                  |L9.38|
;;;513      }
;;;514    
;;;515      /* Polling mode not supported in circular mode */
;;;516      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;517      {
;;;518        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;519        return HAL_ERROR;
;;;520      }
;;;521      
;;;522      /* Get the level transfer complete flag */
;;;523      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;524      {
;;;525        /* Transfer Complete flag */
;;;526        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
;;;527      }
;;;528      else
;;;529      {
;;;530        /* Half Transfer Complete flag */
;;;531        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
;;;532      }
;;;533    
;;;534      /* Get tick */
;;;535      tickstart = HAL_GetTick();
;;;536    
;;;537      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;538      {
;;;539        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
;;;540        {
;;;541          /* When a DMA transfer error occurs */
;;;542          /* A hardware clear of its EN bits is performed */
;;;543          /* Clear all flags */
;;;544          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;545    
;;;546          /* Update error code */
;;;547          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
;;;548    
;;;549          /* Change the DMA state */
;;;550          hdma->State= HAL_DMA_STATE_READY;
;;;551    
;;;552          /* Process Unlocked */
;;;553          __HAL_UNLOCK(hdma);
;;;554    
;;;555          return HAL_ERROR;
;;;556        }
;;;557        /* Check for the Timeout */
;;;558        if(Timeout != HAL_MAX_DELAY)
;;;559        {
;;;560          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;561          {
;;;562            /* Update error code */
;;;563            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;564    
;;;565            /* Change the DMA state */
;;;566            hdma->State = HAL_DMA_STATE_READY;
;;;567    
;;;568            /* Process Unlocked */
;;;569            __HAL_UNLOCK(hdma);
;;;570    
;;;571            return HAL_ERROR;
;;;572          }
;;;573        }
;;;574      }
;;;575    
;;;576      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;577      {
;;;578        /* Clear the transfer complete flag */
;;;579        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;580    
;;;581        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;582        all transfers are complete) */
;;;583        hdma->State = HAL_DMA_STATE_READY;
;;;584      }
;;;585      else
;;;586      {
;;;587        /* Clear the half transfer complete flag */
;;;588        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;589      }
;;;590      
;;;591      /* Process unlocked */
;;;592      __HAL_UNLOCK(hdma);
;;;593    
;;;594      return HAL_OK;
;;;595    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L9.42|
00002a  6820              LDR      r0,[r4,#0]            ;516
00002c  6800              LDR      r0,[r0,#0]            ;516
00002e  f0000020          AND      r0,r0,#0x20           ;516
000032  b120              CBZ      r0,|L9.62|
000034  f44f7080          MOV      r0,#0x100             ;518
000038  63a0              STR      r0,[r4,#0x38]         ;518
00003a  2001              MOVS     r0,#1                 ;519
00003c  e7f3              B        |L9.38|
                  |L9.62|
00003e  bb7e              CBNZ     r6,|L9.160|
000040  499b              LDR      r1,|L9.688|
000042  6820              LDR      r0,[r4,#0]            ;526
000044  4288              CMP      r0,r1                 ;526
000046  d101              BNE      |L9.76|
000048  2002              MOVS     r0,#2                 ;526
00004a  e027              B        |L9.156|
                  |L9.76|
00004c  4998              LDR      r1,|L9.688|
00004e  3114              ADDS     r1,r1,#0x14           ;526
000050  6820              LDR      r0,[r4,#0]            ;526
000052  4288              CMP      r0,r1                 ;526
000054  d101              BNE      |L9.90|
000056  2020              MOVS     r0,#0x20              ;526
000058  e020              B        |L9.156|
                  |L9.90|
00005a  4995              LDR      r1,|L9.688|
00005c  3128              ADDS     r1,r1,#0x28           ;526
00005e  6820              LDR      r0,[r4,#0]            ;526
000060  4288              CMP      r0,r1                 ;526
000062  d101              BNE      |L9.104|
000064  1540              ASRS     r0,r0,#21             ;526
000066  e019              B        |L9.156|
                  |L9.104|
000068  4991              LDR      r1,|L9.688|
00006a  313c              ADDS     r1,r1,#0x3c           ;526
00006c  6820              LDR      r0,[r4,#0]            ;526
00006e  4288              CMP      r0,r1                 ;526
000070  d102              BNE      |L9.120|
000072  f44f5000          MOV      r0,#0x2000            ;526
000076  e011              B        |L9.156|
                  |L9.120|
000078  498d              LDR      r1,|L9.688|
00007a  3150              ADDS     r1,r1,#0x50           ;526
00007c  6820              LDR      r0,[r4,#0]            ;526
00007e  4288              CMP      r0,r1                 ;526
000080  d102              BNE      |L9.136|
000082  f44f3000          MOV      r0,#0x20000           ;526
000086  e009              B        |L9.156|
                  |L9.136|
000088  4989              LDR      r1,|L9.688|
00008a  3164              ADDS     r1,r1,#0x64           ;526
00008c  6820              LDR      r0,[r4,#0]            ;526
00008e  4288              CMP      r0,r1                 ;526
000090  d102              BNE      |L9.152|
000092  f44f1000          MOV      r0,#0x200000          ;526
000096  e001              B        |L9.156|
                  |L9.152|
000098  f04f7000          MOV      r0,#0x2000000         ;526
                  |L9.156|
00009c  4607              MOV      r7,r0                 ;526
00009e  e02f              B        |L9.256|
                  |L9.160|
0000a0  e7ff              B        |L9.162|
                  |L9.162|
0000a2  4983              LDR      r1,|L9.688|
0000a4  6820              LDR      r0,[r4,#0]            ;531
0000a6  4288              CMP      r0,r1                 ;531
0000a8  d101              BNE      |L9.174|
0000aa  2004              MOVS     r0,#4                 ;531
0000ac  e027              B        |L9.254|
                  |L9.174|
0000ae  4980              LDR      r1,|L9.688|
0000b0  3114              ADDS     r1,r1,#0x14           ;531
0000b2  6820              LDR      r0,[r4,#0]            ;531
0000b4  4288              CMP      r0,r1                 ;531
0000b6  d101              BNE      |L9.188|
0000b8  2040              MOVS     r0,#0x40              ;531
0000ba  e020              B        |L9.254|
                  |L9.188|
0000bc  497c              LDR      r1,|L9.688|
0000be  3128              ADDS     r1,r1,#0x28           ;531
0000c0  6820              LDR      r0,[r4,#0]            ;531
0000c2  4288              CMP      r0,r1                 ;531
0000c4  d101              BNE      |L9.202|
0000c6  1500              ASRS     r0,r0,#20             ;531
0000c8  e019              B        |L9.254|
                  |L9.202|
0000ca  4979              LDR      r1,|L9.688|
0000cc  313c              ADDS     r1,r1,#0x3c           ;531
0000ce  6820              LDR      r0,[r4,#0]            ;531
0000d0  4288              CMP      r0,r1                 ;531
0000d2  d102              BNE      |L9.218|
0000d4  f44f4080          MOV      r0,#0x4000            ;531
0000d8  e011              B        |L9.254|
                  |L9.218|
0000da  4975              LDR      r1,|L9.688|
0000dc  3150              ADDS     r1,r1,#0x50           ;531
0000de  6820              LDR      r0,[r4,#0]            ;531
0000e0  4288              CMP      r0,r1                 ;531
0000e2  d102              BNE      |L9.234|
0000e4  f44f2080          MOV      r0,#0x40000           ;531
0000e8  e009              B        |L9.254|
                  |L9.234|
0000ea  4971              LDR      r1,|L9.688|
0000ec  3164              ADDS     r1,r1,#0x64           ;531
0000ee  6820              LDR      r0,[r4,#0]            ;531
0000f0  4288              CMP      r0,r1                 ;531
0000f2  d102              BNE      |L9.250|
0000f4  f44f0080          MOV      r0,#0x400000          ;531
0000f8  e001              B        |L9.254|
                  |L9.250|
0000fa  f04f6080          MOV      r0,#0x4000000         ;531
                  |L9.254|
0000fe  4607              MOV      r7,r0                 ;531
                  |L9.256|
000100  f7fffffe          BL       HAL_GetTick
000104  4680              MOV      r8,r0                 ;535
000106  e05d              B        |L9.452|
                  |L9.264|
000108  4869              LDR      r0,|L9.688|
00010a  3808              SUBS     r0,r0,#8              ;539
00010c  6800              LDR      r0,[r0,#0]            ;539
00010e  4a68              LDR      r2,|L9.688|
000110  6821              LDR      r1,[r4,#0]            ;539
000112  4291              CMP      r1,r2                 ;539
000114  d101              BNE      |L9.282|
000116  2108              MOVS     r1,#8                 ;539
000118  e027              B        |L9.362|
                  |L9.282|
00011a  4a65              LDR      r2,|L9.688|
00011c  3214              ADDS     r2,r2,#0x14           ;539
00011e  6821              LDR      r1,[r4,#0]            ;539
000120  4291              CMP      r1,r2                 ;539
000122  d101              BNE      |L9.296|
000124  2180              MOVS     r1,#0x80              ;539
000126  e020              B        |L9.362|
                  |L9.296|
000128  4a61              LDR      r2,|L9.688|
00012a  3228              ADDS     r2,r2,#0x28           ;539
00012c  6821              LDR      r1,[r4,#0]            ;539
00012e  4291              CMP      r1,r2                 ;539
000130  d101              BNE      |L9.310|
000132  14c9              ASRS     r1,r1,#19             ;539
000134  e019              B        |L9.362|
                  |L9.310|
000136  4a5e              LDR      r2,|L9.688|
000138  323c              ADDS     r2,r2,#0x3c           ;539
00013a  6821              LDR      r1,[r4,#0]            ;539
00013c  4291              CMP      r1,r2                 ;539
00013e  d102              BNE      |L9.326|
000140  f44f4100          MOV      r1,#0x8000            ;539
000144  e011              B        |L9.362|
                  |L9.326|
000146  4a5a              LDR      r2,|L9.688|
000148  3250              ADDS     r2,r2,#0x50           ;539
00014a  6821              LDR      r1,[r4,#0]            ;539
00014c  4291              CMP      r1,r2                 ;539
00014e  d102              BNE      |L9.342|
000150  f44f2100          MOV      r1,#0x80000           ;539
000154  e009              B        |L9.362|
                  |L9.342|
000156  4a56              LDR      r2,|L9.688|
000158  3264              ADDS     r2,r2,#0x64           ;539
00015a  6821              LDR      r1,[r4,#0]            ;539
00015c  4291              CMP      r1,r2                 ;539
00015e  d102              BNE      |L9.358|
000160  f44f0100          MOV      r1,#0x800000          ;539
000164  e001              B        |L9.362|
                  |L9.358|
000166  f04f6100          MOV      r1,#0x8000000         ;539
                  |L9.362|
00016a  4008              ANDS     r0,r0,r1              ;539
00016c  b198              CBZ      r0,|L9.406|
00016e  f8941040          LDRB     r1,[r4,#0x40]         ;544
000172  2001              MOVS     r0,#1                 ;544
000174  4088              LSLS     r0,r0,r1              ;544
000176  6be1              LDR      r1,[r4,#0x3c]         ;544
000178  6048              STR      r0,[r1,#4]            ;544
00017a  6ba0              LDR      r0,[r4,#0x38]         ;547
00017c  f0400001          ORR      r0,r0,#1              ;547
000180  63a0              STR      r0,[r4,#0x38]         ;547
000182  2001              MOVS     r0,#1                 ;550
000184  f8840021          STRB     r0,[r4,#0x21]         ;550
000188  bf00              NOP                            ;553
00018a  2000              MOVS     r0,#0                 ;553
00018c  f8840020          STRB     r0,[r4,#0x20]         ;553
000190  bf00              NOP                            ;553
000192  2001              MOVS     r0,#1                 ;555
000194  e747              B        |L9.38|
                  |L9.406|
000196  1c68              ADDS     r0,r5,#1              ;558
000198  b1a0              CBZ      r0,|L9.452|
00019a  b12d              CBZ      r5,|L9.424|
00019c  f7fffffe          BL       HAL_GetTick
0001a0  eba00008          SUB      r0,r0,r8              ;560
0001a4  42a8              CMP      r0,r5                 ;560
0001a6  d90d              BLS      |L9.452|
                  |L9.424|
0001a8  6ba0              LDR      r0,[r4,#0x38]         ;563
0001aa  f0400020          ORR      r0,r0,#0x20           ;563
0001ae  63a0              STR      r0,[r4,#0x38]         ;563
0001b0  2001              MOVS     r0,#1                 ;566
0001b2  f8840021          STRB     r0,[r4,#0x21]         ;566
0001b6  bf00              NOP                            ;569
0001b8  2000              MOVS     r0,#0                 ;569
0001ba  f8840020          STRB     r0,[r4,#0x20]         ;569
0001be  bf00              NOP                            ;569
0001c0  2001              MOVS     r0,#1                 ;571
0001c2  e730              B        |L9.38|
                  |L9.452|
0001c4  483a              LDR      r0,|L9.688|
0001c6  3808              SUBS     r0,r0,#8              ;537
0001c8  6800              LDR      r0,[r0,#0]            ;537
0001ca  4038              ANDS     r0,r0,r7              ;537
0001cc  2800              CMP      r0,#0                 ;537
0001ce  d09b              BEQ      |L9.264|
0001d0  bba6              CBNZ     r6,|L9.572|
0001d2  4937              LDR      r1,|L9.688|
0001d4  6820              LDR      r0,[r4,#0]            ;579
0001d6  4288              CMP      r0,r1                 ;579
0001d8  d101              BNE      |L9.478|
0001da  2002              MOVS     r0,#2                 ;579
0001dc  e027              B        |L9.558|
                  |L9.478|
0001de  4934              LDR      r1,|L9.688|
0001e0  3114              ADDS     r1,r1,#0x14           ;579
0001e2  6820              LDR      r0,[r4,#0]            ;579
0001e4  4288              CMP      r0,r1                 ;579
0001e6  d101              BNE      |L9.492|
0001e8  2020              MOVS     r0,#0x20              ;579
0001ea  e020              B        |L9.558|
                  |L9.492|
0001ec  4930              LDR      r1,|L9.688|
0001ee  3128              ADDS     r1,r1,#0x28           ;579
0001f0  6820              LDR      r0,[r4,#0]            ;579
0001f2  4288              CMP      r0,r1                 ;579
0001f4  d101              BNE      |L9.506|
0001f6  1540              ASRS     r0,r0,#21             ;579
0001f8  e019              B        |L9.558|
                  |L9.506|
0001fa  492d              LDR      r1,|L9.688|
0001fc  313c              ADDS     r1,r1,#0x3c           ;579
0001fe  6820              LDR      r0,[r4,#0]            ;579
000200  4288              CMP      r0,r1                 ;579
000202  d102              BNE      |L9.522|
000204  f44f5000          MOV      r0,#0x2000            ;579
000208  e011              B        |L9.558|
                  |L9.522|
00020a  4929              LDR      r1,|L9.688|
00020c  3150              ADDS     r1,r1,#0x50           ;579
00020e  6820              LDR      r0,[r4,#0]            ;579
000210  4288              CMP      r0,r1                 ;579
000212  d102              BNE      |L9.538|
000214  f44f3000          MOV      r0,#0x20000           ;579
000218  e009              B        |L9.558|
                  |L9.538|
00021a  4925              LDR      r1,|L9.688|
00021c  3164              ADDS     r1,r1,#0x64           ;579
00021e  6820              LDR      r0,[r4,#0]            ;579
000220  4288              CMP      r0,r1                 ;579
000222  d102              BNE      |L9.554|
000224  f44f1000          MOV      r0,#0x200000          ;579
000228  e001              B        |L9.558|
                  |L9.554|
00022a  f04f7000          MOV      r0,#0x2000000         ;579
                  |L9.558|
00022e  4920              LDR      r1,|L9.688|
000230  3908              SUBS     r1,r1,#8              ;579
000232  6048              STR      r0,[r1,#4]            ;579
000234  2001              MOVS     r0,#1                 ;583
000236  f8840021          STRB     r0,[r4,#0x21]         ;583
00023a  e031              B        |L9.672|
                  |L9.572|
00023c  e7ff              B        |L9.574|
                  |L9.574|
00023e  491c              LDR      r1,|L9.688|
000240  6820              LDR      r0,[r4,#0]            ;588
000242  4288              CMP      r0,r1                 ;588
000244  d101              BNE      |L9.586|
000246  2004              MOVS     r0,#4                 ;588
000248  e027              B        |L9.666|
                  |L9.586|
00024a  4919              LDR      r1,|L9.688|
00024c  3114              ADDS     r1,r1,#0x14           ;588
00024e  6820              LDR      r0,[r4,#0]            ;588
000250  4288              CMP      r0,r1                 ;588
000252  d101              BNE      |L9.600|
000254  2040              MOVS     r0,#0x40              ;588
000256  e020              B        |L9.666|
                  |L9.600|
000258  4915              LDR      r1,|L9.688|
00025a  3128              ADDS     r1,r1,#0x28           ;588
00025c  6820              LDR      r0,[r4,#0]            ;588
00025e  4288              CMP      r0,r1                 ;588
000260  d101              BNE      |L9.614|
000262  1500              ASRS     r0,r0,#20             ;588
000264  e019              B        |L9.666|
                  |L9.614|
000266  4912              LDR      r1,|L9.688|
000268  313c              ADDS     r1,r1,#0x3c           ;588
00026a  6820              LDR      r0,[r4,#0]            ;588
00026c  4288              CMP      r0,r1                 ;588
00026e  d102              BNE      |L9.630|
000270  f44f4080          MOV      r0,#0x4000            ;588
000274  e011              B        |L9.666|
                  |L9.630|
000276  490e              LDR      r1,|L9.688|
000278  3150              ADDS     r1,r1,#0x50           ;588
00027a  6820              LDR      r0,[r4,#0]            ;588
00027c  4288              CMP      r0,r1                 ;588
00027e  d102              BNE      |L9.646|
000280  f44f2080          MOV      r0,#0x40000           ;588
000284  e009              B        |L9.666|
                  |L9.646|
000286  490a              LDR      r1,|L9.688|
000288  3164              ADDS     r1,r1,#0x64           ;588
00028a  6820              LDR      r0,[r4,#0]            ;588
00028c  4288              CMP      r0,r1                 ;588
00028e  d102              BNE      |L9.662|
000290  f44f0080          MOV      r0,#0x400000          ;588
000294  e001              B        |L9.666|
                  |L9.662|
000296  f04f6080          MOV      r0,#0x4000000         ;588
                  |L9.666|
00029a  4905              LDR      r1,|L9.688|
00029c  3908              SUBS     r1,r1,#8              ;588
00029e  6048              STR      r0,[r1,#4]            ;588
                  |L9.672|
0002a0  bf00              NOP                            ;592
0002a2  2000              MOVS     r0,#0                 ;592
0002a4  f8840020          STRB     r0,[r4,#0x20]         ;592
0002a8  bf00              NOP                            ;592
0002aa  bf00              NOP                            ;594
0002ac  e6bb              B        |L9.38|
;;;596    
                          ENDP

0002ae  0000              DCW      0x0000
                  |L9.688|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;692      */                          
;;;693    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;694    {
000002  4603              MOV      r3,r0
;;;695      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;696      
;;;697      /* Process locked */
;;;698      __HAL_LOCK(hdma);
000006  bf00              NOP      
000008  f8930020          LDRB     r0,[r3,#0x20]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L10.20|
000010  2002              MOVS     r0,#2
                  |L10.18|
;;;699      
;;;700      if(HAL_DMA_STATE_READY == hdma->State)
;;;701      {
;;;702        switch (CallbackID)
;;;703        {
;;;704        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;705          hdma->XferCpltCallback = pCallback;
;;;706          break;
;;;707          
;;;708        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;709          hdma->XferHalfCpltCallback = pCallback;
;;;710          break;         
;;;711    
;;;712        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;713          hdma->XferErrorCallback = pCallback;
;;;714          break;         
;;;715          
;;;716        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;717          hdma->XferAbortCallback = pCallback;
;;;718          break; 
;;;719          
;;;720        default:
;;;721          status = HAL_ERROR;
;;;722          break;                                                            
;;;723        }
;;;724      }
;;;725      else
;;;726      {
;;;727        status = HAL_ERROR;
;;;728      } 
;;;729      
;;;730      /* Release Lock */
;;;731      __HAL_UNLOCK(hdma);
;;;732      
;;;733      return status;
;;;734    }
000012  bd10              POP      {r4,pc}
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;698
000016  f8830020          STRB     r0,[r3,#0x20]         ;698
00001a  bf00              NOP                            ;698
00001c  f8930021          LDRB     r0,[r3,#0x21]         ;700
000020  2801              CMP      r0,#1                 ;700
000022  d112              BNE      |L10.74|
000024  b131              CBZ      r1,|L10.52|
000026  2901              CMP      r1,#1                 ;702
000028  d006              BEQ      |L10.56|
00002a  2902              CMP      r1,#2                 ;702
00002c  d006              BEQ      |L10.60|
00002e  2903              CMP      r1,#3                 ;702
000030  d108              BNE      |L10.68|
000032  e005              B        |L10.64|
                  |L10.52|
000034  629a              STR      r2,[r3,#0x28]         ;705
000036  e007              B        |L10.72|
                  |L10.56|
000038  62da              STR      r2,[r3,#0x2c]         ;709
00003a  e005              B        |L10.72|
                  |L10.60|
00003c  631a              STR      r2,[r3,#0x30]         ;713
00003e  e003              B        |L10.72|
                  |L10.64|
000040  635a              STR      r2,[r3,#0x34]         ;717
000042  e001              B        |L10.72|
                  |L10.68|
000044  2401              MOVS     r4,#1                 ;721
000046  bf00              NOP                            ;722
                  |L10.72|
000048  e000              B        |L10.76|
                  |L10.74|
00004a  2401              MOVS     r4,#1                 ;727
                  |L10.76|
00004c  bf00              NOP                            ;731
00004e  2000              MOVS     r0,#0                 ;731
000050  f8830020          STRB     r0,[r3,#0x20]         ;731
000054  bf00              NOP                            ;731
000056  4620              MOV      r0,r4                 ;733
000058  e7db              B        |L10.18|
;;;735    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Start PROC
;;;318      */
;;;319    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;320    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;321      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;322    
;;;323      /* Check the parameters */
;;;324      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
000010  b11d              CBZ      r5,|L11.26|
000012  f5b53f80          CMP      r5,#0x10000
000016  d200              BCS      |L11.26|
000018  e004              B        |L11.36|
                  |L11.26|
00001a  f44f71a2          MOV      r1,#0x144
00001e  a01a              ADR      r0,|L11.136|
000020  f7fffffe          BL       assert_failed
                  |L11.36|
;;;325    
;;;326      /* Process locked */
;;;327      __HAL_LOCK(hdma);
000024  bf00              NOP      
000026  f8940020          LDRB     r0,[r4,#0x20]
00002a  2801              CMP      r0,#1
00002c  d102              BNE      |L11.52|
00002e  2002              MOVS     r0,#2
                  |L11.48|
;;;328    
;;;329      if(HAL_DMA_STATE_READY == hdma->State)
;;;330      {
;;;331        /* Change DMA peripheral state */
;;;332        hdma->State = HAL_DMA_STATE_BUSY;
;;;333        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;334                
;;;335        /* Disable the peripheral */
;;;336        __HAL_DMA_DISABLE(hdma);
;;;337        
;;;338        /* Configure the source, destination address and the data length & clear flags*/
;;;339        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;340        
;;;341        /* Enable the Peripheral */
;;;342        __HAL_DMA_ENABLE(hdma);
;;;343      }
;;;344      else
;;;345      {
;;;346       /* Process Unlocked */
;;;347       __HAL_UNLOCK(hdma);  
;;;348       status = HAL_BUSY;
;;;349      }  
;;;350      return status;
;;;351    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L11.52|
000034  2001              MOVS     r0,#1                 ;327
000036  f8840020          STRB     r0,[r4,#0x20]         ;327
00003a  bf00              NOP                            ;327
00003c  f8940021          LDRB     r0,[r4,#0x21]         ;329
000040  2801              CMP      r0,#1                 ;329
000042  d117              BNE      |L11.116|
000044  2002              MOVS     r0,#2                 ;332
000046  f8840021          STRB     r0,[r4,#0x21]         ;332
00004a  2000              MOVS     r0,#0                 ;333
00004c  63a0              STR      r0,[r4,#0x38]         ;333
00004e  6820              LDR      r0,[r4,#0]            ;336
000050  6800              LDR      r0,[r0,#0]            ;336
000052  f0200001          BIC      r0,r0,#1              ;336
000056  6821              LDR      r1,[r4,#0]            ;336
000058  6008              STR      r0,[r1,#0]            ;336
00005a  462b              MOV      r3,r5                 ;339
00005c  463a              MOV      r2,r7                 ;339
00005e  4631              MOV      r1,r6                 ;339
000060  4620              MOV      r0,r4                 ;339
000062  f7fffffe          BL       DMA_SetConfig
000066  6820              LDR      r0,[r4,#0]            ;342
000068  6800              LDR      r0,[r0,#0]            ;342
00006a  f0400001          ORR      r0,r0,#1              ;342
00006e  6821              LDR      r1,[r4,#0]            ;342
000070  6008              STR      r0,[r1,#0]            ;342
000072  e006              B        |L11.130|
                  |L11.116|
000074  bf00              NOP                            ;347
000076  2000              MOVS     r0,#0                 ;347
000078  f8840020          STRB     r0,[r4,#0x20]         ;347
00007c  bf00              NOP                            ;347
00007e  f04f0802          MOV      r8,#2                 ;348
                  |L11.130|
000082  4640              MOV      r0,r8                 ;350
000084  e7d4              B        |L11.48|
;;;352    
                          ENDP

000086  0000              DCW      0x0000
                  |L11.136|
000088  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
00008c  72697665
000090  72732f53
000094  544d3332
000098  46317878
00009c  5f48414c
0000a0  5f447269
0000a4  7665722f
0000a8  5372632f
0000ac  73746d33
0000b0  32663178
0000b4  785f6861
0000b8  6c5f646d
0000bc  612e63  
0000bf  00                DCB      0

                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Start_IT PROC
;;;361      */
;;;362    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;363    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;364      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;365    
;;;366      /* Check the parameters */
;;;367      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
000010  b11d              CBZ      r5,|L12.26|
000012  f5b53f80          CMP      r5,#0x10000
000016  d200              BCS      |L12.26|
000018  e004              B        |L12.36|
                  |L12.26|
00001a  f240116f          MOV      r1,#0x16f
00001e  a024              ADR      r0,|L12.176|
000020  f7fffffe          BL       assert_failed
                  |L12.36|
;;;368    
;;;369      /* Process locked */
;;;370      __HAL_LOCK(hdma);
000024  bf00              NOP      
000026  f8940020          LDRB     r0,[r4,#0x20]
00002a  2801              CMP      r0,#1
00002c  d102              BNE      |L12.52|
00002e  2002              MOVS     r0,#2
                  |L12.48|
;;;371      
;;;372      if(HAL_DMA_STATE_READY == hdma->State)
;;;373      {
;;;374        /* Change DMA peripheral state */
;;;375        hdma->State = HAL_DMA_STATE_BUSY;
;;;376        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;377        
;;;378        /* Disable the peripheral */
;;;379        __HAL_DMA_DISABLE(hdma);
;;;380        
;;;381        /* Configure the source, destination address and the data length & clear flags*/
;;;382        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;383        
;;;384        /* Enable the transfer complete interrupt */
;;;385        /* Enable the transfer Error interrupt */
;;;386        if(NULL != hdma->XferHalfCpltCallback)
;;;387        {
;;;388          /* Enable the Half transfer complete interrupt as well */
;;;389          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;390        }
;;;391        else
;;;392        {
;;;393          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;394          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;395        }
;;;396        /* Enable the Peripheral */
;;;397        __HAL_DMA_ENABLE(hdma);
;;;398      }
;;;399      else
;;;400      {      
;;;401        /* Process Unlocked */
;;;402        __HAL_UNLOCK(hdma); 
;;;403    
;;;404        /* Remain BUSY */
;;;405        status = HAL_BUSY;
;;;406      }    
;;;407      return status;
;;;408    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L12.52|
000034  2001              MOVS     r0,#1                 ;370
000036  f8840020          STRB     r0,[r4,#0x20]         ;370
00003a  bf00              NOP                            ;370
00003c  f8940021          LDRB     r0,[r4,#0x21]         ;372
000040  2801              CMP      r0,#1                 ;372
000042  d12c              BNE      |L12.158|
000044  2002              MOVS     r0,#2                 ;375
000046  f8840021          STRB     r0,[r4,#0x21]         ;375
00004a  2000              MOVS     r0,#0                 ;376
00004c  63a0              STR      r0,[r4,#0x38]         ;376
00004e  6820              LDR      r0,[r4,#0]            ;379
000050  6800              LDR      r0,[r0,#0]            ;379
000052  f0200001          BIC      r0,r0,#1              ;379
000056  6821              LDR      r1,[r4,#0]            ;379
000058  6008              STR      r0,[r1,#0]            ;379
00005a  462b              MOV      r3,r5                 ;382
00005c  463a              MOV      r2,r7                 ;382
00005e  4631              MOV      r1,r6                 ;382
000060  4620              MOV      r0,r4                 ;382
000062  f7fffffe          BL       DMA_SetConfig
000066  6ae0              LDR      r0,[r4,#0x2c]         ;386
000068  b130              CBZ      r0,|L12.120|
00006a  6820              LDR      r0,[r4,#0]            ;389
00006c  6800              LDR      r0,[r0,#0]            ;389
00006e  f040000e          ORR      r0,r0,#0xe            ;389
000072  6821              LDR      r1,[r4,#0]            ;389
000074  6008              STR      r0,[r1,#0]            ;389
000076  e00b              B        |L12.144|
                  |L12.120|
000078  6820              LDR      r0,[r4,#0]            ;393
00007a  6800              LDR      r0,[r0,#0]            ;393
00007c  f0200004          BIC      r0,r0,#4              ;393
000080  6821              LDR      r1,[r4,#0]            ;393
000082  6008              STR      r0,[r1,#0]            ;393
000084  6820              LDR      r0,[r4,#0]            ;394
000086  6800              LDR      r0,[r0,#0]            ;394
000088  f040000a          ORR      r0,r0,#0xa            ;394
00008c  6821              LDR      r1,[r4,#0]            ;394
00008e  6008              STR      r0,[r1,#0]            ;394
                  |L12.144|
000090  6820              LDR      r0,[r4,#0]            ;397
000092  6800              LDR      r0,[r0,#0]            ;397
000094  f0400001          ORR      r0,r0,#1              ;397
000098  6821              LDR      r1,[r4,#0]            ;397
00009a  6008              STR      r0,[r1,#0]            ;397
00009c  e006              B        |L12.172|
                  |L12.158|
00009e  bf00              NOP                            ;402
0000a0  2000              MOVS     r0,#0                 ;402
0000a2  f8840020          STRB     r0,[r4,#0x20]         ;402
0000a6  bf00              NOP                            ;402
0000a8  f04f0802          MOV      r8,#2                 ;405
                  |L12.172|
0000ac  4640              MOV      r0,r8                 ;407
0000ae  e7bf              B        |L12.48|
;;;409    
                          ENDP

                  |L12.176|
0000b0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
0000b4  72697665
0000b8  72732f53
0000bc  544d3332
0000c0  46317878
0000c4  5f48414c
0000c8  5f447269
0000cc  7665722f
0000d0  5372632f
0000d4  73746d33
0000d8  32663178
0000dc  785f6861
0000e0  6c5f646d
0000e4  612e63  
0000e7  00                DCB      0

                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;743      */              
;;;744    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  4602              MOV      r2,r0
;;;745    {
;;;746      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;747    
;;;748      /* Process locked */
;;;749      __HAL_LOCK(hdma);
000004  bf00              NOP      
000006  f8920020          LDRB     r0,[r2,#0x20]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L13.18|
00000e  2002              MOVS     r0,#2
                  |L13.16|
;;;750      
;;;751      if(HAL_DMA_STATE_READY == hdma->State)
;;;752      {
;;;753        switch (CallbackID)
;;;754        {
;;;755        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;756          hdma->XferCpltCallback = NULL;
;;;757          break;
;;;758    
;;;759        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;760          hdma->XferHalfCpltCallback = NULL;
;;;761          break;         
;;;762    
;;;763        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;764          hdma->XferErrorCallback = NULL;
;;;765          break;         
;;;766    
;;;767        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;768          hdma->XferAbortCallback = NULL;
;;;769          break; 
;;;770    
;;;771        case   HAL_DMA_XFER_ALL_CB_ID:
;;;772          hdma->XferCpltCallback = NULL;
;;;773          hdma->XferHalfCpltCallback = NULL;
;;;774          hdma->XferErrorCallback = NULL;
;;;775          hdma->XferAbortCallback = NULL;
;;;776          break; 
;;;777    
;;;778        default:
;;;779          status = HAL_ERROR;
;;;780          break;
;;;781        }
;;;782      }
;;;783      else
;;;784      {
;;;785        status = HAL_ERROR;
;;;786      } 
;;;787      
;;;788      /* Release Lock */
;;;789      __HAL_UNLOCK(hdma);
;;;790      
;;;791      return status;
;;;792    }
000010  4770              BX       lr
                  |L13.18|
000012  2001              MOVS     r0,#1                 ;749
000014  f8820020          STRB     r0,[r2,#0x20]         ;749
000018  bf00              NOP                            ;749
00001a  f8920021          LDRB     r0,[r2,#0x21]         ;751
00001e  2801              CMP      r0,#1                 ;751
000020  d11b              BNE      |L13.90|
000022  2905              CMP      r1,#5                 ;753
000024  d216              BCS      |L13.84|
000026  e8dff001          TBB      [pc,r1]               ;753
00002a  0306              DCB      0x03,0x06
00002c  090c0f00          DCB      0x09,0x0c,0x0f,0x00
000030  2000              MOVS     r0,#0                 ;756
000032  6290              STR      r0,[r2,#0x28]         ;756
000034  e010              B        |L13.88|
000036  2000              MOVS     r0,#0                 ;760
000038  62d0              STR      r0,[r2,#0x2c]         ;760
00003a  e00d              B        |L13.88|
00003c  2000              MOVS     r0,#0                 ;764
00003e  6310              STR      r0,[r2,#0x30]         ;764
000040  e00a              B        |L13.88|
000042  2000              MOVS     r0,#0                 ;768
000044  6350              STR      r0,[r2,#0x34]         ;768
000046  e007              B        |L13.88|
000048  2000              MOVS     r0,#0                 ;772
00004a  6290              STR      r0,[r2,#0x28]         ;772
00004c  62d0              STR      r0,[r2,#0x2c]         ;773
00004e  6310              STR      r0,[r2,#0x30]         ;774
000050  6350              STR      r0,[r2,#0x34]         ;775
000052  e001              B        |L13.88|
                  |L13.84|
000054  2301              MOVS     r3,#1                 ;779
000056  bf00              NOP                            ;780
                  |L13.88|
000058  e000              B        |L13.92|
                  |L13.90|
00005a  2301              MOVS     r3,#1                 ;785
                  |L13.92|
00005c  bf00              NOP                            ;789
00005e  2000              MOVS     r0,#0                 ;789
000060  f8820020          STRB     r0,[r2,#0x20]         ;789
000064  bf00              NOP                            ;789
000066  4618              MOV      r0,r3                 ;791
000068  e7d2              B        |L13.16|
;;;793      
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 665
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
