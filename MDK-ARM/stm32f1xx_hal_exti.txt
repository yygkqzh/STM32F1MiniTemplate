; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_exti.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_exti.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_exti.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c]
                          THUMB

                          AREA ||i.HAL_EXTI_ClearConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearConfigLine PROC
;;;326      */
;;;327    HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {
000004  4604              MOV      r4,r0
;;;329      uint32_t regval;
;;;330      uint32_t linepos;
;;;331      uint32_t maskline;
;;;332    
;;;333      /* Check null pointer */
;;;334      if (hexti == NULL)
000006  b914              CBNZ     r4,|L1.14|
;;;335      {
;;;336        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;337      }
;;;338    
;;;339      /* Check the parameter */
;;;340      assert_param(IS_EXTI_LINE(hexti->Line));
;;;341    
;;;342      /* compute line mask */
;;;343      linepos = (hexti->Line & EXTI_PIN_MASK);
;;;344      maskline = (1uL << linepos);
;;;345    
;;;346      /* 1] Clear interrupt mode */
;;;347      EXTI->IMR = (EXTI->IMR & ~maskline);
;;;348    
;;;349      /* 2] Clear event mode */
;;;350      EXTI->EMR = (EXTI->EMR & ~maskline);
;;;351    
;;;352      /* 3] Clear triggers in case of configurable lines */
;;;353      if ((hexti->Line & EXTI_CONFIG) != 0x00u)
;;;354      {
;;;355        EXTI->RTSR = (EXTI->RTSR & ~maskline);
;;;356        EXTI->FTSR = (EXTI->FTSR & ~maskline);
;;;357    
;;;358        /* Get Gpio port selection for gpio lines */
;;;359        if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
;;;360        {
;;;361          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;362    
;;;363          regval = AFIO->EXTICR[linepos >> 2u];
;;;364          regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;365          AFIO->EXTICR[linepos >> 2u] = regval;
;;;366        }
;;;367      }
;;;368    
;;;369      return HAL_OK;
;;;370    }
00000a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.14|
00000e  492b              LDR      r1,|L1.188|
000010  6820              LDR      r0,[r4,#0]            ;340
000012  4008              ANDS     r0,r0,r1              ;340
000014  b988              CBNZ     r0,|L1.58|
000016  6820              LDR      r0,[r4,#0]            ;340
000018  f00060c0          AND      r0,r0,#0x6000000      ;340
00001c  f1b07f00          CMP      r0,#0x2000000         ;340
000020  d005              BEQ      |L1.46|
000022  6820              LDR      r0,[r4,#0]            ;340
000024  f00060c0          AND      r0,r0,#0x6000000      ;340
000028  f1b06fc0          CMP      r0,#0x6000000         ;340
00002c  d105              BNE      |L1.58|
                  |L1.46|
00002e  7820              LDRB     r0,[r4,#0]            ;340
000030  f000001f          AND      r0,r0,#0x1f           ;340
000034  2813              CMP      r0,#0x13              ;340
000036  d200              BCS      |L1.58|
000038  e004              B        |L1.68|
                  |L1.58|
00003a  f44f71aa          MOV      r1,#0x154             ;340
00003e  a020              ADR      r0,|L1.192|
000040  f7fffffe          BL       assert_failed
                  |L1.68|
000044  7820              LDRB     r0,[r4,#0]            ;343
000046  f000051f          AND      r5,r0,#0x1f           ;343
00004a  2001              MOVS     r0,#1                 ;344
00004c  fa00f605          LSL      r6,r0,r5              ;344
000050  482a              LDR      r0,|L1.252|
000052  6800              LDR      r0,[r0,#0]            ;347
000054  43b0              BICS     r0,r0,r6              ;347
000056  4929              LDR      r1,|L1.252|
000058  6008              STR      r0,[r1,#0]            ;347
00005a  1d08              ADDS     r0,r1,#4              ;350
00005c  6800              LDR      r0,[r0,#0]            ;350
00005e  43b0              BICS     r0,r0,r6              ;350
000060  1d09              ADDS     r1,r1,#4              ;350
000062  6008              STR      r0,[r1,#0]            ;350
000064  6820              LDR      r0,[r4,#0]            ;353
000066  f0007000          AND      r0,r0,#0x2000000      ;353
00006a  2800              CMP      r0,#0                 ;353
00006c  d024              BEQ      |L1.184|
00006e  1d08              ADDS     r0,r1,#4              ;355
000070  6800              LDR      r0,[r0,#0]            ;355
000072  43b0              BICS     r0,r0,r6              ;355
000074  1d09              ADDS     r1,r1,#4              ;355
000076  6008              STR      r0,[r1,#0]            ;355
000078  1d08              ADDS     r0,r1,#4              ;356
00007a  6800              LDR      r0,[r0,#0]            ;356
00007c  43b0              BICS     r0,r0,r6              ;356
00007e  1d09              ADDS     r1,r1,#4              ;356
000080  6008              STR      r0,[r1,#0]            ;356
000082  6820              LDR      r0,[r4,#0]            ;359
000084  f00060c0          AND      r0,r0,#0x6000000      ;359
000088  f1b06fc0          CMP      r0,#0x6000000         ;359
00008c  d114              BNE      |L1.184|
00008e  2d10              CMP      r5,#0x10              ;361
000090  d200              BCS      |L1.148|
000092  e004              B        |L1.158|
                  |L1.148|
000094  f2401169          MOV      r1,#0x169             ;361
000098  a009              ADR      r0,|L1.192|
00009a  f7fffffe          BL       assert_failed
                  |L1.158|
00009e  4818              LDR      r0,|L1.256|
0000a0  08a9              LSRS     r1,r5,#2              ;363
0000a2  f8507021          LDR      r7,[r0,r1,LSL #2]     ;363
0000a6  07a8              LSLS     r0,r5,#30             ;364
0000a8  0f01              LSRS     r1,r0,#28             ;364
0000aa  200f              MOVS     r0,#0xf               ;364
0000ac  4088              LSLS     r0,r0,r1              ;364
0000ae  4387              BICS     r7,r7,r0              ;364
0000b0  4813              LDR      r0,|L1.256|
0000b2  08a9              LSRS     r1,r5,#2              ;365
0000b4  f8407021          STR      r7,[r0,r1,LSL #2]     ;365
                  |L1.184|
0000b8  2000              MOVS     r0,#0                 ;369
0000ba  e7a6              B        |L1.10|
;;;371    
                          ENDP

                  |L1.188|
                          DCD      0xf9ffffe0
                  |L1.192|
0000c0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
0000c4  72697665
0000c8  72732f53
0000cc  544d3332
0000d0  46317878
0000d4  5f48414c
0000d8  5f447269
0000dc  7665722f
0000e0  5372632f
0000e4  73746d33
0000e8  32663178
0000ec  785f6861
0000f0  6c5f6578
0000f4  74692e  
0000f7  6300              DCB      "c",0
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L1.252|
                          DCD      0x40010400
                  |L1.256|
                          DCD      0x40010008

                          AREA ||i.HAL_EXTI_ClearPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearPending PROC
;;;505      */
;;;506    void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;508      uint32_t maskline;
;;;509    
;;;510      /* Check parameters */
;;;511      assert_param(IS_EXTI_LINE(hexti->Line));
000006  491b              LDR      r1,|L2.116|
000008  6820              LDR      r0,[r4,#0]
00000a  4008              ANDS     r0,r0,r1
00000c  b988              CBNZ     r0,|L2.50|
00000e  6820              LDR      r0,[r4,#0]
000010  f00060c0          AND      r0,r0,#0x6000000
000014  f1b07f00          CMP      r0,#0x2000000
000018  d005              BEQ      |L2.38|
00001a  6820              LDR      r0,[r4,#0]
00001c  f00060c0          AND      r0,r0,#0x6000000
000020  f1b06fc0          CMP      r0,#0x6000000
000024  d105              BNE      |L2.50|
                  |L2.38|
000026  7820              LDRB     r0,[r4,#0]
000028  f000001f          AND      r0,r0,#0x1f
00002c  2813              CMP      r0,#0x13
00002e  d200              BCS      |L2.50|
000030  e004              B        |L2.60|
                  |L2.50|
000032  f24011ff          MOV      r1,#0x1ff
000036  a010              ADR      r0,|L2.120|
000038  f7fffffe          BL       assert_failed
                  |L2.60|
;;;512      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
00003c  6820              LDR      r0,[r4,#0]
00003e  f0007000          AND      r0,r0,#0x2000000
000042  b100              CBZ      r0,|L2.70|
000044  e004              B        |L2.80|
                  |L2.70|
000046  f44f7100          MOV      r1,#0x200
00004a  a00b              ADR      r0,|L2.120|
00004c  f7fffffe          BL       assert_failed
                  |L2.80|
;;;513      assert_param(IS_EXTI_PENDING_EDGE(Edge));
000050  2d03              CMP      r5,#3
000052  d100              BNE      |L2.86|
000054  e004              B        |L2.96|
                  |L2.86|
000056  f2402101          MOV      r1,#0x201
00005a  a007              ADR      r0,|L2.120|
00005c  f7fffffe          BL       assert_failed
                  |L2.96|
;;;514    
;;;515      /* Compute line mask */
;;;516      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000060  7820              LDRB     r0,[r4,#0]
000062  f000011f          AND      r1,r0,#0x1f
000066  2001              MOVS     r0,#1
000068  fa00f601          LSL      r6,r0,r1
;;;517    
;;;518      /* Clear Pending bit */
;;;519      EXTI->PR =  maskline;
00006c  4811              LDR      r0,|L2.180|
00006e  6006              STR      r6,[r0,#0]
;;;520    }
000070  bd70              POP      {r4-r6,pc}
;;;521    
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
                          DCD      0xf9ffffe0
                  |L2.120|
000078  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
00007c  72697665
000080  72732f53
000084  544d3332
000088  46317878
00008c  5f48414c
000090  5f447269
000094  7665722f
000098  5372632f
00009c  73746d33
0000a0  32663178
0000a4  785f6861
0000a8  6c5f6578
0000ac  74692e  
0000af  6300              DCB      "c",0
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L2.180|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_GenerateSWI||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GenerateSWI PROC
;;;526      */
;;;527    void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
000000  b570              PUSH     {r4-r6,lr}
;;;528    {
000002  4604              MOV      r4,r0
;;;529      uint32_t maskline;
;;;530    
;;;531      /* Check parameters */
;;;532      assert_param(IS_EXTI_LINE(hexti->Line));
000004  4916              LDR      r1,|L3.96|
000006  6820              LDR      r0,[r4,#0]
000008  4008              ANDS     r0,r0,r1
00000a  b988              CBNZ     r0,|L3.48|
00000c  6820              LDR      r0,[r4,#0]
00000e  f00060c0          AND      r0,r0,#0x6000000
000012  f1b07f00          CMP      r0,#0x2000000
000016  d005              BEQ      |L3.36|
000018  6820              LDR      r0,[r4,#0]
00001a  f00060c0          AND      r0,r0,#0x6000000
00001e  f1b06fc0          CMP      r0,#0x6000000
000022  d105              BNE      |L3.48|
                  |L3.36|
000024  7820              LDRB     r0,[r4,#0]
000026  f000001f          AND      r0,r0,#0x1f
00002a  2813              CMP      r0,#0x13
00002c  d200              BCS      |L3.48|
00002e  e004              B        |L3.58|
                  |L3.48|
000030  f44f7105          MOV      r1,#0x214
000034  a00b              ADR      r0,|L3.100|
000036  f7fffffe          BL       assert_failed
                  |L3.58|
;;;533      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
00003a  6820              LDR      r0,[r4,#0]
00003c  f0007000          AND      r0,r0,#0x2000000
000040  b100              CBZ      r0,|L3.68|
000042  e004              B        |L3.78|
                  |L3.68|
000044  f2402115          MOV      r1,#0x215
000048  a006              ADR      r0,|L3.100|
00004a  f7fffffe          BL       assert_failed
                  |L3.78|
;;;534    
;;;535      /* Compute line mask */
;;;536      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
00004e  7820              LDRB     r0,[r4,#0]
000050  f000011f          AND      r1,r0,#0x1f
000054  2001              MOVS     r0,#1
000056  fa00f501          LSL      r5,r0,r1
;;;537    
;;;538      /* Generate Software interrupt */
;;;539      EXTI->SWIER = maskline;
00005a  4811              LDR      r0,|L3.160|
00005c  6005              STR      r5,[r0,#0]
;;;540    }
00005e  bd70              POP      {r4-r6,pc}
;;;541    
                          ENDP

                  |L3.96|
                          DCD      0xf9ffffe0
                  |L3.100|
000064  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
000068  72697665
00006c  72732f53
000070  544d3332
000074  46317878
000078  5f48414c
00007c  5f447269
000080  7665722f
000084  5372632f
000088  73746d33
00008c  32663178
000090  785f6861
000094  6c5f6578
000098  74692e  
00009b  6300              DCB      "c",0
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
                          DCD      0x40010410

                          AREA ||i.HAL_EXTI_GetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetConfigLine PROC
;;;237      */
;;;238    HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;239    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;240      uint32_t regval;
;;;241      uint32_t linepos;
;;;242      uint32_t maskline;
;;;243    
;;;244      /* Check null pointer */
;;;245      if ((hexti == NULL) || (pExtiConfig == NULL))
000008  b105              CBZ      r5,|L4.12|
00000a  b914              CBNZ     r4,|L4.18|
                  |L4.12|
;;;246      {
;;;247        return HAL_ERROR;
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;248      }
;;;249    
;;;250      /* Check the parameter */
;;;251      assert_param(IS_EXTI_LINE(hexti->Line));
;;;252    
;;;253      /* Store handle line number to configuration structure */
;;;254      pExtiConfig->Line = hexti->Line;
;;;255    
;;;256      /* Compute line mask */
;;;257      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;258      maskline = (1uL << linepos);
;;;259    
;;;260      /* 1] Get core mode : interrupt */
;;;261    
;;;262      /* Check if selected line is enable */
;;;263      if ((EXTI->IMR & maskline) != 0x00u)
;;;264      {
;;;265        pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
;;;266      }
;;;267      else
;;;268      {
;;;269        pExtiConfig->Mode = EXTI_MODE_NONE;
;;;270      }
;;;271    
;;;272      /* Get event mode */
;;;273      /* Check if selected line is enable */
;;;274      if ((EXTI->EMR & maskline) != 0x00u)
;;;275      {
;;;276        pExtiConfig->Mode |= EXTI_MODE_EVENT;
;;;277      }
;;;278    
;;;279      /* 2] Get trigger for configurable lines : rising */
;;;280      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;281      {
;;;282        /* Check if configuration of selected line is enable */
;;;283        if ((EXTI->RTSR & maskline) != 0x00u)
;;;284        {
;;;285          pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
;;;286        }
;;;287        else
;;;288        {
;;;289          pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;290        }
;;;291    
;;;292        /* Get falling configuration */
;;;293        /* Check if configuration of selected line is enable */
;;;294        if ((EXTI->FTSR & maskline) != 0x00u)
;;;295        {
;;;296          pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
;;;297        }
;;;298    
;;;299        /* Get Gpio port selection for gpio lines */
;;;300        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;301        {
;;;302          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;303    
;;;304          regval = AFIO->EXTICR[linepos >> 2u];
;;;305          pExtiConfig->GPIOSel = ((regval << (AFIO_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
;;;306        }
;;;307        else
;;;308        {
;;;309          pExtiConfig->GPIOSel = 0x00u;
;;;310        }
;;;311      }
;;;312      else
;;;313      {
;;;314        /* No Trigger selected */
;;;315        pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;316        pExtiConfig->GPIOSel = 0x00u;
;;;317      }
;;;318    
;;;319      return HAL_OK;
;;;320    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L4.18|
000012  4938              LDR      r1,|L4.244|
000014  6828              LDR      r0,[r5,#0]            ;251
000016  4008              ANDS     r0,r0,r1              ;251
000018  b988              CBNZ     r0,|L4.62|
00001a  6828              LDR      r0,[r5,#0]            ;251
00001c  f00060c0          AND      r0,r0,#0x6000000      ;251
000020  f1b07f00          CMP      r0,#0x2000000         ;251
000024  d005              BEQ      |L4.50|
000026  6828              LDR      r0,[r5,#0]            ;251
000028  f00060c0          AND      r0,r0,#0x6000000      ;251
00002c  f1b06fc0          CMP      r0,#0x6000000         ;251
000030  d105              BNE      |L4.62|
                  |L4.50|
000032  7828              LDRB     r0,[r5,#0]            ;251
000034  f000001f          AND      r0,r0,#0x1f           ;251
000038  2813              CMP      r0,#0x13              ;251
00003a  d200              BCS      |L4.62|
00003c  e003              B        |L4.70|
                  |L4.62|
00003e  21fb              MOVS     r1,#0xfb              ;251
000040  a02d              ADR      r0,|L4.248|
000042  f7fffffe          BL       assert_failed
                  |L4.70|
000046  6828              LDR      r0,[r5,#0]            ;254
000048  6020              STR      r0,[r4,#0]            ;254
00004a  7820              LDRB     r0,[r4,#0]            ;257
00004c  f000061f          AND      r6,r0,#0x1f           ;257
000050  2001              MOVS     r0,#1                 ;258
000052  fa00f706          LSL      r7,r0,r6              ;258
000056  4837              LDR      r0,|L4.308|
000058  6800              LDR      r0,[r0,#0]            ;263
00005a  4038              ANDS     r0,r0,r7              ;263
00005c  b110              CBZ      r0,|L4.100|
00005e  2001              MOVS     r0,#1                 ;265
000060  6060              STR      r0,[r4,#4]            ;265
000062  e001              B        |L4.104|
                  |L4.100|
000064  2000              MOVS     r0,#0                 ;269
000066  6060              STR      r0,[r4,#4]            ;269
                  |L4.104|
000068  4832              LDR      r0,|L4.308|
00006a  1d00              ADDS     r0,r0,#4              ;274
00006c  6800              LDR      r0,[r0,#0]            ;274
00006e  4038              ANDS     r0,r0,r7              ;274
000070  b118              CBZ      r0,|L4.122|
000072  6860              LDR      r0,[r4,#4]            ;276
000074  f0400002          ORR      r0,r0,#2              ;276
000078  6060              STR      r0,[r4,#4]            ;276
                  |L4.122|
00007a  6820              LDR      r0,[r4,#0]            ;280
00007c  f0007000          AND      r0,r0,#0x2000000      ;280
000080  2800              CMP      r0,#0                 ;280
000082  d031              BEQ      |L4.232|
000084  482b              LDR      r0,|L4.308|
000086  3008              ADDS     r0,r0,#8              ;283
000088  6800              LDR      r0,[r0,#0]            ;283
00008a  4038              ANDS     r0,r0,r7              ;283
00008c  b110              CBZ      r0,|L4.148|
00008e  2001              MOVS     r0,#1                 ;285
000090  60a0              STR      r0,[r4,#8]            ;285
000092  e001              B        |L4.152|
                  |L4.148|
000094  2000              MOVS     r0,#0                 ;289
000096  60a0              STR      r0,[r4,#8]            ;289
                  |L4.152|
000098  4826              LDR      r0,|L4.308|
00009a  300c              ADDS     r0,r0,#0xc            ;294
00009c  6800              LDR      r0,[r0,#0]            ;294
00009e  4038              ANDS     r0,r0,r7              ;294
0000a0  b118              CBZ      r0,|L4.170|
0000a2  68a0              LDR      r0,[r4,#8]            ;296
0000a4  f0400002          ORR      r0,r0,#2              ;296
0000a8  60a0              STR      r0,[r4,#8]            ;296
                  |L4.170|
0000aa  6820              LDR      r0,[r4,#0]            ;300
0000ac  f00060c0          AND      r0,r0,#0x6000000      ;300
0000b0  f1b06fc0          CMP      r0,#0x6000000         ;300
0000b4  d115              BNE      |L4.226|
0000b6  2e10              CMP      r6,#0x10              ;302
0000b8  d200              BCS      |L4.188|
0000ba  e004              B        |L4.198|
                  |L4.188|
0000bc  f44f7197          MOV      r1,#0x12e             ;302
0000c0  a00d              ADR      r0,|L4.248|
0000c2  f7fffffe          BL       assert_failed
                  |L4.198|
0000c6  481c              LDR      r0,|L4.312|
0000c8  08b1              LSRS     r1,r6,#2              ;304
0000ca  f8508021          LDR      r8,[r0,r1,LSL #2]     ;304
0000ce  f0060003          AND      r0,r6,#3              ;305
0000d2  f1c00003          RSB      r0,r0,#3              ;305
0000d6  0080              LSLS     r0,r0,#2              ;305
0000d8  fa08f000          LSL      r0,r8,r0              ;305
0000dc  0e00              LSRS     r0,r0,#24             ;305
0000de  60e0              STR      r0,[r4,#0xc]          ;305
0000e0  e005              B        |L4.238|
                  |L4.226|
0000e2  2000              MOVS     r0,#0                 ;309
0000e4  60e0              STR      r0,[r4,#0xc]          ;309
0000e6  e002              B        |L4.238|
                  |L4.232|
0000e8  2000              MOVS     r0,#0                 ;315
0000ea  60a0              STR      r0,[r4,#8]            ;315
0000ec  60e0              STR      r0,[r4,#0xc]          ;316
                  |L4.238|
0000ee  2000              MOVS     r0,#0                 ;319
0000f0  e78d              B        |L4.14|
;;;321    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L4.244|
                          DCD      0xf9ffffe0
                  |L4.248|
0000f8  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
0000fc  72697665
000100  72732f53
000104  544d3332
000108  46317878
00010c  5f48414c
000110  5f447269
000114  7665722f
000118  5372632f
00011c  73746d33
000120  32663178
000124  785f6861
000128  6c5f6578
00012c  74692e  
00012f  6300              DCB      "c",0
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L4.308|
                          DCD      0x40010400
                  |L4.312|
                          DCD      0x40010008

                          AREA ||i.HAL_EXTI_GetHandle||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetHandle PROC
;;;404      */
;;;405    HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
000000  b570              PUSH     {r4-r6,lr}
;;;406    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;407      /* Check the parameters */
;;;408      assert_param(IS_EXTI_LINE(ExtiLine));
000006  480e              LDR      r0,|L5.64|
000008  4020              ANDS     r0,r0,r4
00000a  b970              CBNZ     r0,|L5.42|
00000c  f00460c0          AND      r0,r4,#0x6000000
000010  f1b07f00          CMP      r0,#0x2000000
000014  d004              BEQ      |L5.32|
000016  f00460c0          AND      r0,r4,#0x6000000
00001a  f1b06fc0          CMP      r0,#0x6000000
00001e  d104              BNE      |L5.42|
                  |L5.32|
000020  f004001f          AND      r0,r4,#0x1f
000024  2813              CMP      r0,#0x13
000026  d200              BCS      |L5.42|
000028  e004              B        |L5.52|
                  |L5.42|
00002a  f44f71cc          MOV      r1,#0x198
00002e  a005              ADR      r0,|L5.68|
000030  f7fffffe          BL       assert_failed
                  |L5.52|
;;;409    
;;;410      /* Check null pointer */
;;;411      if (hexti == NULL)
000034  b90d              CBNZ     r5,|L5.58|
;;;412      {
;;;413        return HAL_ERROR;
000036  2001              MOVS     r0,#1
                  |L5.56|
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Store line number as handle private field */
;;;418        hexti->Line = ExtiLine;
;;;419    
;;;420        return HAL_OK;
;;;421      }
;;;422    }
000038  bd70              POP      {r4-r6,pc}
                  |L5.58|
00003a  602c              STR      r4,[r5,#0]            ;418
00003c  2000              MOVS     r0,#0                 ;420
00003e  e7fb              B        |L5.56|
;;;423    
                          ENDP

                  |L5.64|
                          DCD      0xf9ffffe0
                  |L5.68|
000044  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
000048  72697665
00004c  72732f53
000050  544d3332
000054  46317878
000058  5f48414c
00005c  5f447269
000060  7665722f
000064  5372632f
000068  73746d33
00006c  32663178
000070  785f6861
000074  6c5f6578
000078  74692e  
00007b  6300              DCB      "c",0
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.HAL_EXTI_GetPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetPending PROC
;;;476      */
;;;477    uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;478    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;479      uint32_t regval;
;;;480      uint32_t maskline;
;;;481      uint32_t linepos;
;;;482    
;;;483      /* Check parameters */
;;;484      assert_param(IS_EXTI_LINE(hexti->Line));
000008  491d              LDR      r1,|L6.128|
00000a  6820              LDR      r0,[r4,#0]
00000c  4008              ANDS     r0,r0,r1
00000e  b988              CBNZ     r0,|L6.52|
000010  6820              LDR      r0,[r4,#0]
000012  f00060c0          AND      r0,r0,#0x6000000
000016  f1b07f00          CMP      r0,#0x2000000
00001a  d005              BEQ      |L6.40|
00001c  6820              LDR      r0,[r4,#0]
00001e  f00060c0          AND      r0,r0,#0x6000000
000022  f1b06fc0          CMP      r0,#0x6000000
000026  d105              BNE      |L6.52|
                  |L6.40|
000028  7820              LDRB     r0,[r4,#0]
00002a  f000001f          AND      r0,r0,#0x1f
00002e  2813              CMP      r0,#0x13
000030  d200              BCS      |L6.52|
000032  e004              B        |L6.62|
                  |L6.52|
000034  f44f71f2          MOV      r1,#0x1e4
000038  a012              ADR      r0,|L6.132|
00003a  f7fffffe          BL       assert_failed
                  |L6.62|
;;;485      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
00003e  6820              LDR      r0,[r4,#0]
000040  f0007000          AND      r0,r0,#0x2000000
000044  b100              CBZ      r0,|L6.72|
000046  e004              B        |L6.82|
                  |L6.72|
000048  f24011e5          MOV      r1,#0x1e5
00004c  a00d              ADR      r0,|L6.132|
00004e  f7fffffe          BL       assert_failed
                  |L6.82|
;;;486      assert_param(IS_EXTI_PENDING_EDGE(Edge));
000052  2e03              CMP      r6,#3
000054  d100              BNE      |L6.88|
000056  e004              B        |L6.98|
                  |L6.88|
000058  f44f71f3          MOV      r1,#0x1e6
00005c  a009              ADR      r0,|L6.132|
00005e  f7fffffe          BL       assert_failed
                  |L6.98|
;;;487    
;;;488      /* Compute line mask */
;;;489      linepos = (hexti->Line & EXTI_PIN_MASK);
000062  7820              LDRB     r0,[r4,#0]
000064  f000051f          AND      r5,r0,#0x1f
;;;490      maskline = (1uL << linepos);
000068  2001              MOVS     r0,#1
00006a  fa00f805          LSL      r8,r0,r5
;;;491    
;;;492      /* return 1 if bit is set else 0 */
;;;493      regval = ((EXTI->PR & maskline) >> linepos);
00006e  4814              LDR      r0,|L6.192|
000070  6800              LDR      r0,[r0,#0]
000072  ea000008          AND      r0,r0,r8
000076  fa20f705          LSR      r7,r0,r5
;;;494      return regval;
00007a  4638              MOV      r0,r7
;;;495    }
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;496    
                          ENDP

                  |L6.128|
                          DCD      0xf9ffffe0
                  |L6.132|
000084  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
000088  72697665
00008c  72732f53
000090  544d3332
000094  46317878
000098  5f48414c
00009c  5f447269
0000a0  7665722f
0000a4  5372632f
0000a8  73746d33
0000ac  32663178
0000b0  785f6861
0000b4  6c5f6578
0000b8  74692e  
0000bb  6300              DCB      "c",0
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L6.192|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_IRQHandler PROC
;;;444      */
;;;445    void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
000002  4604              MOV      r4,r0
;;;447      uint32_t regval;
;;;448      uint32_t maskline;
;;;449    
;;;450      /* Compute line mask */
;;;451      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000004  7820              LDRB     r0,[r4,#0]
000006  f000011f          AND      r1,r0,#0x1f
00000a  2001              MOVS     r0,#1
00000c  fa00f501          LSL      r5,r0,r1
;;;452    
;;;453      /* Get pending bit  */
;;;454      regval = (EXTI->PR & maskline);
000010  4805              LDR      r0,|L7.40|
000012  6800              LDR      r0,[r0,#0]
000014  ea000605          AND      r6,r0,r5
;;;455      if (regval != 0x00u)
000018  b12e              CBZ      r6,|L7.38|
;;;456      {
;;;457        /* Clear pending bit */
;;;458        EXTI->PR = maskline;
00001a  4803              LDR      r0,|L7.40|
00001c  6005              STR      r5,[r0,#0]
;;;459    
;;;460        /* Call callback */
;;;461        if (hexti->PendingCallback != NULL)
00001e  6860              LDR      r0,[r4,#4]
000020  b108              CBZ      r0,|L7.38|
;;;462        {
;;;463          hexti->PendingCallback();
000022  6860              LDR      r0,[r4,#4]
000024  4780              BLX      r0
                  |L7.38|
;;;464        }
;;;465      }
;;;466    }
000026  bd70              POP      {r4-r6,pc}
;;;467    
                          ENDP

                  |L7.40|
                          DCD      0x40010414

                          AREA ||i.HAL_EXTI_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_RegisterCallback PROC
;;;379      */
;;;380    HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
000000  b510              PUSH     {r4,lr}
;;;381    {
000002  4603              MOV      r3,r0
;;;382      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;383    
;;;384      switch (CallbackID)
000006  b909              CBNZ     r1,|L8.12|
;;;385      {
;;;386        case  HAL_EXTI_COMMON_CB_ID:
;;;387          hexti->PendingCallback = pPendingCbfn;
000008  605a              STR      r2,[r3,#4]
;;;388          break;
00000a  e001              B        |L8.16|
                  |L8.12|
;;;389    
;;;390        default:
;;;391          status = HAL_ERROR;
00000c  2001              MOVS     r0,#1
;;;392          break;
00000e  bf00              NOP      
                  |L8.16|
000010  bf00              NOP                            ;388
;;;393      }
;;;394    
;;;395      return status;
;;;396    }
000012  bd10              POP      {r4,pc}
;;;397    
                          ENDP


                          AREA ||i.HAL_EXTI_SetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_SetConfigLine PROC
;;;142      */
;;;143    HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;144    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;145      uint32_t regval;
;;;146      uint32_t linepos;
;;;147      uint32_t maskline;
;;;148    
;;;149      /* Check null pointer */
;;;150      if ((hexti == NULL) || (pExtiConfig == NULL))
000008  b107              CBZ      r7,|L9.12|
00000a  b914              CBNZ     r4,|L9.18|
                  |L9.12|
;;;151      {
;;;152        return HAL_ERROR;
00000c  2001              MOVS     r0,#1
                  |L9.14|
;;;153      }
;;;154    
;;;155      /* Check parameters */
;;;156      assert_param(IS_EXTI_LINE(pExtiConfig->Line));
;;;157      assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
;;;158    
;;;159      /* Assign line number to handle */
;;;160      hexti->Line = pExtiConfig->Line;
;;;161    
;;;162      /* Compute line mask */
;;;163      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;164      maskline = (1uL << linepos);
;;;165    
;;;166      /* Configure triggers for configurable lines */
;;;167      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;168      {
;;;169        assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
;;;170    
;;;171        /* Configure rising trigger */
;;;172        /* Mask or set line */
;;;173        if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
;;;174        {
;;;175          EXTI->RTSR |= maskline;
;;;176        }
;;;177        else
;;;178        {
;;;179          EXTI->RTSR &= ~maskline;
;;;180        }
;;;181    
;;;182        /* Configure falling trigger */
;;;183        /* Mask or set line */
;;;184        if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
;;;185        {
;;;186          EXTI->FTSR |= maskline;
;;;187        }
;;;188        else
;;;189        {
;;;190          EXTI->FTSR &= ~maskline;
;;;191        }
;;;192    
;;;193    
;;;194        /* Configure gpio port selection in case of gpio exti line */
;;;195        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;196        {
;;;197          assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
;;;198          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;199          
;;;200          regval = AFIO->EXTICR[linepos >> 2u];
;;;201          regval &= ~(AFIO_EXTICR1_EXTI0 << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;202          regval |= (pExtiConfig->GPIOSel << (AFIO_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;203          AFIO->EXTICR[linepos >> 2u] = regval;
;;;204        }
;;;205      }
;;;206    
;;;207      /* Configure interrupt mode : read current mode */
;;;208      /* Mask or set line */
;;;209      if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
;;;210      {
;;;211        EXTI->IMR |= maskline;
;;;212      }
;;;213      else
;;;214      {
;;;215        EXTI->IMR &= ~maskline;
;;;216      }
;;;217    
;;;218      /* Configure event mode : read current mode */
;;;219      /* Mask or set line */
;;;220      if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
;;;221      {
;;;222        EXTI->EMR |= maskline;
;;;223      }
;;;224      else
;;;225      {
;;;226        EXTI->EMR &= ~maskline;
;;;227      }
;;;228    
;;;229      return HAL_OK;
;;;230    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.18|
000012  495d              LDR      r1,|L9.392|
000014  6820              LDR      r0,[r4,#0]            ;156
000016  4008              ANDS     r0,r0,r1              ;156
000018  b988              CBNZ     r0,|L9.62|
00001a  6820              LDR      r0,[r4,#0]            ;156
00001c  f00060c0          AND      r0,r0,#0x6000000      ;156
000020  f1b07f00          CMP      r0,#0x2000000         ;156
000024  d005              BEQ      |L9.50|
000026  6820              LDR      r0,[r4,#0]            ;156
000028  f00060c0          AND      r0,r0,#0x6000000      ;156
00002c  f1b06fc0          CMP      r0,#0x6000000         ;156
000030  d105              BNE      |L9.62|
                  |L9.50|
000032  7820              LDRB     r0,[r4,#0]            ;156
000034  f000001f          AND      r0,r0,#0x1f           ;156
000038  2813              CMP      r0,#0x13              ;156
00003a  d200              BCS      |L9.62|
00003c  e003              B        |L9.70|
                  |L9.62|
00003e  219c              MOVS     r1,#0x9c              ;156
000040  a052              ADR      r0,|L9.396|
000042  f7fffffe          BL       assert_failed
                  |L9.70|
000046  7920              LDRB     r0,[r4,#4]            ;157
000048  f0000003          AND      r0,r0,#3              ;157
00004c  b120              CBZ      r0,|L9.88|
00004e  6860              LDR      r0,[r4,#4]            ;157
000050  f0200003          BIC      r0,r0,#3              ;157
000054  b900              CBNZ     r0,|L9.88|
000056  e003              B        |L9.96|
                  |L9.88|
000058  219d              MOVS     r1,#0x9d              ;157
00005a  a04c              ADR      r0,|L9.396|
00005c  f7fffffe          BL       assert_failed
                  |L9.96|
000060  6820              LDR      r0,[r4,#0]            ;160
000062  6038              STR      r0,[r7,#0]            ;160
000064  7820              LDRB     r0,[r4,#0]            ;163
000066  f000061f          AND      r6,r0,#0x1f           ;163
00006a  2001              MOVS     r0,#1                 ;164
00006c  fa00f506          LSL      r5,r0,r6              ;164
000070  6820              LDR      r0,[r4,#0]            ;167
000072  f0007000          AND      r0,r0,#0x2000000      ;167
000076  2800              CMP      r0,#0                 ;167
000078  d05e              BEQ      |L9.312|
00007a  68a0              LDR      r0,[r4,#8]            ;169
00007c  f0200003          BIC      r0,r0,#3              ;169
000080  b900              CBNZ     r0,|L9.132|
000082  e003              B        |L9.140|
                  |L9.132|
000084  21a9              MOVS     r1,#0xa9              ;169
000086  a041              ADR      r0,|L9.396|
000088  f7fffffe          BL       assert_failed
                  |L9.140|
00008c  7a20              LDRB     r0,[r4,#8]            ;173
00008e  f0000001          AND      r0,r0,#1              ;173
000092  b128              CBZ      r0,|L9.160|
000094  484c              LDR      r0,|L9.456|
000096  6800              LDR      r0,[r0,#0]            ;175
000098  4328              ORRS     r0,r0,r5              ;175
00009a  494b              LDR      r1,|L9.456|
00009c  6008              STR      r0,[r1,#0]            ;175
00009e  e004              B        |L9.170|
                  |L9.160|
0000a0  4849              LDR      r0,|L9.456|
0000a2  6800              LDR      r0,[r0,#0]            ;179
0000a4  43a8              BICS     r0,r0,r5              ;179
0000a6  4948              LDR      r1,|L9.456|
0000a8  6008              STR      r0,[r1,#0]            ;179
                  |L9.170|
0000aa  7a20              LDRB     r0,[r4,#8]            ;184
0000ac  f0000002          AND      r0,r0,#2              ;184
0000b0  b138              CBZ      r0,|L9.194|
0000b2  4845              LDR      r0,|L9.456|
0000b4  1d00              ADDS     r0,r0,#4              ;186
0000b6  6800              LDR      r0,[r0,#0]            ;186
0000b8  4328              ORRS     r0,r0,r5              ;186
0000ba  4943              LDR      r1,|L9.456|
0000bc  1d09              ADDS     r1,r1,#4              ;186
0000be  6008              STR      r0,[r1,#0]            ;186
0000c0  e006              B        |L9.208|
                  |L9.194|
0000c2  4841              LDR      r0,|L9.456|
0000c4  1d00              ADDS     r0,r0,#4              ;190
0000c6  6800              LDR      r0,[r0,#0]            ;190
0000c8  43a8              BICS     r0,r0,r5              ;190
0000ca  493f              LDR      r1,|L9.456|
0000cc  1d09              ADDS     r1,r1,#4              ;190
0000ce  6008              STR      r0,[r1,#0]            ;190
                  |L9.208|
0000d0  6820              LDR      r0,[r4,#0]            ;195
0000d2  f00060c0          AND      r0,r0,#0x6000000      ;195
0000d6  f1b06fc0          CMP      r0,#0x6000000         ;195
0000da  d12d              BNE      |L9.312|
0000dc  68e0              LDR      r0,[r4,#0xc]          ;197
0000de  b158              CBZ      r0,|L9.248|
0000e0  68e0              LDR      r0,[r4,#0xc]          ;197
0000e2  2801              CMP      r0,#1                 ;197
0000e4  d008              BEQ      |L9.248|
0000e6  68e0              LDR      r0,[r4,#0xc]          ;197
0000e8  2802              CMP      r0,#2                 ;197
0000ea  d005              BEQ      |L9.248|
0000ec  68e0              LDR      r0,[r4,#0xc]          ;197
0000ee  2803              CMP      r0,#3                 ;197
0000f0  d002              BEQ      |L9.248|
0000f2  68e0              LDR      r0,[r4,#0xc]          ;197
0000f4  2804              CMP      r0,#4                 ;197
0000f6  d100              BNE      |L9.250|
                  |L9.248|
0000f8  e003              B        |L9.258|
                  |L9.250|
0000fa  21c5              MOVS     r1,#0xc5              ;197
0000fc  a023              ADR      r0,|L9.396|
0000fe  f7fffffe          BL       assert_failed
                  |L9.258|
000102  2e10              CMP      r6,#0x10              ;198
000104  d200              BCS      |L9.264|
000106  e003              B        |L9.272|
                  |L9.264|
000108  21c6              MOVS     r1,#0xc6              ;198
00010a  a020              ADR      r0,|L9.396|
00010c  f7fffffe          BL       assert_failed
                  |L9.272|
000110  482e              LDR      r0,|L9.460|
000112  08b1              LSRS     r1,r6,#2              ;200
000114  f8508021          LDR      r8,[r0,r1,LSL #2]     ;200
000118  07b0              LSLS     r0,r6,#30             ;201
00011a  0f01              LSRS     r1,r0,#28             ;201
00011c  200f              MOVS     r0,#0xf               ;201
00011e  4088              LSLS     r0,r0,r1              ;201
000120  ea280800          BIC      r8,r8,r0              ;201
000124  07b1              LSLS     r1,r6,#30             ;202
000126  0f09              LSRS     r1,r1,#28             ;202
000128  68e0              LDR      r0,[r4,#0xc]          ;202
00012a  4088              LSLS     r0,r0,r1              ;202
00012c  ea400808          ORR      r8,r0,r8              ;202
000130  4826              LDR      r0,|L9.460|
000132  08b1              LSRS     r1,r6,#2              ;203
000134  f8408021          STR      r8,[r0,r1,LSL #2]     ;203
                  |L9.312|
000138  7920              LDRB     r0,[r4,#4]            ;209
00013a  f0000001          AND      r0,r0,#1              ;209
00013e  b138              CBZ      r0,|L9.336|
000140  4821              LDR      r0,|L9.456|
000142  3808              SUBS     r0,r0,#8              ;211
000144  6800              LDR      r0,[r0,#0]            ;211
000146  4328              ORRS     r0,r0,r5              ;211
000148  491f              LDR      r1,|L9.456|
00014a  3908              SUBS     r1,r1,#8              ;211
00014c  6008              STR      r0,[r1,#0]            ;211
00014e  e006              B        |L9.350|
                  |L9.336|
000150  481d              LDR      r0,|L9.456|
000152  3808              SUBS     r0,r0,#8              ;215
000154  6800              LDR      r0,[r0,#0]            ;215
000156  43a8              BICS     r0,r0,r5              ;215
000158  491b              LDR      r1,|L9.456|
00015a  3908              SUBS     r1,r1,#8              ;215
00015c  6008              STR      r0,[r1,#0]            ;215
                  |L9.350|
00015e  7920              LDRB     r0,[r4,#4]            ;220
000160  f0000002          AND      r0,r0,#2              ;220
000164  b138              CBZ      r0,|L9.374|
000166  4818              LDR      r0,|L9.456|
000168  1f00              SUBS     r0,r0,#4              ;222
00016a  6800              LDR      r0,[r0,#0]            ;222
00016c  4328              ORRS     r0,r0,r5              ;222
00016e  4916              LDR      r1,|L9.456|
000170  1f09              SUBS     r1,r1,#4              ;222
000172  6008              STR      r0,[r1,#0]            ;222
000174  e006              B        |L9.388|
                  |L9.374|
000176  4814              LDR      r0,|L9.456|
000178  1f00              SUBS     r0,r0,#4              ;226
00017a  6800              LDR      r0,[r0,#0]            ;226
00017c  43a8              BICS     r0,r0,r5              ;226
00017e  4912              LDR      r1,|L9.456|
000180  1f09              SUBS     r1,r1,#4              ;226
000182  6008              STR      r0,[r1,#0]            ;226
                  |L9.388|
000184  2000              MOVS     r0,#0                 ;229
000186  e742              B        |L9.14|
;;;231    
                          ENDP

                  |L9.392|
                          DCD      0xf9ffffe0
                  |L9.396|
00018c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti."
000190  72697665
000194  72732f53
000198  544d3332
00019c  46317878
0001a0  5f48414c
0001a4  5f447269
0001a8  7665722f
0001ac  5372632f
0001b0  73746d33
0001b4  32663178
0001b8  785f6861
0001bc  6c5f6578
0001c0  74692e  
0001c3  6300              DCB      "c",0
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L9.456|
                          DCD      0x40010408
                  |L9.460|
                          DCD      0x40010008

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REVSH|
#line 478
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____RRX|
#line 665
|__asm___20_stm32f1xx_hal_exti_c_ad9bfa1e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
