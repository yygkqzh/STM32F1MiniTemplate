; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_flash_ex.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_flash_ex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_flash_ex.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;594      */
;;;595    static void FLASH_MassErase(uint32_t Banks)
000000  b510              PUSH     {r4,lr}
;;;596    {
000002  4604              MOV      r4,r0
;;;597      /* Check the parameters */
;;;598      assert_param(IS_FLASH_BANK(Banks));
000004  2c01              CMP      r4,#1
000006  d100              BNE      |L1.10|
000008  e004              B        |L1.20|
                  |L1.10|
00000a  f2402156          MOV      r1,#0x256
00000e  a009              ADR      r0,|L1.52|
000010  f7fffffe          BL       assert_failed
                  |L1.20|
;;;599    
;;;600      /* Clean the error context */
;;;601      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000014  2000              MOVS     r0,#0
000016  4917              LDR      r1,|L1.116|
000018  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;602    
;;;603    #if defined(FLASH_BANK2_END)
;;;604      if(Banks == FLASH_BANK_BOTH)
;;;605      {
;;;606        /* bank1 & bank2 will be erased*/
;;;607        SET_BIT(FLASH->CR, FLASH_CR_MER);
;;;608        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;609        SET_BIT(FLASH->CR, FLASH_CR_STRT);
;;;610        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;611      }
;;;612      else if(Banks == FLASH_BANK_2)
;;;613      {
;;;614        /*Only bank2 will be erased*/
;;;615        SET_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;616        SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;617      }
;;;618      else
;;;619      {
;;;620    #endif /* FLASH_BANK2_END */
;;;621    #if !defined(FLASH_BANK2_END)
;;;622      /* Prevent unused argument(s) compilation warning */
;;;623      UNUSED(Banks);
;;;624    #endif /* FLASH_BANK2_END */  
;;;625        /* Only bank1 will be erased*/
;;;626        SET_BIT(FLASH->CR, FLASH_CR_MER);
00001a  4817              LDR      r0,|L1.120|
00001c  6900              LDR      r0,[r0,#0x10]
00001e  f0400004          ORR      r0,r0,#4
000022  4915              LDR      r1,|L1.120|
000024  6108              STR      r0,[r1,#0x10]
;;;627        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000026  4608              MOV      r0,r1
000028  6900              LDR      r0,[r0,#0x10]
00002a  f0400040          ORR      r0,r0,#0x40
00002e  6108              STR      r0,[r1,#0x10]
;;;628    #if defined(FLASH_BANK2_END)
;;;629      }
;;;630    #endif /* FLASH_BANK2_END */
;;;631    }
000030  bd10              POP      {r4,pc}
;;;632    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
000034  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
000038  72697665
00003c  72732f53
000040  544d3332
000044  46317878
000048  5f48414c
00004c  5f447269
000050  7665722f
000054  5372632f
000058  73746d33
00005c  32663178
000060  785f6861
000064  6c5f666c
000068  617368  
00006b  5f65782e          DCB      "_ex.c",0
00006f  6300    
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
                          DCD      pFlash
                  |L1.120|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;766      */
;;;767    static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;768    {
000004  4604              MOV      r4,r0
;;;769      HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;770      uint16_t WRP0_Data = 0xFFFF;
000008  f64f76ff          MOV      r6,#0xffff
;;;771    #if defined(FLASH_WRP1_WRP1)
;;;772      uint16_t WRP1_Data = 0xFFFF;
00000c  4637              MOV      r7,r6
;;;773    #endif /* FLASH_WRP1_WRP1 */
;;;774    #if defined(FLASH_WRP2_WRP2)
;;;775      uint16_t WRP2_Data = 0xFFFF;
00000e  46b0              MOV      r8,r6
;;;776    #endif /* FLASH_WRP2_WRP2 */
;;;777    #if defined(FLASH_WRP3_WRP3)
;;;778      uint16_t WRP3_Data = 0xFFFF;
000010  46b1              MOV      r9,r6
;;;779    #endif /* FLASH_WRP3_WRP3 */
;;;780      
;;;781      /* Check the parameters */
;;;782      assert_param(IS_OB_WRP(WriteProtectPage));
000012  b104              CBZ      r4,|L2.22|
000014  e004              B        |L2.32|
                  |L2.22|
000016  f240310e          MOV      r1,#0x30e
00001a  a033              ADR      r0,|L2.232|
00001c  f7fffffe          BL       assert_failed
                  |L2.32|
;;;783    
;;;784      /* Get current write protected pages and the new pages to be unprotected ******/
;;;785      WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
000020  f7fffffe          BL       FLASH_OB_GetWRP
000024  4304              ORRS     r4,r4,r0
;;;786    
;;;787    #if defined(OB_WRP_PAGES0TO15MASK)
;;;788      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;789    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;790      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
000026  b2e6              UXTB     r6,r4
;;;791    #endif /* OB_WRP_PAGES0TO31MASK */
;;;792      
;;;793    #if defined(OB_WRP_PAGES16TO31MASK)
;;;794      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;795    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;796      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
000028  f3c42707          UBFX     r7,r4,#8,#8
;;;797    #endif /* OB_WRP_PAGES32TO63MASK */
;;;798     
;;;799    #if defined(OB_WRP_PAGES64TO95MASK)
;;;800      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
00002c  f3c44807          UBFX     r8,r4,#16,#8
;;;801    #endif /* OB_WRP_PAGES64TO95MASK */
;;;802    #if defined(OB_WRP_PAGES32TO47MASK)
;;;803      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;804    #endif /* OB_WRP_PAGES32TO47MASK */
;;;805    
;;;806    #if defined(OB_WRP_PAGES96TO127MASK)
;;;807      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000030  ea4f6914          LSR      r9,r4,#24
;;;808    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;809      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;810    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;811      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;812    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;813      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;814    #endif /* OB_WRP_PAGES96TO127MASK */
;;;815    
;;;816        
;;;817      /* Wait for last operation to be completed */
;;;818      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000034  f24c3050          MOV      r0,#0xc350
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4605              MOV      r5,r0
;;;819    
;;;820      if(status == HAL_OK)
00003e  2d00              CMP      r5,#0
000040  d14f              BNE      |L2.226|
;;;821      { 
;;;822        /* Clean the error context */
;;;823        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000042  4939              LDR      r1,|L2.296|
000044  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;824    
;;;825        /* To be able to write again option byte, need to perform a option byte erase */
;;;826        status = HAL_FLASHEx_OBErase();
000046  f7fffffe          BL       HAL_FLASHEx_OBErase
00004a  4605              MOV      r5,r0
;;;827        if (status == HAL_OK)  
00004c  2d00              CMP      r5,#0
00004e  d148              BNE      |L2.226|
;;;828        {
;;;829          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000050  4836              LDR      r0,|L2.300|
000052  6900              LDR      r0,[r0,#0x10]
000054  f0400010          ORR      r0,r0,#0x10
000058  4934              LDR      r1,|L2.300|
00005a  6108              STR      r0,[r1,#0x10]
;;;830    
;;;831    #if defined(FLASH_WRP0_WRP0)
;;;832          if(WRP0_Data != 0xFFU)
00005c  2eff              CMP      r6,#0xff
00005e  d009              BEQ      |L2.116|
;;;833          {
;;;834            OB->WRP0 |= WRP0_Data;
000060  4833              LDR      r0,|L2.304|
000062  8800              LDRH     r0,[r0,#0]
000064  4330              ORRS     r0,r0,r6
000066  4932              LDR      r1,|L2.304|
000068  8008              STRH     r0,[r1,#0]
;;;835            
;;;836            /* Wait for last operation to be completed */
;;;837            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00006a  f24c3050          MOV      r0,#0xc350
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4605              MOV      r5,r0
                  |L2.116|
;;;838          }
;;;839    #endif /* FLASH_WRP0_WRP0 */
;;;840    
;;;841    #if defined(FLASH_WRP1_WRP1)
;;;842          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000074  b96d              CBNZ     r5,|L2.146|
000076  2fff              CMP      r7,#0xff
000078  d00b              BEQ      |L2.146|
;;;843          {
;;;844            OB->WRP1 |= WRP1_Data;
00007a  482d              LDR      r0,|L2.304|
00007c  1c80              ADDS     r0,r0,#2
00007e  8800              LDRH     r0,[r0,#0]
000080  4338              ORRS     r0,r0,r7
000082  492b              LDR      r1,|L2.304|
000084  1c89              ADDS     r1,r1,#2
000086  8008              STRH     r0,[r1,#0]
;;;845            
;;;846            /* Wait for last operation to be completed */
;;;847            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000088  f24c3050          MOV      r0,#0xc350
00008c  f7fffffe          BL       FLASH_WaitForLastOperation
000090  4605              MOV      r5,r0
                  |L2.146|
;;;848          }
;;;849    #endif /* FLASH_WRP1_WRP1 */
;;;850    
;;;851    #if defined(FLASH_WRP2_WRP2)
;;;852          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000092  b97d              CBNZ     r5,|L2.180|
000094  f1b80fff          CMP      r8,#0xff
000098  d00c              BEQ      |L2.180|
;;;853          {
;;;854            OB->WRP2 |= WRP2_Data;
00009a  4825              LDR      r0,|L2.304|
00009c  1d00              ADDS     r0,r0,#4
00009e  8800              LDRH     r0,[r0,#0]
0000a0  ea400008          ORR      r0,r0,r8
0000a4  4922              LDR      r1,|L2.304|
0000a6  1d09              ADDS     r1,r1,#4
0000a8  8008              STRH     r0,[r1,#0]
;;;855            
;;;856            /* Wait for last operation to be completed */
;;;857            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000aa  f24c3050          MOV      r0,#0xc350
0000ae  f7fffffe          BL       FLASH_WaitForLastOperation
0000b2  4605              MOV      r5,r0
                  |L2.180|
;;;858          }
;;;859    #endif /* FLASH_WRP2_WRP2 */
;;;860    
;;;861    #if defined(FLASH_WRP3_WRP3)
;;;862          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000b4  b97d              CBNZ     r5,|L2.214|
0000b6  f1b90fff          CMP      r9,#0xff
0000ba  d00c              BEQ      |L2.214|
;;;863          {
;;;864            OB->WRP3 |= WRP3_Data;
0000bc  481c              LDR      r0,|L2.304|
0000be  1d80              ADDS     r0,r0,#6
0000c0  8800              LDRH     r0,[r0,#0]
0000c2  ea400009          ORR      r0,r0,r9
0000c6  491a              LDR      r1,|L2.304|
0000c8  1d89              ADDS     r1,r1,#6
0000ca  8008              STRH     r0,[r1,#0]
;;;865            
;;;866            /* Wait for last operation to be completed */
;;;867            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000cc  f24c3050          MOV      r0,#0xc350
0000d0  f7fffffe          BL       FLASH_WaitForLastOperation
0000d4  4605              MOV      r5,r0
                  |L2.214|
;;;868          }
;;;869    #endif /* FLASH_WRP3_WRP3 */
;;;870    
;;;871          /* if the program operation is completed, disable the OPTPG Bit */
;;;872          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000d6  4815              LDR      r0,|L2.300|
0000d8  6900              LDR      r0,[r0,#0x10]
0000da  f0200010          BIC      r0,r0,#0x10
0000de  4913              LDR      r1,|L2.300|
0000e0  6108              STR      r0,[r1,#0x10]
                  |L2.226|
;;;873        }
;;;874      }
;;;875      return status;
0000e2  4628              MOV      r0,r5
;;;876    }
0000e4  e8bd87f0          POP      {r4-r10,pc}
;;;877    
                          ENDP

                  |L2.232|
0000e8  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
0000ec  72697665
0000f0  72732f53
0000f4  544d3332
0000f8  46317878
0000fc  5f48414c
000100  5f447269
000104  7665722f
000108  5372632f
00010c  73746d33
000110  32663178
000114  785f6861
000118  6c5f666c
00011c  617368  
00011f  5f65782e          DCB      "_ex.c",0
000123  6300    
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L2.296|
                          DCD      pFlash
                  |L2.300|
                          DCD      0x40022000
                  |L2.304|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;643      */
;;;644    static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;645    {
000004  4604              MOV      r4,r0
;;;646      HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;647      uint16_t WRP0_Data = 0xFFFF;
000008  f64f76ff          MOV      r6,#0xffff
;;;648    #if defined(FLASH_WRP1_WRP1)
;;;649      uint16_t WRP1_Data = 0xFFFF;
00000c  4637              MOV      r7,r6
;;;650    #endif /* FLASH_WRP1_WRP1 */
;;;651    #if defined(FLASH_WRP2_WRP2)
;;;652      uint16_t WRP2_Data = 0xFFFF;
00000e  46b0              MOV      r8,r6
;;;653    #endif /* FLASH_WRP2_WRP2 */
;;;654    #if defined(FLASH_WRP3_WRP3)
;;;655      uint16_t WRP3_Data = 0xFFFF;
000010  46b1              MOV      r9,r6
;;;656    #endif /* FLASH_WRP3_WRP3 */
;;;657      
;;;658      /* Check the parameters */
;;;659      assert_param(IS_OB_WRP(WriteProtectPage));
000012  b104              CBZ      r4,|L3.22|
000014  e004              B        |L3.32|
                  |L3.22|
000016  f2402193          MOV      r1,#0x293
00001a  a034              ADR      r0,|L3.236|
00001c  f7fffffe          BL       assert_failed
                  |L3.32|
;;;660        
;;;661      /* Get current write protected pages and the new pages to be protected ******/
;;;662      WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
000020  f7fffffe          BL       FLASH_OB_GetWRP
000024  43c0              MVNS     r0,r0
000026  4320              ORRS     r0,r0,r4
000028  43c4              MVNS     r4,r0
;;;663      
;;;664    #if defined(OB_WRP_PAGES0TO15MASK)
;;;665      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
;;;666    #elif defined(OB_WRP_PAGES0TO31MASK)
;;;667      WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
00002a  b2e6              UXTB     r6,r4
;;;668    #endif /* OB_WRP_PAGES0TO31MASK */
;;;669      
;;;670    #if defined(OB_WRP_PAGES16TO31MASK)
;;;671      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
;;;672    #elif defined(OB_WRP_PAGES32TO63MASK)
;;;673      WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
00002c  f3c42707          UBFX     r7,r4,#8,#8
;;;674    #endif /* OB_WRP_PAGES32TO63MASK */
;;;675     
;;;676    #if defined(OB_WRP_PAGES64TO95MASK)
;;;677      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
000030  f3c44807          UBFX     r8,r4,#16,#8
;;;678    #endif /* OB_WRP_PAGES64TO95MASK */
;;;679    #if defined(OB_WRP_PAGES32TO47MASK)
;;;680      WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
;;;681    #endif /* OB_WRP_PAGES32TO47MASK */
;;;682    
;;;683    #if defined(OB_WRP_PAGES96TO127MASK)
;;;684      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
000034  ea4f6914          LSR      r9,r4,#24
;;;685    #elif defined(OB_WRP_PAGES48TO255MASK)
;;;686      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
;;;687    #elif defined(OB_WRP_PAGES48TO511MASK)
;;;688      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24U); 
;;;689    #elif defined(OB_WRP_PAGES48TO127MASK)
;;;690      WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
;;;691    #endif /* OB_WRP_PAGES96TO127MASK */
;;;692      
;;;693      /* Wait for last operation to be completed */
;;;694      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000038  f24c3050          MOV      r0,#0xc350
00003c  f7fffffe          BL       FLASH_WaitForLastOperation
000040  4605              MOV      r5,r0
;;;695    
;;;696      if(status == HAL_OK)
000042  2d00              CMP      r5,#0
000044  d14f              BNE      |L3.230|
;;;697      { 
;;;698        /* Clean the error context */
;;;699        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000046  4939              LDR      r1,|L3.300|
000048  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;700    
;;;701        /* To be able to write again option byte, need to perform a option byte erase */
;;;702        status = HAL_FLASHEx_OBErase();
00004a  f7fffffe          BL       HAL_FLASHEx_OBErase
00004e  4605              MOV      r5,r0
;;;703        if (status == HAL_OK)  
000050  2d00              CMP      r5,#0
000052  d148              BNE      |L3.230|
;;;704        {
;;;705          /* Enable write protection */
;;;706          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000054  4836              LDR      r0,|L3.304|
000056  6900              LDR      r0,[r0,#0x10]
000058  f0400010          ORR      r0,r0,#0x10
00005c  4934              LDR      r1,|L3.304|
00005e  6108              STR      r0,[r1,#0x10]
;;;707    
;;;708    #if defined(FLASH_WRP0_WRP0)
;;;709          if(WRP0_Data != 0xFFU)
000060  2eff              CMP      r6,#0xff
000062  d009              BEQ      |L3.120|
;;;710          {
;;;711            OB->WRP0 &= WRP0_Data;
000064  4833              LDR      r0,|L3.308|
000066  8800              LDRH     r0,[r0,#0]
000068  4030              ANDS     r0,r0,r6
00006a  4932              LDR      r1,|L3.308|
00006c  8008              STRH     r0,[r1,#0]
;;;712            
;;;713            /* Wait for last operation to be completed */
;;;714            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00006e  f24c3050          MOV      r0,#0xc350
000072  f7fffffe          BL       FLASH_WaitForLastOperation
000076  4605              MOV      r5,r0
                  |L3.120|
;;;715          }
;;;716    #endif /* FLASH_WRP0_WRP0 */
;;;717    
;;;718    #if defined(FLASH_WRP1_WRP1)
;;;719          if((status == HAL_OK) && (WRP1_Data != 0xFFU))
000078  b96d              CBNZ     r5,|L3.150|
00007a  2fff              CMP      r7,#0xff
00007c  d00b              BEQ      |L3.150|
;;;720          {
;;;721            OB->WRP1 &= WRP1_Data;
00007e  482d              LDR      r0,|L3.308|
000080  1c80              ADDS     r0,r0,#2
000082  8800              LDRH     r0,[r0,#0]
000084  4038              ANDS     r0,r0,r7
000086  492b              LDR      r1,|L3.308|
000088  1c89              ADDS     r1,r1,#2
00008a  8008              STRH     r0,[r1,#0]
;;;722            
;;;723            /* Wait for last operation to be completed */
;;;724            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00008c  f24c3050          MOV      r0,#0xc350
000090  f7fffffe          BL       FLASH_WaitForLastOperation
000094  4605              MOV      r5,r0
                  |L3.150|
;;;725          }
;;;726    #endif /* FLASH_WRP1_WRP1 */
;;;727    
;;;728    #if defined(FLASH_WRP2_WRP2)
;;;729          if((status == HAL_OK) && (WRP2_Data != 0xFFU))
000096  b97d              CBNZ     r5,|L3.184|
000098  f1b80fff          CMP      r8,#0xff
00009c  d00c              BEQ      |L3.184|
;;;730          {
;;;731            OB->WRP2 &= WRP2_Data;
00009e  4825              LDR      r0,|L3.308|
0000a0  1d00              ADDS     r0,r0,#4
0000a2  8800              LDRH     r0,[r0,#0]
0000a4  ea000008          AND      r0,r0,r8
0000a8  4922              LDR      r1,|L3.308|
0000aa  1d09              ADDS     r1,r1,#4
0000ac  8008              STRH     r0,[r1,#0]
;;;732            
;;;733            /* Wait for last operation to be completed */
;;;734            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000ae  f24c3050          MOV      r0,#0xc350
0000b2  f7fffffe          BL       FLASH_WaitForLastOperation
0000b6  4605              MOV      r5,r0
                  |L3.184|
;;;735          }
;;;736    #endif /* FLASH_WRP2_WRP2 */
;;;737    
;;;738    #if defined(FLASH_WRP3_WRP3)
;;;739          if((status == HAL_OK) && (WRP3_Data != 0xFFU))
0000b8  b97d              CBNZ     r5,|L3.218|
0000ba  f1b90fff          CMP      r9,#0xff
0000be  d00c              BEQ      |L3.218|
;;;740          {
;;;741            OB->WRP3 &= WRP3_Data;
0000c0  481c              LDR      r0,|L3.308|
0000c2  1d80              ADDS     r0,r0,#6
0000c4  8800              LDRH     r0,[r0,#0]
0000c6  ea000009          AND      r0,r0,r9
0000ca  491a              LDR      r1,|L3.308|
0000cc  1d89              ADDS     r1,r1,#6
0000ce  8008              STRH     r0,[r1,#0]
;;;742            
;;;743            /* Wait for last operation to be completed */
;;;744            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000d0  f24c3050          MOV      r0,#0xc350
0000d4  f7fffffe          BL       FLASH_WaitForLastOperation
0000d8  4605              MOV      r5,r0
                  |L3.218|
;;;745          }
;;;746    #endif /* FLASH_WRP3_WRP3 */
;;;747    
;;;748          /* if the program operation is completed, disable the OPTPG Bit */
;;;749          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
0000da  4815              LDR      r0,|L3.304|
0000dc  6900              LDR      r0,[r0,#0x10]
0000de  f0200010          BIC      r0,r0,#0x10
0000e2  4913              LDR      r1,|L3.304|
0000e4  6108              STR      r0,[r1,#0x10]
                  |L3.230|
;;;750        }
;;;751      }
;;;752      
;;;753      return status;
0000e6  4628              MOV      r0,r5
;;;754    }
0000e8  e8bd87f0          POP      {r4-r10,pc}
;;;755    
                          ENDP

                  |L3.236|
0000ec  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
0000f0  72697665
0000f4  72732f53
0000f8  544d3332
0000fc  46317878
000100  5f48414c
000104  5f447269
000108  7665722f
00010c  5372632f
000110  73746d33
000114  32663178
000118  785f6861
00011c  6c5f666c
000120  617368  
000123  5f65782e          DCB      "_ex.c",0
000127  6300    
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L3.300|
                          DCD      pFlash
                  |L3.304|
                          DCD      0x40022000
                  |L3.308|
                          DCD      0x1ffff808

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1033     */
;;;1034   static uint32_t FLASH_OB_GetRDP(void)
000000  20a5              MOVS     r0,#0xa5
;;;1035   {
;;;1036     uint32_t readstatus = OB_RDP_LEVEL_0;
;;;1037     uint32_t tmp_reg = 0U;
000002  2100              MOVS     r1,#0
;;;1038     
;;;1039     /* Read RDP level bits */
;;;1040     tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
000004  4a04              LDR      r2,|L4.24|
000006  69d2              LDR      r2,[r2,#0x1c]
000008  f0020102          AND      r1,r2,#2
;;;1041   
;;;1042     if (tmp_reg == FLASH_OBR_RDPRT)
00000c  2902              CMP      r1,#2
00000e  d101              BNE      |L4.20|
;;;1043     {
;;;1044       readstatus = OB_RDP_LEVEL_1;
000010  2000              MOVS     r0,#0
000012  e000              B        |L4.22|
                  |L4.20|
;;;1045     }
;;;1046     else 
;;;1047     {
;;;1048       readstatus = OB_RDP_LEVEL_0;
000014  20a5              MOVS     r0,#0xa5
                  |L4.22|
;;;1049     }
;;;1050   
;;;1051     return readstatus;
;;;1052   }
000016  4770              BX       lr
;;;1053   
                          ENDP

                  |L4.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1059     */
;;;1060   static uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L5.12|
;;;1061   {
;;;1062     /* Return the User Option Byte */
;;;1063     return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
000002  69c0              LDR      r0,[r0,#0x1c]
000004  f3c00082          UBFX     r0,r0,#2,#3
;;;1064   }
000008  4770              BX       lr
;;;1065   
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1020     */
;;;1021   static uint32_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L6.8|
;;;1022   {
;;;1023     /* Return the FLASH write protection Register value */
;;;1024     return (uint32_t)(READ_REG(FLASH->WRPR));
000002  6a00              LDR      r0,[r0,#0x20]
;;;1025   }
000004  4770              BX       lr
;;;1026   
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_ProgramData||, CODE, READONLY, ALIGN=2

                  FLASH_OB_ProgramData PROC
;;;987      */
;;;988    static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;989    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;990      HAL_StatusTypeDef status = HAL_ERROR;
000006  2601              MOVS     r6,#1
;;;991      
;;;992      /* Check the parameters */
;;;993      assert_param(IS_OB_DATA_ADDRESS(Address));
000008  4814              LDR      r0,|L7.92|
00000a  4284              CMP      r4,r0
00000c  d002              BEQ      |L7.20|
00000e  1c80              ADDS     r0,r0,#2
000010  4284              CMP      r4,r0
000012  d100              BNE      |L7.22|
                  |L7.20|
000014  e004              B        |L7.32|
                  |L7.22|
000016  f24031e1          MOV      r1,#0x3e1
00001a  a011              ADR      r0,|L7.96|
00001c  f7fffffe          BL       assert_failed
                  |L7.32|
;;;994      
;;;995      /* Wait for last operation to be completed */
;;;996      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000020  f24c3050          MOV      r0,#0xc350
000024  f7fffffe          BL       FLASH_WaitForLastOperation
000028  4606              MOV      r6,r0
;;;997      
;;;998      if(status == HAL_OK)
00002a  b9a6              CBNZ     r6,|L7.86|
;;;999      {
;;;1000       /* Clean the error context */
;;;1001       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
00002c  2000              MOVS     r0,#0
00002e  491c              LDR      r1,|L7.160|
000030  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;1002   
;;;1003       /* Enables the Option Bytes Programming operation */
;;;1004       SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000032  481c              LDR      r0,|L7.164|
000034  6900              LDR      r0,[r0,#0x10]
000036  f0400010          ORR      r0,r0,#0x10
00003a  491a              LDR      r1,|L7.164|
00003c  6108              STR      r0,[r1,#0x10]
;;;1005       *(__IO uint16_t*)Address = Data;
00003e  8025              STRH     r5,[r4,#0]
;;;1006       
;;;1007       /* Wait for last operation to be completed */
;;;1008       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000040  f24c3050          MOV      r0,#0xc350
000044  f7fffffe          BL       FLASH_WaitForLastOperation
000048  4606              MOV      r6,r0
;;;1009       
;;;1010       /* If the program operation is completed, disable the OPTPG Bit */
;;;1011       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
00004a  4816              LDR      r0,|L7.164|
00004c  6900              LDR      r0,[r0,#0x10]
00004e  f0200010          BIC      r0,r0,#0x10
000052  4914              LDR      r1,|L7.164|
000054  6108              STR      r0,[r1,#0x10]
                  |L7.86|
;;;1012     }
;;;1013     /* Return the Option Byte Data Program Status */
;;;1014     return status;
000056  4630              MOV      r0,r6
;;;1015   }
000058  bd70              POP      {r4-r6,pc}
;;;1016   
                          ENDP

00005a  0000              DCW      0x0000
                  |L7.92|
                          DCD      0x1ffff804
                  |L7.96|
000060  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
000064  72697665
000068  72732f53
00006c  544d3332
000070  46317878
000074  5f48414c
000078  5f447269
00007c  7665722f
000080  5372632f
000084  73746d33
000088  32663178
00008c  785f6861
000090  6c5f666c
000094  617368  
000097  5f65782e          DCB      "_ex.c",0
00009b  6300    
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L7.160|
                          DCD      pFlash
                  |L7.164|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;885      */
;;;886    static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;887    {
000002  4604              MOV      r4,r0
;;;888      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;889      
;;;890      /* Check the parameters */
;;;891      assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
000006  2ca5              CMP      r4,#0xa5
000008  d000              BEQ      |L8.12|
00000a  b904              CBNZ     r4,|L8.14|
                  |L8.12|
00000c  e004              B        |L8.24|
                  |L8.14|
00000e  f240317b          MOV      r1,#0x37b
000012  a01b              ADR      r0,|L8.128|
000014  f7fffffe          BL       assert_failed
                  |L8.24|
;;;892      
;;;893      /* Wait for last operation to be completed */
;;;894      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000018  f24c3050          MOV      r0,#0xc350
00001c  f7fffffe          BL       FLASH_WaitForLastOperation
000020  4605              MOV      r5,r0
;;;895      
;;;896      if(status == HAL_OK)
000022  bb5d              CBNZ     r5,|L8.124|
;;;897      { 
;;;898        /* Clean the error context */
;;;899        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000024  2000              MOVS     r0,#0
000026  4926              LDR      r1,|L8.192|
000028  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;900        
;;;901        /* If the previous operation is completed, proceed to erase the option bytes */
;;;902        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00002a  4826              LDR      r0,|L8.196|
00002c  6900              LDR      r0,[r0,#0x10]
00002e  f0400020          ORR      r0,r0,#0x20
000032  4924              LDR      r1,|L8.196|
000034  6108              STR      r0,[r1,#0x10]
;;;903        SET_BIT(FLASH->CR, FLASH_CR_STRT);
000036  4608              MOV      r0,r1
000038  6900              LDR      r0,[r0,#0x10]
00003a  f0400040          ORR      r0,r0,#0x40
00003e  6108              STR      r0,[r1,#0x10]
;;;904    
;;;905        /* Wait for last operation to be completed */
;;;906        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000040  f24c3050          MOV      r0,#0xc350
000044  f7fffffe          BL       FLASH_WaitForLastOperation
000048  4605              MOV      r5,r0
;;;907    
;;;908        /* If the erase operation is completed, disable the OPTER Bit */
;;;909        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00004a  481e              LDR      r0,|L8.196|
00004c  6900              LDR      r0,[r0,#0x10]
00004e  f0200020          BIC      r0,r0,#0x20
000052  491c              LDR      r1,|L8.196|
000054  6108              STR      r0,[r1,#0x10]
;;;910    
;;;911        if(status == HAL_OK)
000056  b98d              CBNZ     r5,|L8.124|
;;;912        {
;;;913          /* Enable the Option Bytes Programming operation */
;;;914          SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
000058  4608              MOV      r0,r1
00005a  6900              LDR      r0,[r0,#0x10]
00005c  f0400010          ORR      r0,r0,#0x10
000060  6108              STR      r0,[r1,#0x10]
;;;915          
;;;916          WRITE_REG(OB->RDP, ReadProtectLevel);
000062  4819              LDR      r0,|L8.200|
000064  8004              STRH     r4,[r0,#0]
;;;917          
;;;918          /* Wait for last operation to be completed */
;;;919          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
000066  f24c3050          MOV      r0,#0xc350
00006a  f7fffffe          BL       FLASH_WaitForLastOperation
00006e  4605              MOV      r5,r0
;;;920          
;;;921          /* if the program operation is completed, disable the OPTPG Bit */
;;;922          CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000070  4814              LDR      r0,|L8.196|
000072  6900              LDR      r0,[r0,#0x10]
000074  f0200010          BIC      r0,r0,#0x10
000078  4912              LDR      r1,|L8.196|
00007a  6108              STR      r0,[r1,#0x10]
                  |L8.124|
;;;923        }
;;;924      }
;;;925      
;;;926      return status;
00007c  4628              MOV      r0,r5
;;;927    }
00007e  bd70              POP      {r4-r6,pc}
;;;928    
                          ENDP

                  |L8.128|
000080  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
000084  72697665
000088  72732f53
00008c  544d3332
000090  46317878
000094  5f48414c
000098  5f447269
00009c  7665722f
0000a0  5372632f
0000a4  73746d33
0000a8  32663178
0000ac  785f6861
0000b0  6c5f666c
0000b4  617368  
0000b7  5f65782e          DCB      "_ex.c",0
0000bb  6300    
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L8.192|
                          DCD      pFlash
                  |L8.196|
                          DCD      0x40022000
                  |L8.200|
                          DCD      0x1ffff800

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;936      */
;;;937    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;938    {
000002  4604              MOV      r4,r0
;;;939      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;940    
;;;941      /* Check the parameters */
;;;942      assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
000006  f0040001          AND      r0,r4,#1
00000a  b910              CBNZ     r0,|L9.18|
00000c  f0040001          AND      r0,r4,#1
000010  b900              CBNZ     r0,|L9.20|
                  |L9.18|
000012  e004              B        |L9.30|
                  |L9.20|
000014  f24031ae          MOV      r1,#0x3ae
000018  a01e              ADR      r0,|L9.148|
00001a  f7fffffe          BL       assert_failed
                  |L9.30|
;;;943      assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
00001e  f0040002          AND      r0,r4,#2
000022  2802              CMP      r0,#2
000024  d002              BEQ      |L9.44|
000026  f0040002          AND      r0,r4,#2
00002a  b900              CBNZ     r0,|L9.46|
                  |L9.44|
00002c  e004              B        |L9.56|
                  |L9.46|
00002e  f24031af          MOV      r1,#0x3af
000032  a018              ADR      r0,|L9.148|
000034  f7fffffe          BL       assert_failed
                  |L9.56|
;;;944      assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
000038  f0040004          AND      r0,r4,#4
00003c  2804              CMP      r0,#4
00003e  d002              BEQ      |L9.70|
000040  f0040004          AND      r0,r4,#4
000044  b900              CBNZ     r0,|L9.72|
                  |L9.70|
000046  e004              B        |L9.82|
                  |L9.72|
000048  f44f716c          MOV      r1,#0x3b0
00004c  a011              ADR      r0,|L9.148|
00004e  f7fffffe          BL       assert_failed
                  |L9.82|
;;;945    #if defined(FLASH_BANK2_END)
;;;946      assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
;;;947    #endif /* FLASH_BANK2_END */
;;;948    
;;;949      /* Wait for last operation to be completed */
;;;950      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000052  f24c3050          MOV      r0,#0xc350
000056  f7fffffe          BL       FLASH_WaitForLastOperation
00005a  4605              MOV      r5,r0
;;;951      
;;;952      if(status == HAL_OK)
00005c  b9bd              CBNZ     r5,|L9.142|
;;;953      {     
;;;954        /* Clean the error context */
;;;955        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
00005e  2000              MOVS     r0,#0
000060  491c              LDR      r1,|L9.212|
000062  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;956    
;;;957        /* Enable the Option Bytes Programming operation */
;;;958        SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
000064  481c              LDR      r0,|L9.216|
000066  6900              LDR      r0,[r0,#0x10]
000068  f0400010          ORR      r0,r0,#0x10
00006c  491a              LDR      r1,|L9.216|
00006e  6108              STR      r0,[r1,#0x10]
;;;959     
;;;960    #if defined(FLASH_BANK2_END)
;;;961        OB->USER = (UserConfig | 0xF0U);
;;;962    #else
;;;963        OB->USER = (UserConfig | 0x88U);
000070  f0440088          ORR      r0,r4,#0x88
000074  4919              LDR      r1,|L9.220|
000076  8008              STRH     r0,[r1,#0]
;;;964    #endif /* FLASH_BANK2_END */
;;;965    
;;;966        /* Wait for last operation to be completed */
;;;967        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000078  f24c3050          MOV      r0,#0xc350
00007c  f7fffffe          BL       FLASH_WaitForLastOperation
000080  4605              MOV      r5,r0
;;;968    
;;;969        /* if the program operation is completed, disable the OPTPG Bit */
;;;970        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
000082  4815              LDR      r0,|L9.216|
000084  6900              LDR      r0,[r0,#0x10]
000086  f0200010          BIC      r0,r0,#0x10
00008a  4913              LDR      r1,|L9.216|
00008c  6108              STR      r0,[r1,#0x10]
                  |L9.142|
;;;971      }
;;;972      
;;;973      return status; 
00008e  4628              MOV      r0,r5
;;;974    }
000090  bd70              POP      {r4-r6,pc}
;;;975    
                          ENDP

000092  0000              DCW      0x0000
                  |L9.148|
000094  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
000098  72697665
00009c  72732f53
0000a0  544d3332
0000a4  46317878
0000a8  5f48414c
0000ac  5f447269
0000b0  7665722f
0000b4  5372632f
0000b8  73746d33
0000bc  32663178
0000c0  785f6861
0000c4  6c5f666c
0000c8  617368  
0000cb  5f65782e          DCB      "_ex.c",0
0000cf  6300    
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L9.212|
                          DCD      pFlash
                  |L9.216|
                          DCD      0x40022000
                  |L9.220|
                          DCD      0x1ffff802

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;1088     */
;;;1089   void FLASH_PageErase(uint32_t PageAddress)
000000  2100              MOVS     r1,#0
;;;1090   {
;;;1091     /* Clean the error context */
;;;1092     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4a07              LDR      r2,|L10.32|
000004  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;1093   
;;;1094   #if defined(FLASH_BANK2_END)
;;;1095     if(PageAddress > FLASH_BANK1_END)
;;;1096     { 
;;;1097       /* Proceed to erase the page */
;;;1098       SET_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;1099       WRITE_REG(FLASH->AR2, PageAddress);
;;;1100       SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
;;;1101     }
;;;1102     else
;;;1103     {
;;;1104   #endif /* FLASH_BANK2_END */
;;;1105       /* Proceed to erase the page */
;;;1106       SET_BIT(FLASH->CR, FLASH_CR_PER);
000006  4907              LDR      r1,|L10.36|
000008  6909              LDR      r1,[r1,#0x10]
00000a  f0410102          ORR      r1,r1,#2
00000e  4a05              LDR      r2,|L10.36|
000010  6111              STR      r1,[r2,#0x10]
;;;1107       WRITE_REG(FLASH->AR, PageAddress);
000012  4611              MOV      r1,r2
000014  6148              STR      r0,[r1,#0x14]
;;;1108       SET_BIT(FLASH->CR, FLASH_CR_STRT);
000016  6909              LDR      r1,[r1,#0x10]
000018  f0410140          ORR      r1,r1,#0x40
00001c  6111              STR      r1,[r2,#0x10]
;;;1109   #if defined(FLASH_BANK2_END)
;;;1110     }
;;;1111   #endif /* FLASH_BANK2_END */
;;;1112   }
00001e  4770              BX       lr
;;;1113   
                          ENDP

                  |L10.32|
                          DCD      pFlash
                  |L10.36|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;160    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;161      HAL_StatusTypeDef status = HAL_ERROR;
000008  2701              MOVS     r7,#1
;;;162      uint32_t address = 0U;
00000a  2500              MOVS     r5,#0
;;;163    
;;;164      /* Process Locked */
;;;165      __HAL_LOCK(&pFlash);
00000c  bf00              NOP      
00000e  4867              LDR      r0,|L11.428|
000010  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000012  2801              CMP      r0,#1
000014  d102              BNE      |L11.28|
000016  2002              MOVS     r0,#2
                  |L11.24|
;;;166    
;;;167      /* Check the parameters */
;;;168      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;169    
;;;170      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;171      {
;;;172    #if defined(FLASH_BANK2_END)
;;;173        if (pEraseInit->Banks == FLASH_BANK_BOTH)
;;;174        {
;;;175          /* Mass Erase requested for Bank1 and Bank2 */
;;;176          /* Wait for last operation to be completed */
;;;177          if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;178              (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;179          {
;;;180            /*Mass erase to be done*/
;;;181            FLASH_MassErase(FLASH_BANK_BOTH);
;;;182            
;;;183            /* Wait for last operation to be completed */
;;;184            if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
;;;185                (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
;;;186            {
;;;187              status = HAL_OK;
;;;188            }
;;;189            
;;;190            /* If the erase operation is completed, disable the MER Bit */
;;;191            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;192            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;193          }
;;;194        }
;;;195        else if (pEraseInit->Banks == FLASH_BANK_2)
;;;196        {
;;;197          /* Mass Erase requested for Bank2 */
;;;198          /* Wait for last operation to be completed */
;;;199          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;200          {
;;;201            /*Mass erase to be done*/
;;;202            FLASH_MassErase(FLASH_BANK_2);
;;;203            
;;;204            /* Wait for last operation to be completed */
;;;205            status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;206            
;;;207            /* If the erase operation is completed, disable the MER Bit */
;;;208            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;209          }
;;;210        }
;;;211        else 
;;;212    #endif /* FLASH_BANK2_END */
;;;213        {
;;;214          /* Mass Erase requested for Bank1 */
;;;215          /* Wait for last operation to be completed */
;;;216          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;217          {
;;;218            /*Mass erase to be done*/
;;;219            FLASH_MassErase(FLASH_BANK_1);
;;;220            
;;;221            /* Wait for last operation to be completed */
;;;222            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;223            
;;;224            /* If the erase operation is completed, disable the MER Bit */
;;;225            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
;;;226          }
;;;227        }
;;;228      }
;;;229      else
;;;230      {
;;;231        /* Page Erase is requested */
;;;232        /* Check the parameters */
;;;233        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;234        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;235        
;;;236    #if defined(FLASH_BANK2_END)
;;;237        /* Page Erase requested on address located on bank2 */
;;;238        if(pEraseInit->PageAddress > FLASH_BANK1_END)
;;;239        {   
;;;240          /* Wait for last operation to be completed */
;;;241          if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;242          {
;;;243            /*Initialization of PageError variable*/
;;;244            *PageError = 0xFFFFFFFFU;
;;;245            
;;;246            /* Erase by page by page to be done*/
;;;247            for(address = pEraseInit->PageAddress;
;;;248                address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
;;;249                address += FLASH_PAGE_SIZE)
;;;250            {
;;;251              FLASH_PageErase(address);
;;;252              
;;;253              /* Wait for last operation to be completed */
;;;254              status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
;;;255              
;;;256              /* If the erase operation is completed, disable the PER Bit */
;;;257              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;258              
;;;259              if (status != HAL_OK)
;;;260              {
;;;261                /* In case of error, stop erase procedure and return the faulty address */
;;;262                *PageError = address;
;;;263                break;
;;;264              }
;;;265            }
;;;266          }
;;;267        }
;;;268        else
;;;269    #endif /* FLASH_BANK2_END */
;;;270       {
;;;271          /* Page Erase requested on address located on bank1 */
;;;272          /* Wait for last operation to be completed */
;;;273          if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
;;;274          {
;;;275            /*Initialization of PageError variable*/
;;;276            *PageError = 0xFFFFFFFFU;
;;;277            
;;;278            /* Erase page by page to be done*/
;;;279            for(address = pEraseInit->PageAddress;
;;;280                address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
;;;281                address += FLASH_PAGE_SIZE)
;;;282            {
;;;283              FLASH_PageErase(address);
;;;284              
;;;285              /* Wait for last operation to be completed */
;;;286              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;287              
;;;288              /* If the erase operation is completed, disable the PER Bit */
;;;289              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
;;;290              
;;;291              if (status != HAL_OK)
;;;292              {
;;;293                /* In case of error, stop erase procedure and return the faulty address */
;;;294                *PageError = address;
;;;295                break;
;;;296              }
;;;297            }
;;;298          }
;;;299        }
;;;300      }
;;;301    
;;;302      /* Process Unlocked */
;;;303      __HAL_UNLOCK(&pFlash);
;;;304    
;;;305      return status;
;;;306    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L11.28|
00001c  2001              MOVS     r0,#1                 ;165
00001e  4963              LDR      r1,|L11.428|
000020  7608              STRB     r0,[r1,#0x18]         ;165
000022  bf00              NOP                            ;165
000024  6820              LDR      r0,[r4,#0]            ;168
000026  b110              CBZ      r0,|L11.46|
000028  6820              LDR      r0,[r4,#0]            ;168
00002a  2802              CMP      r0,#2                 ;168
00002c  d100              BNE      |L11.48|
                  |L11.46|
00002e  e003              B        |L11.56|
                  |L11.48|
000030  21a8              MOVS     r1,#0xa8              ;168
000032  a05f              ADR      r0,|L11.432|
000034  f7fffffe          BL       assert_failed
                  |L11.56|
000038  6820              LDR      r0,[r4,#0]            ;170
00003a  2802              CMP      r0,#2                 ;170
00003c  d114              BNE      |L11.104|
00003e  f24c3050          MOV      r0,#0xc350            ;216
000042  f7fffffe          BL       FLASH_WaitForLastOperation
000046  2800              CMP      r0,#0                 ;216
000048  d10d              BNE      |L11.102|
00004a  2001              MOVS     r0,#1                 ;219
00004c  f7fffffe          BL       FLASH_MassErase
000050  f24c3050          MOV      r0,#0xc350            ;222
000054  f7fffffe          BL       FLASH_WaitForLastOperation
000058  4607              MOV      r7,r0                 ;222
00005a  4865              LDR      r0,|L11.496|
00005c  6900              LDR      r0,[r0,#0x10]         ;225
00005e  f0200004          BIC      r0,r0,#4              ;225
000062  4963              LDR      r1,|L11.496|
000064  6108              STR      r0,[r1,#0x10]         ;225
                  |L11.102|
000066  e099              B        |L11.412|
                  |L11.104|
000068  68a0              LDR      r0,[r4,#8]            ;233
00006a  f1b06f00          CMP      r0,#0x8000000         ;233
00006e  d32c              BCC      |L11.202|
000070  4860              LDR      r0,|L11.500|
000072  8800              LDRH     r0,[r0,#0]            ;233
000074  2880              CMP      r0,#0x80              ;233
000076  d107              BNE      |L11.136|
000078  495f              LDR      r1,|L11.504|
00007a  68a0              LDR      r0,[r4,#8]            ;233
00007c  4288              CMP      r0,r1                 ;233
00007e  d801              BHI      |L11.132|
000080  2001              MOVS     r0,#1                 ;233
000082  e020              B        |L11.198|
                  |L11.132|
000084  2000              MOVS     r0,#0                 ;233
000086  e01e              B        |L11.198|
                  |L11.136|
000088  485a              LDR      r0,|L11.500|
00008a  8800              LDRH     r0,[r0,#0]            ;233
00008c  2840              CMP      r0,#0x40              ;233
00008e  d107              BNE      |L11.160|
000090  495a              LDR      r1,|L11.508|
000092  68a0              LDR      r0,[r4,#8]            ;233
000094  4288              CMP      r0,r1                 ;233
000096  d801              BHI      |L11.156|
000098  2001              MOVS     r0,#1                 ;233
00009a  e014              B        |L11.198|
                  |L11.156|
00009c  2000              MOVS     r0,#0                 ;233
00009e  e012              B        |L11.198|
                  |L11.160|
0000a0  4854              LDR      r0,|L11.500|
0000a2  8800              LDRH     r0,[r0,#0]            ;233
0000a4  2820              CMP      r0,#0x20              ;233
0000a6  d107              BNE      |L11.184|
0000a8  4955              LDR      r1,|L11.512|
0000aa  68a0              LDR      r0,[r4,#8]            ;233
0000ac  4288              CMP      r0,r1                 ;233
0000ae  d801              BHI      |L11.180|
0000b0  2001              MOVS     r0,#1                 ;233
0000b2  e008              B        |L11.198|
                  |L11.180|
0000b4  2000              MOVS     r0,#0                 ;233
0000b6  e006              B        |L11.198|
                  |L11.184|
0000b8  4952              LDR      r1,|L11.516|
0000ba  68a0              LDR      r0,[r4,#8]            ;233
0000bc  4288              CMP      r0,r1                 ;233
0000be  d801              BHI      |L11.196|
0000c0  2001              MOVS     r0,#1                 ;233
0000c2  e000              B        |L11.198|
                  |L11.196|
0000c4  2000              MOVS     r0,#0                 ;233
                  |L11.198|
0000c6  b100              CBZ      r0,|L11.202|
0000c8  e003              B        |L11.210|
                  |L11.202|
0000ca  21e9              MOVS     r1,#0xe9              ;233
0000cc  a038              ADR      r0,|L11.432|
0000ce  f7fffffe          BL       assert_failed
                  |L11.210|
0000d2  4848              LDR      r0,|L11.500|
0000d4  8800              LDRH     r0,[r0,#0]            ;234
0000d6  2880              CMP      r0,#0x80              ;234
0000d8  d10b              BNE      |L11.242|
0000da  e9d41002          LDRD     r1,r0,[r4,#8]         ;234
0000de  eb012080          ADD      r0,r1,r0,LSL #10      ;234
0000e2  1e40              SUBS     r0,r0,#1              ;234
0000e4  4944              LDR      r1,|L11.504|
0000e6  4288              CMP      r0,r1                 ;234
0000e8  d801              BHI      |L11.238|
0000ea  2001              MOVS     r0,#1                 ;234
0000ec  e02c              B        |L11.328|
                  |L11.238|
0000ee  2000              MOVS     r0,#0                 ;234
0000f0  e02a              B        |L11.328|
                  |L11.242|
0000f2  4840              LDR      r0,|L11.500|
0000f4  8800              LDRH     r0,[r0,#0]            ;234
0000f6  2840              CMP      r0,#0x40              ;234
0000f8  d10b              BNE      |L11.274|
0000fa  e9d41002          LDRD     r1,r0,[r4,#8]         ;234
0000fe  eb012080          ADD      r0,r1,r0,LSL #10      ;234
000102  1e40              SUBS     r0,r0,#1              ;234
000104  493d              LDR      r1,|L11.508|
000106  4288              CMP      r0,r1                 ;234
000108  d801              BHI      |L11.270|
00010a  2001              MOVS     r0,#1                 ;234
00010c  e01c              B        |L11.328|
                  |L11.270|
00010e  2000              MOVS     r0,#0                 ;234
000110  e01a              B        |L11.328|
                  |L11.274|
000112  4838              LDR      r0,|L11.500|
000114  8800              LDRH     r0,[r0,#0]            ;234
000116  2820              CMP      r0,#0x20              ;234
000118  d10b              BNE      |L11.306|
00011a  e9d41002          LDRD     r1,r0,[r4,#8]         ;234
00011e  eb012080          ADD      r0,r1,r0,LSL #10      ;234
000122  1e40              SUBS     r0,r0,#1              ;234
000124  4936              LDR      r1,|L11.512|
000126  4288              CMP      r0,r1                 ;234
000128  d801              BHI      |L11.302|
00012a  2001              MOVS     r0,#1                 ;234
00012c  e00c              B        |L11.328|
                  |L11.302|
00012e  2000              MOVS     r0,#0                 ;234
000130  e00a              B        |L11.328|
                  |L11.306|
000132  e9d41002          LDRD     r1,r0,[r4,#8]         ;234
000136  eb012080          ADD      r0,r1,r0,LSL #10      ;234
00013a  1e40              SUBS     r0,r0,#1              ;234
00013c  4931              LDR      r1,|L11.516|
00013e  4288              CMP      r0,r1                 ;234
000140  d801              BHI      |L11.326|
000142  2001              MOVS     r0,#1                 ;234
000144  e000              B        |L11.328|
                  |L11.326|
000146  2000              MOVS     r0,#0                 ;234
                  |L11.328|
000148  b100              CBZ      r0,|L11.332|
00014a  e003              B        |L11.340|
                  |L11.332|
00014c  21ea              MOVS     r1,#0xea              ;234
00014e  a018              ADR      r0,|L11.432|
000150  f7fffffe          BL       assert_failed
                  |L11.340|
000154  f24c3050          MOV      r0,#0xc350            ;273
000158  f7fffffe          BL       FLASH_WaitForLastOperation
00015c  b9f0              CBNZ     r0,|L11.412|
00015e  f04f30ff          MOV      r0,#0xffffffff        ;276
000162  6030              STR      r0,[r6,#0]            ;276
000164  68a5              LDR      r5,[r4,#8]            ;279
000166  e012              B        |L11.398|
                  |L11.360|
000168  4628              MOV      r0,r5                 ;283
00016a  f7fffffe          BL       FLASH_PageErase
00016e  f24c3050          MOV      r0,#0xc350            ;286
000172  f7fffffe          BL       FLASH_WaitForLastOperation
000176  4607              MOV      r7,r0                 ;286
000178  481d              LDR      r0,|L11.496|
00017a  6900              LDR      r0,[r0,#0x10]         ;289
00017c  f0200002          BIC      r0,r0,#2              ;289
000180  491b              LDR      r1,|L11.496|
000182  6108              STR      r0,[r1,#0x10]         ;289
000184  b10f              CBZ      r7,|L11.394|
000186  6035              STR      r5,[r6,#0]            ;294
000188  e007              B        |L11.410|
                  |L11.394|
00018a  f5056580          ADD      r5,r5,#0x400          ;281
                  |L11.398|
00018e  e9d41002          LDRD     r1,r0,[r4,#8]         ;280
000192  eb012080          ADD      r0,r1,r0,LSL #10      ;280
000196  42a8              CMP      r0,r5                 ;280
000198  d8e6              BHI      |L11.360|
                  |L11.410|
00019a  bf00              NOP                            ;295
                  |L11.412|
00019c  bf00              NOP                            ;303
00019e  2000              MOVS     r0,#0                 ;303
0001a0  4902              LDR      r1,|L11.428|
0001a2  7608              STRB     r0,[r1,#0x18]         ;303
0001a4  bf00              NOP                            ;303
0001a6  4638              MOV      r0,r7                 ;305
0001a8  e736              B        |L11.24|
;;;307    
                          ENDP

0001aa  0000              DCW      0x0000
                  |L11.428|
                          DCD      pFlash
                  |L11.432|
0001b0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
0001b4  72697665
0001b8  72732f53
0001bc  544d3332
0001c0  46317878
0001c4  5f48414c
0001c8  5f447269
0001cc  7665722f
0001d0  5372632f
0001d4  73746d33
0001d8  32663178
0001dc  785f6861
0001e0  6c5f666c
0001e4  617368  
0001e7  5f65782e          DCB      "_ex.c",0
0001eb  6300    
0001ed  00                DCB      0
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L11.496|
                          DCD      0x40022000
                  |L11.500|
                          DCD      0x1ffff7e0
                  |L11.504|
                          DCD      0x0801ffff
                  |L11.508|
                          DCD      0x0800ffff
                  |L11.512|
                          DCD      0x08007fff
                  |L11.516|
                          DCD      0x08003fff

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;318      */
;;;319    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;322    
;;;323      /* Process Locked */
;;;324      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4856              LDR      r0,|L12.356|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;325    
;;;326      /* If procedure already ongoing, reject the next one */
;;;327      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;328      {
;;;329        return HAL_ERROR;
;;;330      }
;;;331      
;;;332      /* Check the parameters */
;;;333      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;334    
;;;335      /* Enable End of FLASH Operation and Error source interrupts */
;;;336      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;337    
;;;338    #if defined(FLASH_BANK2_END)
;;;339      /* Enable End of FLASH Operation and Error source interrupts */
;;;340      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;341      
;;;342    #endif
;;;343      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;344      {
;;;345        /*Mass erase to be done*/
;;;346        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;347            FLASH_MassErase(pEraseInit->Banks);
;;;348      }
;;;349      else
;;;350      {
;;;351        /* Erase by page to be done*/
;;;352    
;;;353        /* Check the parameters */
;;;354        assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
;;;355        assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
;;;356    
;;;357        pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
;;;358        pFlash.DataRemaining = pEraseInit->NbPages;
;;;359        pFlash.Address = pEraseInit->PageAddress;
;;;360    
;;;361        /*Erase 1st page and wait for IT*/
;;;362        FLASH_PageErase(pEraseInit->PageAddress);
;;;363      }
;;;364    
;;;365      return status;
;;;366    }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;324
000016  4953              LDR      r1,|L12.356|
000018  7608              STRB     r0,[r1,#0x18]         ;324
00001a  bf00              NOP                            ;324
00001c  4608              MOV      r0,r1                 ;327
00001e  7800              LDRB     r0,[r0,#0]            ;327  ; pFlash
000020  b108              CBZ      r0,|L12.38|
000022  2001              MOVS     r0,#1                 ;329
000024  e7f5              B        |L12.18|
                  |L12.38|
000026  6820              LDR      r0,[r4,#0]            ;333
000028  b110              CBZ      r0,|L12.48|
00002a  6820              LDR      r0,[r4,#0]            ;333
00002c  2802              CMP      r0,#2                 ;333
00002e  d100              BNE      |L12.50|
                  |L12.48|
000030  e004              B        |L12.60|
                  |L12.50|
000032  f240114d          MOV      r1,#0x14d             ;333
000036  a04c              ADR      r0,|L12.360|
000038  f7fffffe          BL       assert_failed
                  |L12.60|
00003c  485a              LDR      r0,|L12.424|
00003e  6900              LDR      r0,[r0,#0x10]         ;336
000040  f44050a0          ORR      r0,r0,#0x1400         ;336
000044  4958              LDR      r1,|L12.424|
000046  6108              STR      r0,[r1,#0x10]         ;336
000048  6820              LDR      r0,[r4,#0]            ;343
00004a  2802              CMP      r0,#2                 ;343
00004c  d105              BNE      |L12.90|
00004e  4945              LDR      r1,|L12.356|
000050  7008              STRB     r0,[r1,#0]            ;346
000052  6860              LDR      r0,[r4,#4]            ;347
000054  f7fffffe          BL       FLASH_MassErase
000058  e081              B        |L12.350|
                  |L12.90|
00005a  68a0              LDR      r0,[r4,#8]            ;354
00005c  f1b06f00          CMP      r0,#0x8000000         ;354
000060  d32c              BCC      |L12.188|
000062  4852              LDR      r0,|L12.428|
000064  8800              LDRH     r0,[r0,#0]            ;354
000066  2880              CMP      r0,#0x80              ;354
000068  d107              BNE      |L12.122|
00006a  4951              LDR      r1,|L12.432|
00006c  68a0              LDR      r0,[r4,#8]            ;354
00006e  4288              CMP      r0,r1                 ;354
000070  d801              BHI      |L12.118|
000072  2001              MOVS     r0,#1                 ;354
000074  e020              B        |L12.184|
                  |L12.118|
000076  2000              MOVS     r0,#0                 ;354
000078  e01e              B        |L12.184|
                  |L12.122|
00007a  484c              LDR      r0,|L12.428|
00007c  8800              LDRH     r0,[r0,#0]            ;354
00007e  2840              CMP      r0,#0x40              ;354
000080  d107              BNE      |L12.146|
000082  494c              LDR      r1,|L12.436|
000084  68a0              LDR      r0,[r4,#8]            ;354
000086  4288              CMP      r0,r1                 ;354
000088  d801              BHI      |L12.142|
00008a  2001              MOVS     r0,#1                 ;354
00008c  e014              B        |L12.184|
                  |L12.142|
00008e  2000              MOVS     r0,#0                 ;354
000090  e012              B        |L12.184|
                  |L12.146|
000092  4846              LDR      r0,|L12.428|
000094  8800              LDRH     r0,[r0,#0]            ;354
000096  2820              CMP      r0,#0x20              ;354
000098  d107              BNE      |L12.170|
00009a  4947              LDR      r1,|L12.440|
00009c  68a0              LDR      r0,[r4,#8]            ;354
00009e  4288              CMP      r0,r1                 ;354
0000a0  d801              BHI      |L12.166|
0000a2  2001              MOVS     r0,#1                 ;354
0000a4  e008              B        |L12.184|
                  |L12.166|
0000a6  2000              MOVS     r0,#0                 ;354
0000a8  e006              B        |L12.184|
                  |L12.170|
0000aa  4944              LDR      r1,|L12.444|
0000ac  68a0              LDR      r0,[r4,#8]            ;354
0000ae  4288              CMP      r0,r1                 ;354
0000b0  d801              BHI      |L12.182|
0000b2  2001              MOVS     r0,#1                 ;354
0000b4  e000              B        |L12.184|
                  |L12.182|
0000b6  2000              MOVS     r0,#0                 ;354
                  |L12.184|
0000b8  b100              CBZ      r0,|L12.188|
0000ba  e004              B        |L12.198|
                  |L12.188|
0000bc  f44f71b1          MOV      r1,#0x162             ;354
0000c0  a029              ADR      r0,|L12.360|
0000c2  f7fffffe          BL       assert_failed
                  |L12.198|
0000c6  4839              LDR      r0,|L12.428|
0000c8  8800              LDRH     r0,[r0,#0]            ;355
0000ca  2880              CMP      r0,#0x80              ;355
0000cc  d10b              BNE      |L12.230|
0000ce  e9d41002          LDRD     r1,r0,[r4,#8]         ;355
0000d2  eb012080          ADD      r0,r1,r0,LSL #10      ;355
0000d6  1e40              SUBS     r0,r0,#1              ;355
0000d8  4935              LDR      r1,|L12.432|
0000da  4288              CMP      r0,r1                 ;355
0000dc  d801              BHI      |L12.226|
0000de  2001              MOVS     r0,#1                 ;355
0000e0  e02c              B        |L12.316|
                  |L12.226|
0000e2  2000              MOVS     r0,#0                 ;355
0000e4  e02a              B        |L12.316|
                  |L12.230|
0000e6  4831              LDR      r0,|L12.428|
0000e8  8800              LDRH     r0,[r0,#0]            ;355
0000ea  2840              CMP      r0,#0x40              ;355
0000ec  d10b              BNE      |L12.262|
0000ee  e9d41002          LDRD     r1,r0,[r4,#8]         ;355
0000f2  eb012080          ADD      r0,r1,r0,LSL #10      ;355
0000f6  1e40              SUBS     r0,r0,#1              ;355
0000f8  492e              LDR      r1,|L12.436|
0000fa  4288              CMP      r0,r1                 ;355
0000fc  d801              BHI      |L12.258|
0000fe  2001              MOVS     r0,#1                 ;355
000100  e01c              B        |L12.316|
                  |L12.258|
000102  2000              MOVS     r0,#0                 ;355
000104  e01a              B        |L12.316|
                  |L12.262|
000106  4829              LDR      r0,|L12.428|
000108  8800              LDRH     r0,[r0,#0]            ;355
00010a  2820              CMP      r0,#0x20              ;355
00010c  d10b              BNE      |L12.294|
00010e  e9d41002          LDRD     r1,r0,[r4,#8]         ;355
000112  eb012080          ADD      r0,r1,r0,LSL #10      ;355
000116  1e40              SUBS     r0,r0,#1              ;355
000118  4927              LDR      r1,|L12.440|
00011a  4288              CMP      r0,r1                 ;355
00011c  d801              BHI      |L12.290|
00011e  2001              MOVS     r0,#1                 ;355
000120  e00c              B        |L12.316|
                  |L12.290|
000122  2000              MOVS     r0,#0                 ;355
000124  e00a              B        |L12.316|
                  |L12.294|
000126  e9d41002          LDRD     r1,r0,[r4,#8]         ;355
00012a  eb012080          ADD      r0,r1,r0,LSL #10      ;355
00012e  1e40              SUBS     r0,r0,#1              ;355
000130  4922              LDR      r1,|L12.444|
000132  4288              CMP      r0,r1                 ;355
000134  d801              BHI      |L12.314|
000136  2001              MOVS     r0,#1                 ;355
000138  e000              B        |L12.316|
                  |L12.314|
00013a  2000              MOVS     r0,#0                 ;355
                  |L12.316|
00013c  b100              CBZ      r0,|L12.320|
00013e  e004              B        |L12.330|
                  |L12.320|
000140  f2401163          MOV      r1,#0x163             ;355
000144  a008              ADR      r0,|L12.360|
000146  f7fffffe          BL       assert_failed
                  |L12.330|
00014a  2001              MOVS     r0,#1                 ;357
00014c  4905              LDR      r1,|L12.356|
00014e  7008              STRB     r0,[r1,#0]            ;357
000150  68e0              LDR      r0,[r4,#0xc]          ;358
000152  6048              STR      r0,[r1,#4]            ;358  ; pFlash
000154  68a0              LDR      r0,[r4,#8]            ;359
000156  6088              STR      r0,[r1,#8]            ;359  ; pFlash
000158  68a0              LDR      r0,[r4,#8]            ;362
00015a  f7fffffe          BL       FLASH_PageErase
                  |L12.350|
00015e  4628              MOV      r0,r5                 ;365
000160  e757              B        |L12.18|
;;;367    
                          ENDP

000162  0000              DCW      0x0000
                  |L12.356|
                          DCD      pFlash
                  |L12.360|
000168  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
00016c  72697665
000170  72732f53
000174  544d3332
000178  46317878
00017c  5f48414c
000180  5f447269
000184  7665722f
000188  5372632f
00018c  73746d33
000190  32663178
000194  785f6861
000198  6c5f666c
00019c  617368  
00019f  5f65782e          DCB      "_ex.c",0
0001a3  6300    
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L12.424|
                          DCD      0x40022000
                  |L12.428|
                          DCD      0x1ffff7e0
                  |L12.432|
                          DCD      0x0801ffff
                  |L12.436|
                          DCD      0x0800ffff
                  |L12.440|
                          DCD      0x08007fff
                  |L12.444|
                          DCD      0x08003fff

                          AREA ||i.HAL_FLASHEx_OBErase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBErase PROC
;;;396    
;;;397    HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;398    {
;;;399      uint8_t rdptmp = OB_RDP_LEVEL_0;
000002  25a5              MOVS     r5,#0xa5
;;;400      HAL_StatusTypeDef status = HAL_ERROR;
000004  2401              MOVS     r4,#1
;;;401    
;;;402      /* Get the actual read protection Option Byte value */
;;;403      rdptmp = FLASH_OB_GetRDP();
000006  f7fffffe          BL       FLASH_OB_GetRDP
00000a  b2c5              UXTB     r5,r0
;;;404    
;;;405      /* Wait for last operation to be completed */
;;;406      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3050          MOV      r0,#0xc350
000010  f7fffffe          BL       FLASH_WaitForLastOperation
000014  4604              MOV      r4,r0
;;;407    
;;;408      if(status == HAL_OK)
000016  b9ec              CBNZ     r4,|L13.84|
;;;409      {
;;;410        /* Clean the error context */
;;;411        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000018  2000              MOVS     r0,#0
00001a  490f              LDR      r1,|L13.88|
00001c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;412    
;;;413        /* If the previous operation is completed, proceed to erase the option bytes */
;;;414        SET_BIT(FLASH->CR, FLASH_CR_OPTER);
00001e  480f              LDR      r0,|L13.92|
000020  6900              LDR      r0,[r0,#0x10]
000022  f0400020          ORR      r0,r0,#0x20
000026  490d              LDR      r1,|L13.92|
000028  6108              STR      r0,[r1,#0x10]
;;;415        SET_BIT(FLASH->CR, FLASH_CR_STRT);
00002a  4608              MOV      r0,r1
00002c  6900              LDR      r0,[r0,#0x10]
00002e  f0400040          ORR      r0,r0,#0x40
000032  6108              STR      r0,[r1,#0x10]
;;;416    
;;;417        /* Wait for last operation to be completed */
;;;418        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000034  f24c3050          MOV      r0,#0xc350
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4604              MOV      r4,r0
;;;419    
;;;420        /* If the erase operation is completed, disable the OPTER Bit */
;;;421        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
00003e  4807              LDR      r0,|L13.92|
000040  6900              LDR      r0,[r0,#0x10]
000042  f0200020          BIC      r0,r0,#0x20
000046  4905              LDR      r1,|L13.92|
000048  6108              STR      r0,[r1,#0x10]
;;;422    
;;;423        if(status == HAL_OK)
00004a  b91c              CBNZ     r4,|L13.84|
;;;424        {
;;;425          /* Restore the last read protection Option Byte value */
;;;426          status = FLASH_OB_RDP_LevelConfig(rdptmp);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000052  4604              MOV      r4,r0
                  |L13.84|
;;;427        }
;;;428      }
;;;429    
;;;430      /* Return the erase status */
;;;431      return status;
000054  4620              MOV      r0,r4
;;;432    }
000056  bd70              POP      {r4-r6,pc}
;;;433    
                          ENDP

                  |L13.88|
                          DCD      pFlash
                  |L13.92|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;526      */
;;;527    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;528    {
000002  4604              MOV      r4,r0
;;;529      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
000004  2007              MOVS     r0,#7
000006  6020              STR      r0,[r4,#0]
;;;530    
;;;531      /*Get WRP*/
;;;532      pOBInit->WRPPage = FLASH_OB_GetWRP();
000008  f7fffffe          BL       FLASH_OB_GetWRP
00000c  60a0              STR      r0,[r4,#8]
;;;533    
;;;534      /*Get RDP Level*/
;;;535      pOBInit->RDPLevel = FLASH_OB_GetRDP();
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  7420              STRB     r0,[r4,#0x10]
;;;536    
;;;537      /*Get USER*/
;;;538      pOBInit->USERConfig = FLASH_OB_GetUser();
000014  f7fffffe          BL       FLASH_OB_GetUser
000018  7460              STRB     r0,[r4,#0x11]
;;;539    }
00001a  bd10              POP      {r4,pc}
;;;540    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBGetUserData||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetUserData PROC
;;;548      */
;;;549    uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
000000  4601              MOV      r1,r0
;;;550    {
;;;551      uint32_t value = 0;
000002  2000              MOVS     r0,#0
;;;552      
;;;553      if (DATAAdress == OB_DATA_ADDRESS_DATA0)
000004  4a06              LDR      r2,|L15.32|
000006  4291              CMP      r1,r2
000008  d104              BNE      |L15.20|
;;;554      {
;;;555        /* Get value programmed in OB USER Data0 */
;;;556        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
00000a  4a06              LDR      r2,|L15.36|
00000c  69d2              LDR      r2,[r2,#0x1c]
00000e  f3c22087          UBFX     r0,r2,#10,#8
000012  e003              B        |L15.28|
                  |L15.20|
;;;557      }
;;;558      else
;;;559      {
;;;560        /* Get value programmed in OB USER Data1 */
;;;561        value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
000014  4a03              LDR      r2,|L15.36|
000016  69d2              LDR      r2,[r2,#0x1c]
000018  f3c24087          UBFX     r0,r2,#18,#8
                  |L15.28|
;;;562      }
;;;563      
;;;564      return value;
;;;565    }
00001c  4770              BX       lr
;;;566    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x1ffff804
                  |L15.36|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;445      */
;;;446    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;447    {
000002  4604              MOV      r4,r0
;;;448      HAL_StatusTypeDef status = HAL_ERROR;
000004  2501              MOVS     r5,#1
;;;449    
;;;450      /* Process Locked */
;;;451      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4838              LDR      r0,|L16.236|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L16.20|
000010  2002              MOVS     r0,#2
                  |L16.18|
;;;452    
;;;453      /* Check the parameters */
;;;454      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;455    
;;;456      /* Write protection configuration */
;;;457      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;458      {
;;;459        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;460        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;461        {
;;;462          /* Enable of Write protection on the selected page */
;;;463          status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
;;;464        }
;;;465        else
;;;466        {
;;;467          /* Disable of Write protection on the selected page */
;;;468          status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
;;;469        }
;;;470        if (status != HAL_OK)
;;;471        {
;;;472          /* Process Unlocked */
;;;473          __HAL_UNLOCK(&pFlash);
;;;474          return status;
;;;475        }
;;;476      }
;;;477    
;;;478      /* Read protection configuration */
;;;479      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;480      {
;;;481        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;482        if (status != HAL_OK)
;;;483        {
;;;484          /* Process Unlocked */
;;;485          __HAL_UNLOCK(&pFlash);
;;;486          return status;
;;;487        }
;;;488      }
;;;489    
;;;490      /* USER configuration */
;;;491      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;492      {
;;;493        status = FLASH_OB_UserConfig(pOBInit->USERConfig);
;;;494        if (status != HAL_OK)
;;;495        {
;;;496          /* Process Unlocked */
;;;497          __HAL_UNLOCK(&pFlash);
;;;498          return status;
;;;499        }
;;;500      }
;;;501    
;;;502      /* DATA configuration*/
;;;503      if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
;;;504      {
;;;505        status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
;;;506        if (status != HAL_OK)
;;;507        {
;;;508          /* Process Unlocked */
;;;509          __HAL_UNLOCK(&pFlash);
;;;510          return status;
;;;511        }
;;;512      }
;;;513    
;;;514      /* Process Unlocked */
;;;515      __HAL_UNLOCK(&pFlash);
;;;516    
;;;517      return status;
;;;518    }
000012  bd70              POP      {r4-r6,pc}
                  |L16.20|
000014  2001              MOVS     r0,#1                 ;451
000016  4935              LDR      r1,|L16.236|
000018  7608              STRB     r0,[r1,#0x18]         ;451
00001a  bf00              NOP                            ;451
00001c  6820              LDR      r0,[r4,#0]            ;454
00001e  280f              CMP      r0,#0xf               ;454
000020  d800              BHI      |L16.36|
000022  e004              B        |L16.46|
                  |L16.36|
000024  f44f71e3          MOV      r1,#0x1c6             ;454
000028  a031              ADR      r0,|L16.240|
00002a  f7fffffe          BL       assert_failed
                  |L16.46|
00002e  7820              LDRB     r0,[r4,#0]            ;457
000030  f0000001          AND      r0,r0,#1              ;457
000034  2800              CMP      r0,#0                 ;457
000036  d01e              BEQ      |L16.118|
000038  6860              LDR      r0,[r4,#4]            ;459
00003a  b110              CBZ      r0,|L16.66|
00003c  6860              LDR      r0,[r4,#4]            ;459
00003e  2801              CMP      r0,#1                 ;459
000040  d100              BNE      |L16.68|
                  |L16.66|
000042  e004              B        |L16.78|
                  |L16.68|
000044  f24011cb          MOV      r1,#0x1cb             ;459
000048  a029              ADR      r0,|L16.240|
00004a  f7fffffe          BL       assert_failed
                  |L16.78|
00004e  6860              LDR      r0,[r4,#4]            ;460
000050  2801              CMP      r0,#1                 ;460
000052  d104              BNE      |L16.94|
000054  68a0              LDR      r0,[r4,#8]            ;463
000056  f7fffffe          BL       FLASH_OB_EnableWRP
00005a  4605              MOV      r5,r0                 ;463
00005c  e003              B        |L16.102|
                  |L16.94|
00005e  68a0              LDR      r0,[r4,#8]            ;468
000060  f7fffffe          BL       FLASH_OB_DisableWRP
000064  4605              MOV      r5,r0                 ;468
                  |L16.102|
000066  b135              CBZ      r5,|L16.118|
000068  bf00              NOP                            ;473
00006a  2000              MOVS     r0,#0                 ;473
00006c  491f              LDR      r1,|L16.236|
00006e  7608              STRB     r0,[r1,#0x18]         ;473
000070  bf00              NOP                            ;473
000072  4628              MOV      r0,r5                 ;474
000074  e7cd              B        |L16.18|
                  |L16.118|
000076  7820              LDRB     r0,[r4,#0]            ;479
000078  f0000002          AND      r0,r0,#2              ;479
00007c  2802              CMP      r0,#2                 ;479
00007e  d10b              BNE      |L16.152|
000080  7c20              LDRB     r0,[r4,#0x10]         ;481
000082  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000086  4605              MOV      r5,r0                 ;481
000088  b135              CBZ      r5,|L16.152|
00008a  bf00              NOP                            ;485
00008c  2000              MOVS     r0,#0                 ;485
00008e  4917              LDR      r1,|L16.236|
000090  7608              STRB     r0,[r1,#0x18]         ;485
000092  bf00              NOP                            ;485
000094  4628              MOV      r0,r5                 ;486
000096  e7bc              B        |L16.18|
                  |L16.152|
000098  7820              LDRB     r0,[r4,#0]            ;491
00009a  f0000004          AND      r0,r0,#4              ;491
00009e  2804              CMP      r0,#4                 ;491
0000a0  d10b              BNE      |L16.186|
0000a2  7c60              LDRB     r0,[r4,#0x11]         ;493
0000a4  f7fffffe          BL       FLASH_OB_UserConfig
0000a8  4605              MOV      r5,r0                 ;493
0000aa  b135              CBZ      r5,|L16.186|
0000ac  bf00              NOP                            ;497
0000ae  2000              MOVS     r0,#0                 ;497
0000b0  490e              LDR      r1,|L16.236|
0000b2  7608              STRB     r0,[r1,#0x18]         ;497
0000b4  bf00              NOP                            ;497
0000b6  4628              MOV      r0,r5                 ;498
0000b8  e7ab              B        |L16.18|
                  |L16.186|
0000ba  7820              LDRB     r0,[r4,#0]            ;503
0000bc  f0000008          AND      r0,r0,#8              ;503
0000c0  2808              CMP      r0,#8                 ;503
0000c2  d10c              BNE      |L16.222|
0000c4  7e21              LDRB     r1,[r4,#0x18]         ;505
0000c6  6960              LDR      r0,[r4,#0x14]         ;505
0000c8  f7fffffe          BL       FLASH_OB_ProgramData
0000cc  4605              MOV      r5,r0                 ;505
0000ce  b135              CBZ      r5,|L16.222|
0000d0  bf00              NOP                            ;509
0000d2  2000              MOVS     r0,#0                 ;509
0000d4  4905              LDR      r1,|L16.236|
0000d6  7608              STRB     r0,[r1,#0x18]         ;509
0000d8  bf00              NOP                            ;509
0000da  4628              MOV      r0,r5                 ;510
0000dc  e799              B        |L16.18|
                  |L16.222|
0000de  bf00              NOP                            ;515
0000e0  2000              MOVS     r0,#0                 ;515
0000e2  4902              LDR      r1,|L16.236|
0000e4  7608              STRB     r0,[r1,#0x18]         ;515
0000e6  bf00              NOP                            ;515
0000e8  4628              MOV      r0,r5                 ;517
0000ea  e792              B        |L16.18|
;;;519    
                          ENDP

                  |L16.236|
                          DCD      pFlash
                  |L16.240|
0000f0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
0000f4  72697665
0000f8  72732f53
0000fc  544d3332
000100  46317878
000104  5f48414c
000108  5f447269
00010c  7665722f
000110  5372632f
000114  73746d33
000118  32663178
00011c  785f6861
000120  6c5f666c
000124  617368  
000127  5f65782e          DCB      "_ex.c",0
00012b  6300    
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH|
#line 478
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX|
#line 665
|__asm___24_stm32f1xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
