; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_flash.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_flash.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;796      */
;;;797    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  2200              MOVS     r2,#0
;;;798    {
;;;799      /* Clean the error context */
;;;800      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4b05              LDR      r3,|L1.24|
000004  61da              STR      r2,[r3,#0x1c]  ; pFlash
;;;801      
;;;802    #if defined(FLASH_BANK2_END)
;;;803      if(Address <= FLASH_BANK1_END)
;;;804      {
;;;805    #endif /* FLASH_BANK2_END */
;;;806        /* Proceed to program the new data */
;;;807        SET_BIT(FLASH->CR, FLASH_CR_PG);
000006  4a05              LDR      r2,|L1.28|
000008  6912              LDR      r2,[r2,#0x10]
00000a  f0420201          ORR      r2,r2,#1
00000e  4b03              LDR      r3,|L1.28|
000010  611a              STR      r2,[r3,#0x10]
;;;808    #if defined(FLASH_BANK2_END)
;;;809      }
;;;810      else
;;;811      {
;;;812        /* Proceed to program the new data */
;;;813        SET_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;814      }
;;;815    #endif /* FLASH_BANK2_END */
;;;816    
;;;817      /* Write data in the address */
;;;818      *(__IO uint16_t*)Address = Data;
000012  8001              STRH     r1,[r0,#0]
;;;819    }
000014  4770              BX       lr
;;;820    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      pFlash
                  |L1.28|
                          DCD      0x40022000

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;913      */
;;;914    static void FLASH_SetErrorCode(void)
000000  2000              MOVS     r0,#0
;;;915    {
;;;916      uint32_t flags = 0U;
;;;917      
;;;918    #if defined(FLASH_BANK2_END)
;;;919      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
;;;920    #else
;;;921      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
000002  491e              LDR      r1,|L2.124|
000004  68c9              LDR      r1,[r1,#0xc]
000006  f0010110          AND      r1,r1,#0x10
00000a  b139              CBZ      r1,|L2.28|
;;;922    #endif /* FLASH_BANK2_END */
;;;923      {
;;;924        pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000c  491c              LDR      r1,|L2.128|
00000e  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
000010  f0410102          ORR      r1,r1,#2
000014  4a1a              LDR      r2,|L2.128|
000016  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;925    #if defined(FLASH_BANK2_END)
;;;926        flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
;;;927    #else
;;;928        flags |= FLASH_FLAG_WRPERR;
000018  f0400010          ORR      r0,r0,#0x10
                  |L2.28|
;;;929    #endif /* FLASH_BANK2_END */
;;;930      }
;;;931    #if defined(FLASH_BANK2_END)
;;;932      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
;;;933    #else
;;;934      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
00001c  4917              LDR      r1,|L2.124|
00001e  68c9              LDR      r1,[r1,#0xc]
000020  f0010104          AND      r1,r1,#4
000024  b139              CBZ      r1,|L2.54|
;;;935    #endif /* FLASH_BANK2_END */
;;;936      {
;;;937        pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
000026  4916              LDR      r1,|L2.128|
000028  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
00002a  f0410101          ORR      r1,r1,#1
00002e  4a14              LDR      r2,|L2.128|
000030  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;938    #if defined(FLASH_BANK2_END)
;;;939        flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
;;;940    #else
;;;941        flags |= FLASH_FLAG_PGERR;
000032  f0400004          ORR      r0,r0,#4
                  |L2.54|
;;;942    #endif /* FLASH_BANK2_END */
;;;943      }
;;;944      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
000036  4911              LDR      r1,|L2.124|
000038  69c9              LDR      r1,[r1,#0x1c]
00003a  f0010101          AND      r1,r1,#1
00003e  b169              CBZ      r1,|L2.92|
;;;945      {
;;;946        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
000040  490f              LDR      r1,|L2.128|
000042  69c9              LDR      r1,[r1,#0x1c]  ; pFlash
000044  f0410104          ORR      r1,r1,#4
000048  4a0d              LDR      r2,|L2.128|
00004a  61d1              STR      r1,[r2,#0x1c]  ; pFlash
;;;947      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
00004c  bf00              NOP      
00004e  490b              LDR      r1,|L2.124|
000050  69c9              LDR      r1,[r1,#0x1c]
000052  f0210101          BIC      r1,r1,#1
000056  4a09              LDR      r2,|L2.124|
000058  61d1              STR      r1,[r2,#0x1c]
00005a  bf00              NOP      
                  |L2.92|
;;;948      }
;;;949    
;;;950      /* Clear FLASH error pending bits */
;;;951      __HAL_FLASH_CLEAR_FLAG(flags);
00005c  bf00              NOP      
00005e  f2401101          MOV      r1,#0x101
000062  4288              CMP      r0,r1
000064  d106              BNE      |L2.116|
000066  4905              LDR      r1,|L2.124|
000068  69c9              LDR      r1,[r1,#0x1c]
00006a  f0210101          BIC      r1,r1,#1
00006e  4a03              LDR      r2,|L2.124|
000070  61d1              STR      r1,[r2,#0x1c]
000072  e001              B        |L2.120|
                  |L2.116|
000074  4901              LDR      r1,|L2.124|
000076  60c8              STR      r0,[r1,#0xc]
                  |L2.120|
000078  bf00              NOP      
;;;952    }  
00007a  4770              BX       lr
;;;953    /**
                          ENDP

                  |L2.124|
                          DCD      0x40022000
                  |L2.128|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;825      */
;;;826    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;827    {
000002  4604              MOV      r4,r0
;;;828      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;829         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;830         flag will be set */
;;;831         
;;;832      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;833         
;;;834      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
00000a  e009              B        |L3.32|
                  |L3.12|
;;;835      { 
;;;836        if (Timeout != HAL_MAX_DELAY)
00000c  1c60              ADDS     r0,r4,#1
00000e  b138              CBZ      r0,|L3.32|
;;;837        {
;;;838          if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
000010  b124              CBZ      r4,|L3.28|
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  42a0              CMP      r0,r4
00001a  d901              BLS      |L3.32|
                  |L3.28|
;;;839          {
;;;840            return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L3.30|
;;;841          }
;;;842        }
;;;843      }
;;;844      
;;;845      /* Check FLASH End of Operation flag  */
;;;846      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;847      {
;;;848        /* Clear FLASH End of Operation pending bit */
;;;849        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;850      }
;;;851      
;;;852      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
;;;853         __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
;;;854         __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
;;;855      {
;;;856        /*Save the error code*/
;;;857        FLASH_SetErrorCode();
;;;858        return HAL_ERROR;
;;;859      }
;;;860    
;;;861      /* There is no error flag set */
;;;862      return HAL_OK;
;;;863    }
00001e  bd70              POP      {r4-r6,pc}
                  |L3.32|
000020  4812              LDR      r0,|L3.108|
000022  68c0              LDR      r0,[r0,#0xc]          ;834
000024  f0000001          AND      r0,r0,#1              ;834
000028  2800              CMP      r0,#0                 ;834
00002a  d1ef              BNE      |L3.12|
00002c  480f              LDR      r0,|L3.108|
00002e  68c0              LDR      r0,[r0,#0xc]          ;846
000030  f0000020          AND      r0,r0,#0x20           ;846
000034  b120              CBZ      r0,|L3.64|
000036  bf00              NOP                            ;849
000038  2020              MOVS     r0,#0x20              ;849
00003a  490c              LDR      r1,|L3.108|
00003c  60c8              STR      r0,[r1,#0xc]          ;849
00003e  bf00              NOP                            ;849
                  |L3.64|
000040  480a              LDR      r0,|L3.108|
000042  68c0              LDR      r0,[r0,#0xc]          ;852
000044  f0000010          AND      r0,r0,#0x10           ;852
000048  b948              CBNZ     r0,|L3.94|
00004a  4808              LDR      r0,|L3.108|
00004c  69c0              LDR      r0,[r0,#0x1c]         ;853
00004e  f0000001          AND      r0,r0,#1              ;853
000052  b920              CBNZ     r0,|L3.94|
000054  4805              LDR      r0,|L3.108|
000056  68c0              LDR      r0,[r0,#0xc]          ;854
000058  f0000004          AND      r0,r0,#4              ;854
00005c  b118              CBZ      r0,|L3.102|
                  |L3.94|
00005e  f7fffffe          BL       FLASH_SetErrorCode
000062  2001              MOVS     r0,#1                 ;858
000064  e7db              B        |L3.30|
                  |L3.102|
000066  2000              MOVS     r0,#0                 ;862
000068  e7d9              B        |L3.30|
;;;864    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;605      */
;;;606    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;607    {
;;;608      /* Prevent unused argument(s) compilation warning */
;;;609      UNUSED(ReturnValue);
;;;610    
;;;611      /* NOTE : This function Should not be modified, when the callback is needed,
;;;612                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;613       */ 
;;;614    }
;;;615    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;773      */
;;;774    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;775    {
;;;776       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;777    }
000004  4770              BX       lr
;;;778    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;331      */
;;;332    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;333    {
;;;334      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;335      
;;;336      /* Check FLASH operation error flags */
;;;337    #if defined(FLASH_BANK2_END)
;;;338      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
;;;339        (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
;;;340    #else
;;;341      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
000004  485c              LDR      r0,|L6.376|
000006  68c0              LDR      r0,[r0,#0xc]
000008  f0000010          AND      r0,r0,#0x10
00000c  b920              CBNZ     r0,|L6.24|
00000e  485a              LDR      r0,|L6.376|
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0000004          AND      r0,r0,#4
000016  b168              CBZ      r0,|L6.52|
                  |L6.24|
;;;342    #endif /* FLASH_BANK2_END */
;;;343      {
;;;344        /* Return the faulty address */
;;;345        addresstmp = pFlash.Address;
000018  4858              LDR      r0,|L6.380|
00001a  6884              LDR      r4,[r0,#8]  ; pFlash
;;;346        /* Reset address */
;;;347        pFlash.Address = 0xFFFFFFFFU;
00001c  f04f30ff          MOV      r0,#0xffffffff
000020  4956              LDR      r1,|L6.380|
000022  6088              STR      r0,[r1,#8]  ; pFlash
;;;348      
;;;349        /* Save the Error code */
;;;350        FLASH_SetErrorCode();
000024  f7fffffe          BL       FLASH_SetErrorCode
;;;351        
;;;352        /* FLASH error interrupt user callback */
;;;353        HAL_FLASH_OperationErrorCallback(addresstmp);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;354    
;;;355        /* Stop the procedure ongoing */
;;;356        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002e  2000              MOVS     r0,#0
000030  4952              LDR      r1,|L6.380|
000032  7008              STRB     r0,[r1,#0]
                  |L6.52|
;;;357      }
;;;358    
;;;359      /* Check FLASH End of Operation flag  */
;;;360    #if defined(FLASH_BANK2_END)
;;;361      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
;;;362      {
;;;363        /* Clear FLASH End of Operation pending bit */
;;;364        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
;;;365    #else
;;;366      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
000034  4850              LDR      r0,|L6.376|
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0000020          AND      r0,r0,#0x20
00003c  2800              CMP      r0,#0
00003e  d028              BEQ      |L6.146|
;;;367      {
;;;368        /* Clear FLASH End of Operation pending bit */
;;;369        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000040  bf00              NOP      
000042  2020              MOVS     r0,#0x20
000044  494c              LDR      r1,|L6.376|
000046  60c8              STR      r0,[r1,#0xc]
000048  bf00              NOP      
;;;370    #endif /* FLASH_BANK2_END */
;;;371        
;;;372        /* Process can continue only if no error detected */
;;;373        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
00004a  484c              LDR      r0,|L6.380|
00004c  7800              LDRB     r0,[r0,#0]  ; pFlash
00004e  2800              CMP      r0,#0
000050  d07e              BEQ      |L6.336|
;;;374        {
;;;375          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
000052  484a              LDR      r0,|L6.380|
000054  7800              LDRB     r0,[r0,#0]  ; pFlash
000056  2801              CMP      r0,#1
000058  d127              BNE      |L6.170|
;;;376          {
;;;377            /* Nb of pages to erased can be decreased */
;;;378            pFlash.DataRemaining--;
00005a  4848              LDR      r0,|L6.380|
00005c  6840              LDR      r0,[r0,#4]  ; pFlash
00005e  1e40              SUBS     r0,r0,#1
000060  4946              LDR      r1,|L6.380|
000062  6048              STR      r0,[r1,#4]  ; pFlash
;;;379    
;;;380            /* Check if there are still pages to erase */
;;;381            if(pFlash.DataRemaining != 0U)
000064  4608              MOV      r0,r1
000066  6840              LDR      r0,[r0,#4]  ; pFlash
000068  b1a0              CBZ      r0,|L6.148|
;;;382            {
;;;383              addresstmp = pFlash.Address;
00006a  4608              MOV      r0,r1
00006c  6884              LDR      r4,[r0,#8]  ; pFlash
;;;384              /*Indicate user which sector has been erased */
;;;385              HAL_FLASH_EndOfOperationCallback(addresstmp);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;386    
;;;387              /*Increment sector number*/
;;;388              addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
000074  4841              LDR      r0,|L6.380|
000076  6880              LDR      r0,[r0,#8]  ; pFlash
000078  f5006480          ADD      r4,r0,#0x400
;;;389              pFlash.Address = addresstmp;
00007c  483f              LDR      r0,|L6.380|
00007e  6084              STR      r4,[r0,#8]  ; pFlash
;;;390    
;;;391              /* If the erase operation is completed, disable the PER Bit */
;;;392              CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
000080  483d              LDR      r0,|L6.376|
000082  6900              LDR      r0,[r0,#0x10]
000084  f0200002          BIC      r0,r0,#2
000088  493b              LDR      r1,|L6.376|
00008a  6108              STR      r0,[r1,#0x10]
;;;393    
;;;394              FLASH_PageErase(addresstmp);
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       FLASH_PageErase
                  |L6.146|
000092  e05d              B        |L6.336|
                  |L6.148|
;;;395            }
;;;396            else
;;;397            {
;;;398              /* No more pages to Erase, user callback can be called. */
;;;399              /* Reset Sector and stop Erase pages procedure */
;;;400              pFlash.Address = addresstmp = 0xFFFFFFFFU;
000094  f04f30ff          MOV      r0,#0xffffffff
000098  4604              MOV      r4,r0
00009a  4938              LDR      r1,|L6.380|
00009c  6088              STR      r0,[r1,#8]  ; pFlash
;;;401              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00009e  2000              MOVS     r0,#0
0000a0  7008              STRB     r0,[r1,#0]
;;;402              /* FLASH EOP interrupt user callback */
;;;403              HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000a8  e052              B        |L6.336|
                  |L6.170|
;;;404            }
;;;405          }
;;;406          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
0000aa  4834              LDR      r0,|L6.380|
0000ac  7800              LDRB     r0,[r0,#0]  ; pFlash
0000ae  2802              CMP      r0,#2
0000b0  d10c              BNE      |L6.204|
;;;407          {
;;;408            /* Operation is completed, disable the MER Bit */
;;;409            CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
0000b2  4831              LDR      r0,|L6.376|
0000b4  6900              LDR      r0,[r0,#0x10]
0000b6  f0200004          BIC      r0,r0,#4
0000ba  492f              LDR      r1,|L6.376|
0000bc  6108              STR      r0,[r1,#0x10]
;;;410    
;;;411    #if defined(FLASH_BANK2_END)
;;;412            /* Stop Mass Erase procedure if no pending mass erase on other bank */
;;;413            if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
;;;414            {
;;;415    #endif /* FLASH_BANK2_END */
;;;416              /* MassErase ended. Return the selected bank */
;;;417              /* FLASH EOP interrupt user callback */
;;;418              HAL_FLASH_EndOfOperationCallback(0U);
0000be  2000              MOVS     r0,#0
0000c0  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;419    
;;;420              /* Stop Mass Erase procedure*/
;;;421              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000c4  2000              MOVS     r0,#0
0000c6  492d              LDR      r1,|L6.380|
0000c8  7008              STRB     r0,[r1,#0]
0000ca  e041              B        |L6.336|
                  |L6.204|
;;;422            }
;;;423    #if defined(FLASH_BANK2_END)
;;;424          }
;;;425    #endif /* FLASH_BANK2_END */
;;;426          else
;;;427          {
;;;428            /* Nb of 16-bit data to program can be decreased */
;;;429            pFlash.DataRemaining--;
0000cc  482b              LDR      r0,|L6.380|
0000ce  6840              LDR      r0,[r0,#4]  ; pFlash
0000d0  1e40              SUBS     r0,r0,#1
0000d2  492a              LDR      r1,|L6.380|
0000d4  6048              STR      r0,[r1,#4]  ; pFlash
;;;430            
;;;431            /* Check if there are still 16-bit data to program */
;;;432            if(pFlash.DataRemaining != 0U)
0000d6  4608              MOV      r0,r1
0000d8  6840              LDR      r0,[r0,#4]  ; pFlash
0000da  b1d8              CBZ      r0,|L6.276|
;;;433            {
;;;434              /* Increment address to 16-bit */
;;;435              pFlash.Address += 2U;
0000dc  4608              MOV      r0,r1
0000de  6880              LDR      r0,[r0,#8]  ; pFlash
0000e0  1c80              ADDS     r0,r0,#2
0000e2  6088              STR      r0,[r1,#8]  ; pFlash
;;;436              addresstmp = pFlash.Address;
0000e4  4608              MOV      r0,r1
0000e6  6884              LDR      r4,[r0,#8]  ; pFlash
;;;437              
;;;438              /* Shift to have next 16-bit data */
;;;439              pFlash.Data = (pFlash.Data >> 16U);
0000e8  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000ea  6949              LDR      r1,[r1,#0x14]  ; pFlash
0000ec  0c00              LSRS     r0,r0,#16
0000ee  ea404001          ORR      r0,r0,r1,LSL #16
0000f2  0c09              LSRS     r1,r1,#16
0000f4  4a21              LDR      r2,|L6.380|
0000f6  6110              STR      r0,[r2,#0x10]  ; pFlash
0000f8  6151              STR      r1,[r2,#0x14]  ; pFlash
;;;440              
;;;441              /* Operation is completed, disable the PG Bit */
;;;442              CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
0000fa  481f              LDR      r0,|L6.376|
0000fc  6900              LDR      r0,[r0,#0x10]
0000fe  f0200001          BIC      r0,r0,#1
000102  491d              LDR      r1,|L6.376|
000104  6108              STR      r0,[r1,#0x10]
;;;443    
;;;444              /*Program halfword (16-bit) at a specified address.*/
;;;445              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
000106  6910              LDR      r0,[r2,#0x10]  ; pFlash
000108  6952              LDR      r2,[r2,#0x14]  ; pFlash
00010a  b281              UXTH     r1,r0
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       FLASH_Program_HalfWord
000112  e01d              B        |L6.336|
                  |L6.276|
;;;446            }
;;;447            else
;;;448            {
;;;449              /* Program ended. Return the selected address */
;;;450              /* FLASH EOP interrupt user callback */
;;;451              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
000114  4819              LDR      r0,|L6.380|
000116  7800              LDRB     r0,[r0,#0]  ; pFlash
000118  2803              CMP      r0,#3
00011a  d104              BNE      |L6.294|
;;;452              {
;;;453                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
00011c  4917              LDR      r1,|L6.380|
00011e  6888              LDR      r0,[r1,#8]  ; pFlash
000120  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000124  e00e              B        |L6.324|
                  |L6.294|
;;;454              }
;;;455              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
000126  4815              LDR      r0,|L6.380|
000128  7800              LDRB     r0,[r0,#0]  ; pFlash
00012a  2804              CMP      r0,#4
00012c  d105              BNE      |L6.314|
;;;456              {
;;;457                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
00012e  4913              LDR      r1,|L6.380|
000130  6889              LDR      r1,[r1,#8]  ; pFlash
000132  1e88              SUBS     r0,r1,#2
000134  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
000138  e004              B        |L6.324|
                  |L6.314|
;;;458              }
;;;459              else 
;;;460              {
;;;461                HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
00013a  4910              LDR      r1,|L6.380|
00013c  6889              LDR      r1,[r1,#8]  ; pFlash
00013e  1f88              SUBS     r0,r1,#6
000140  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L6.324|
;;;462              }
;;;463            
;;;464              /* Reset Address and stop Program procedure */
;;;465              pFlash.Address = 0xFFFFFFFFU;
000144  f04f30ff          MOV      r0,#0xffffffff
000148  490c              LDR      r1,|L6.380|
00014a  6088              STR      r0,[r1,#8]  ; pFlash
;;;466              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00014c  2000              MOVS     r0,#0
00014e  7008              STRB     r0,[r1,#0]
                  |L6.336|
;;;467            }
;;;468          }
;;;469        }
;;;470      }
;;;471      
;;;472    #if defined(FLASH_BANK2_END)
;;;473      /* Check FLASH End of Operation flag  */
;;;474      if(__HAL_FLASH_GET_FLAG( FLASH_FLAG_EOP_BANK2))
;;;475      {
;;;476        /* Clear FLASH End of Operation pending bit */
;;;477        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
;;;478        
;;;479        /* Process can continue only if no error detected */
;;;480        if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;481        {
;;;482          if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
;;;483          {
;;;484            /* Nb of pages to erased can be decreased */
;;;485            pFlash.DataRemaining--;
;;;486            
;;;487            /* Check if there are still pages to erase*/
;;;488            if(pFlash.DataRemaining != 0U)
;;;489            {
;;;490              /* Indicate user which page address has been erased*/
;;;491              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;492            
;;;493              /* Increment page address to next page */
;;;494              pFlash.Address += FLASH_PAGE_SIZE;
;;;495              addresstmp = pFlash.Address;
;;;496    
;;;497              /* Operation is completed, disable the PER Bit */
;;;498              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
;;;499    
;;;500              FLASH_PageErase(addresstmp);
;;;501            }
;;;502            else
;;;503            {
;;;504              /*No more pages to Erase*/
;;;505              
;;;506              /*Reset Address and stop Erase pages procedure*/
;;;507              pFlash.Address = 0xFFFFFFFFU;
;;;508              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;509    
;;;510              /* FLASH EOP interrupt user callback */
;;;511              HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;512            }
;;;513          }
;;;514          else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
;;;515          {
;;;516            /* Operation is completed, disable the MER Bit */
;;;517            CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
;;;518    
;;;519            if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_MER))
;;;520            {
;;;521              /* MassErase ended. Return the selected bank*/
;;;522              /* FLASH EOP interrupt user callback */
;;;523              HAL_FLASH_EndOfOperationCallback(0U);
;;;524            
;;;525              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;526            }
;;;527          }
;;;528          else
;;;529          {
;;;530            /* Nb of 16-bit data to program can be decreased */
;;;531            pFlash.DataRemaining--;
;;;532            
;;;533            /* Check if there are still 16-bit data to program */
;;;534            if(pFlash.DataRemaining != 0U)
;;;535            {
;;;536              /* Increment address to 16-bit */
;;;537              pFlash.Address += 2U;
;;;538              addresstmp = pFlash.Address;
;;;539              
;;;540              /* Shift to have next 16-bit data */
;;;541              pFlash.Data = (pFlash.Data >> 16U);
;;;542              
;;;543              /* Operation is completed, disable the PG Bit */
;;;544              CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;545    
;;;546              /*Program halfword (16-bit) at a specified address.*/
;;;547              FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
;;;548            }
;;;549            else
;;;550            {
;;;551              /*Program ended. Return the selected address*/
;;;552              /* FLASH EOP interrupt user callback */
;;;553              if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
;;;554              {
;;;555                HAL_FLASH_EndOfOperationCallback(pFlash.Address);
;;;556              }
;;;557              else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
;;;558              {
;;;559                HAL_FLASH_EndOfOperationCallback(pFlash.Address-2U);
;;;560              }
;;;561              else 
;;;562              {
;;;563                HAL_FLASH_EndOfOperationCallback(pFlash.Address-6U);
;;;564              }
;;;565              
;;;566              /* Reset Address and stop Program procedure*/
;;;567              pFlash.Address = 0xFFFFFFFFU;
;;;568              pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;569            }
;;;570          }
;;;571        }
;;;572      }
;;;573    #endif 
;;;574    
;;;575      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000150  480a              LDR      r0,|L6.380|
000152  7800              LDRB     r0,[r0,#0]  ; pFlash
000154  b978              CBNZ     r0,|L6.374|
;;;576      {
;;;577    #if defined(FLASH_BANK2_END)
;;;578        /* Operation is completed, disable the PG, PER and MER Bits for both bank */
;;;579        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
;;;580        CLEAR_BIT(FLASH->CR2, (FLASH_CR2_PG | FLASH_CR2_PER | FLASH_CR2_MER));  
;;;581      
;;;582        /* Disable End of FLASH Operation and Error source interrupts for both banks */
;;;583        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;584    #else
;;;585        /* Operation is completed, disable the PG, PER and MER Bits */
;;;586        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
000156  4808              LDR      r0,|L6.376|
000158  6900              LDR      r0,[r0,#0x10]
00015a  f0200007          BIC      r0,r0,#7
00015e  4906              LDR      r1,|L6.376|
000160  6108              STR      r0,[r1,#0x10]
;;;587    
;;;588        /* Disable End of FLASH Operation and Error source interrupts */
;;;589        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
000162  4608              MOV      r0,r1
000164  6900              LDR      r0,[r0,#0x10]
000166  f42050a0          BIC      r0,r0,#0x1400
00016a  6108              STR      r0,[r1,#0x10]
;;;590    #endif /* FLASH_BANK2_END */
;;;591    
;;;592        /* Process Unlocked */
;;;593        __HAL_UNLOCK(&pFlash);
00016c  bf00              NOP      
00016e  2000              MOVS     r0,#0
000170  4902              LDR      r1,|L6.380|
000172  7608              STRB     r0,[r1,#0x18]
000174  bf00              NOP      
                  |L6.374|
;;;594      }
;;;595    }
000176  bd10              POP      {r4,pc}
;;;596    
                          ENDP

                  |L6.376|
                          DCD      0x40022000
                  |L6.380|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;694      */
;;;695    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;696    {
;;;697      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;698      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6900              LDR      r0,[r0,#0x10]
000004  f0400080          ORR      r0,r0,#0x80
000008  4901              LDR      r1,|L7.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;699      
;;;700    #if defined(FLASH_BANK2_END)
;;;701      /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
;;;702      SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
;;;703    
;;;704    #endif /* FLASH_BANK2_END */
;;;705      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;706    }
00000e  4770              BX       lr
;;;707    
                          ENDP

                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OB_Launch PROC
;;;744      */
;;;745    void HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;746    {
;;;747      /* Initiates a system reset request to launch the option byte loading */
;;;748      HAL_NVIC_SystemReset();
000002  f7fffffe          BL       HAL_NVIC_SystemReset
;;;749    }
000006  bd10              POP      {r4,pc}
;;;750    
                          ENDP


                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;731      */
;;;732    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;733    {
;;;734      /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
;;;735      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
000002  6900              LDR      r0,[r0,#0x10]
000004  f4207000          BIC      r0,r0,#0x200
000008  4901              LDR      r1,|L9.16|
00000a  6108              STR      r0,[r1,#0x10]
;;;736      
;;;737      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;738    }
00000e  4770              BX       lr
;;;739      
                          ENDP

                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;711      */
;;;712    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L10.32|
;;;713    {
;;;714      if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
000002  6900              LDR      r0,[r0,#0x10]
000004  f4007000          AND      r0,r0,#0x200
000008  b928              CBNZ     r0,|L10.22|
;;;715      {
;;;716        /* Authorizes the Option Byte register programming */
;;;717        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
00000a  4806              LDR      r0,|L10.36|
00000c  4904              LDR      r1,|L10.32|
00000e  6088              STR      r0,[r1,#8]
;;;718        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
000010  4805              LDR      r0,|L10.40|
000012  6088              STR      r0,[r1,#8]
000014  e001              B        |L10.26|
                  |L10.22|
;;;719      }
;;;720      else
;;;721      {
;;;722        return HAL_ERROR;
000016  2001              MOVS     r0,#1
                  |L10.24|
;;;723      }  
;;;724      
;;;725      return HAL_OK;  
;;;726    }
000018  4770              BX       lr
                  |L10.26|
00001a  2000              MOVS     r0,#0                 ;725
00001c  e7fc              B        |L10.24|
;;;727    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40022000
                  |L10.36|
                          DCD      0x45670123
                  |L10.40|
                          DCD      0xcdef89ab

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;623      */
;;;624    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;625    {
;;;626      /* Prevent unused argument(s) compilation warning */
;;;627      UNUSED(ReturnValue);
;;;628    
;;;629      /* NOTE : This function Should not be modified, when the callback is needed,
;;;630                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;631       */ 
;;;632    }
;;;633    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;167      */
;;;168    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;169    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;170      HAL_StatusTypeDef status = HAL_ERROR;
00000c  f04f0901          MOV      r9,#1
;;;171      uint8_t index = 0;
000010  2600              MOVS     r6,#0
;;;172      uint8_t nbiterations = 0;
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;173      
;;;174      /* Process Locked */
;;;175      __HAL_LOCK(&pFlash);
000016  bf00              NOP      
000018  4843              LDR      r0,|L12.296|
00001a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00001c  2801              CMP      r0,#1
00001e  d102              BNE      |L12.38|
000020  2002              MOVS     r0,#2
                  |L12.34|
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;179      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;180    
;;;181    #if defined(FLASH_BANK2_END)
;;;182      if(Address <= FLASH_BANK1_END)
;;;183      {
;;;184    #endif /* FLASH_BANK2_END */
;;;185        /* Wait for last operation to be completed */
;;;186        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;187    #if defined(FLASH_BANK2_END)
;;;188      }
;;;189      else
;;;190      {
;;;191        /* Wait for last operation to be completed */
;;;192        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;193      }
;;;194    #endif /* FLASH_BANK2_END */
;;;195      
;;;196      if(status == HAL_OK)
;;;197      {
;;;198        if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;199        {
;;;200          /* Program halfword (16-bit) at a specified address. */
;;;201          nbiterations = 1U;
;;;202        }
;;;203        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;204        {
;;;205          /* Program word (32-bit = 2*16-bit) at a specified address. */
;;;206          nbiterations = 2U;
;;;207        }
;;;208        else
;;;209        {
;;;210          /* Program double word (64-bit = 4*16-bit) at a specified address. */
;;;211          nbiterations = 4U;
;;;212        }
;;;213    
;;;214        for (index = 0U; index < nbiterations; index++)
;;;215        {
;;;216          FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
;;;217    
;;;218    #if defined(FLASH_BANK2_END)
;;;219          if(Address <= FLASH_BANK1_END)
;;;220          {
;;;221    #endif /* FLASH_BANK2_END */
;;;222            /* Wait for last operation to be completed */
;;;223            status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
;;;224        
;;;225            /* If the program operation is completed, disable the PG Bit */
;;;226            CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
;;;227    #if defined(FLASH_BANK2_END)
;;;228          }
;;;229          else
;;;230          {
;;;231            /* Wait for last operation to be completed */
;;;232            status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
;;;233            
;;;234            /* If the program operation is completed, disable the PG Bit */
;;;235            CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
;;;236          }
;;;237    #endif /* FLASH_BANK2_END */
;;;238          /* In case of error, stop programation procedure */
;;;239          if (status != HAL_OK)
;;;240          {
;;;241            break;
;;;242          }
;;;243        }
;;;244      }
;;;245    
;;;246      /* Process Unlocked */
;;;247      __HAL_UNLOCK(&pFlash);
;;;248    
;;;249      return status;
;;;250    }
000022  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.38|
000026  2001              MOVS     r0,#1                 ;175
000028  493f              LDR      r1,|L12.296|
00002a  7608              STRB     r0,[r1,#0x18]         ;175
00002c  bf00              NOP                            ;175
00002e  2d01              CMP      r5,#1                 ;178
000030  d003              BEQ      |L12.58|
000032  2d02              CMP      r5,#2                 ;178
000034  d001              BEQ      |L12.58|
000036  2d03              CMP      r5,#3                 ;178
000038  d100              BNE      |L12.60|
                  |L12.58|
00003a  e003              B        |L12.68|
                  |L12.60|
00003c  21b2              MOVS     r1,#0xb2              ;178
00003e  a03b              ADR      r0,|L12.300|
000040  f7fffffe          BL       assert_failed
                  |L12.68|
000044  f1b46f00          CMP      r4,#0x8000000         ;179
000048  d328              BCC      |L12.156|
00004a  4847              LDR      r0,|L12.360|
00004c  8800              LDRH     r0,[r0,#0]            ;179
00004e  2880              CMP      r0,#0x80              ;179
000050  d106              BNE      |L12.96|
000052  4846              LDR      r0,|L12.364|
000054  4284              CMP      r4,r0                 ;179
000056  d801              BHI      |L12.92|
000058  2001              MOVS     r0,#1                 ;179
00005a  e01d              B        |L12.152|
                  |L12.92|
00005c  2000              MOVS     r0,#0                 ;179
00005e  e01b              B        |L12.152|
                  |L12.96|
000060  4841              LDR      r0,|L12.360|
000062  8800              LDRH     r0,[r0,#0]            ;179
000064  2840              CMP      r0,#0x40              ;179
000066  d106              BNE      |L12.118|
000068  4841              LDR      r0,|L12.368|
00006a  4284              CMP      r4,r0                 ;179
00006c  d801              BHI      |L12.114|
00006e  2001              MOVS     r0,#1                 ;179
000070  e012              B        |L12.152|
                  |L12.114|
000072  2000              MOVS     r0,#0                 ;179
000074  e010              B        |L12.152|
                  |L12.118|
000076  483c              LDR      r0,|L12.360|
000078  8800              LDRH     r0,[r0,#0]            ;179
00007a  2820              CMP      r0,#0x20              ;179
00007c  d106              BNE      |L12.140|
00007e  483d              LDR      r0,|L12.372|
000080  4284              CMP      r4,r0                 ;179
000082  d801              BHI      |L12.136|
000084  2001              MOVS     r0,#1                 ;179
000086  e007              B        |L12.152|
                  |L12.136|
000088  2000              MOVS     r0,#0                 ;179
00008a  e005              B        |L12.152|
                  |L12.140|
00008c  483a              LDR      r0,|L12.376|
00008e  4284              CMP      r4,r0                 ;179
000090  d801              BHI      |L12.150|
000092  2001              MOVS     r0,#1                 ;179
000094  e000              B        |L12.152|
                  |L12.150|
000096  2000              MOVS     r0,#0                 ;179
                  |L12.152|
000098  b100              CBZ      r0,|L12.156|
00009a  e003              B        |L12.164|
                  |L12.156|
00009c  21b3              MOVS     r1,#0xb3              ;179
00009e  a023              ADR      r0,|L12.300|
0000a0  f7fffffe          BL       assert_failed
                  |L12.164|
0000a4  f24c3050          MOV      r0,#0xc350            ;186
0000a8  f7fffffe          BL       FLASH_WaitForLastOperation
0000ac  4681              MOV      r9,r0                 ;186
0000ae  f1b90f00          CMP      r9,#0                 ;196
0000b2  d132              BNE      |L12.282|
0000b4  2d01              CMP      r5,#1                 ;198
0000b6  d102              BNE      |L12.190|
0000b8  2001              MOVS     r0,#1                 ;201
0000ba  9002              STR      r0,[sp,#8]            ;201
0000bc  e006              B        |L12.204|
                  |L12.190|
0000be  2d02              CMP      r5,#2                 ;203
0000c0  d102              BNE      |L12.200|
0000c2  2002              MOVS     r0,#2                 ;206
0000c4  9002              STR      r0,[sp,#8]            ;206
0000c6  e001              B        |L12.204|
                  |L12.200|
0000c8  2004              MOVS     r0,#4                 ;211
0000ca  9002              STR      r0,[sp,#8]            ;211
                  |L12.204|
0000cc  2600              MOVS     r6,#0                 ;214
0000ce  e020              B        |L12.274|
                  |L12.208|
0000d0  0132              LSLS     r2,r6,#4              ;216
0000d2  46ba              MOV      r10,r7                ;216
0000d4  46c3              MOV      r11,r8                ;216
0000d6  4650              MOV      r0,r10                ;216
0000d8  4659              MOV      r1,r11                ;216
0000da  f7fffffe          BL       __aeabi_llsr
0000de  b280              UXTH     r0,r0                 ;216
0000e0  9001              STR      r0,[sp,#4]            ;216
0000e2  2002              MOVS     r0,#2                 ;216
0000e4  fb004006          MLA      r0,r0,r6,r4           ;216
0000e8  9000              STR      r0,[sp,#0]            ;216
0000ea  9901              LDR      r1,[sp,#4]            ;216
0000ec  f7fffffe          BL       FLASH_Program_HalfWord
0000f0  f24c3050          MOV      r0,#0xc350            ;223
0000f4  f7fffffe          BL       FLASH_WaitForLastOperation
0000f8  4681              MOV      r9,r0                 ;223
0000fa  4820              LDR      r0,|L12.380|
0000fc  6900              LDR      r0,[r0,#0x10]         ;226
0000fe  f0200001          BIC      r0,r0,#1              ;226
000102  491e              LDR      r1,|L12.380|
000104  6108              STR      r0,[r1,#0x10]         ;226
000106  f1b90f00          CMP      r9,#0                 ;239
00010a  d000              BEQ      |L12.270|
00010c  e004              B        |L12.280|
                  |L12.270|
00010e  1c70              ADDS     r0,r6,#1              ;214
000110  b2c6              UXTB     r6,r0                 ;214
                  |L12.274|
000112  9802              LDR      r0,[sp,#8]            ;214
000114  4286              CMP      r6,r0                 ;214
000116  dbdb              BLT      |L12.208|
                  |L12.280|
000118  bf00              NOP                            ;241
                  |L12.282|
00011a  bf00              NOP                            ;247
00011c  2000              MOVS     r0,#0                 ;247
00011e  4902              LDR      r1,|L12.296|
000120  7608              STRB     r0,[r1,#0x18]         ;247
000122  bf00              NOP                            ;247
000124  4648              MOV      r0,r9                 ;249
000126  e77c              B        |L12.34|
;;;251    
                          ENDP

                  |L12.296|
                          DCD      pFlash
                  |L12.300|
00012c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
000130  72697665
000134  72732f53
000138  544d3332
00013c  46317878
000140  5f48414c
000144  5f447269
000148  7665722f
00014c  5372632f
000150  73746d33
000154  32663178
000158  785f6861
00015c  6c5f666c
000160  617368  
000163  2e6300            DCB      ".c",0
000166  00                DCB      0
000167  00                DCB      0
                  |L12.360|
                          DCD      0x1ffff7e0
                  |L12.364|
                          DCD      0x0801ffff
                  |L12.368|
                          DCD      0x0800ffff
                  |L12.372|
                          DCD      0x08007fff
                  |L12.376|
                          DCD      0x08003fff
                  |L12.380|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;266      */
;;;267    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;268    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;269      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;270      
;;;271      /* Process Locked */
;;;272      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  4836              LDR      r0,|L13.236|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L13.32|
00001a  2002              MOVS     r0,#2
                  |L13.28|
;;;273    
;;;274      /* Check the parameters */
;;;275      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;276      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;277    
;;;278    #if defined(FLASH_BANK2_END)
;;;279      /* If procedure already ongoing, reject the next one */
;;;280      if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
;;;281      {
;;;282        return HAL_ERROR;
;;;283      }
;;;284      
;;;285      if(Address <= FLASH_BANK1_END)
;;;286      {
;;;287        /* Enable End of FLASH Operation and Error source interrupts */
;;;288        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1);
;;;289    
;;;290      }else
;;;291      {
;;;292        /* Enable End of FLASH Operation and Error source interrupts */
;;;293        __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
;;;294      }
;;;295    #else
;;;296      /* Enable End of FLASH Operation and Error source interrupts */
;;;297      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
;;;298    #endif /* FLASH_BANK2_END */
;;;299      
;;;300      pFlash.Address = Address;
;;;301      pFlash.Data = Data;
;;;302    
;;;303      if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;304      {
;;;305        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
;;;306        /* Program halfword (16-bit) at a specified address. */
;;;307        pFlash.DataRemaining = 1U;
;;;308      }
;;;309      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;310      {
;;;311        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
;;;312        /* Program word (32-bit : 2*16-bit) at a specified address. */
;;;313        pFlash.DataRemaining = 2U;
;;;314      }
;;;315      else
;;;316      {
;;;317        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
;;;318        /* Program double word (64-bit : 4*16-bit) at a specified address. */
;;;319        pFlash.DataRemaining = 4U;
;;;320      }
;;;321    
;;;322      /* Program halfword (16-bit) at a specified address. */
;;;323      FLASH_Program_HalfWord(Address, (uint16_t)Data);
;;;324    
;;;325      return status;
;;;326    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L13.32|
000020  2001              MOVS     r0,#1                 ;272
000022  4932              LDR      r1,|L13.236|
000024  7608              STRB     r0,[r1,#0x18]         ;272
000026  bf00              NOP                            ;272
000028  2d01              CMP      r5,#1                 ;275
00002a  d003              BEQ      |L13.52|
00002c  2d02              CMP      r5,#2                 ;275
00002e  d001              BEQ      |L13.52|
000030  2d03              CMP      r5,#3                 ;275
000032  d100              BNE      |L13.54|
                  |L13.52|
000034  e004              B        |L13.64|
                  |L13.54|
000036  f2401113          MOV      r1,#0x113             ;275
00003a  a02d              ADR      r0,|L13.240|
00003c  f7fffffe          BL       assert_failed
                  |L13.64|
000040  f1b46f00          CMP      r4,#0x8000000         ;276
000044  d328              BCC      |L13.152|
000046  4839              LDR      r0,|L13.300|
000048  8800              LDRH     r0,[r0,#0]            ;276
00004a  2880              CMP      r0,#0x80              ;276
00004c  d106              BNE      |L13.92|
00004e  4838              LDR      r0,|L13.304|
000050  4284              CMP      r4,r0                 ;276
000052  d801              BHI      |L13.88|
000054  2001              MOVS     r0,#1                 ;276
000056  e01d              B        |L13.148|
                  |L13.88|
000058  2000              MOVS     r0,#0                 ;276
00005a  e01b              B        |L13.148|
                  |L13.92|
00005c  4833              LDR      r0,|L13.300|
00005e  8800              LDRH     r0,[r0,#0]            ;276
000060  2840              CMP      r0,#0x40              ;276
000062  d106              BNE      |L13.114|
000064  4833              LDR      r0,|L13.308|
000066  4284              CMP      r4,r0                 ;276
000068  d801              BHI      |L13.110|
00006a  2001              MOVS     r0,#1                 ;276
00006c  e012              B        |L13.148|
                  |L13.110|
00006e  2000              MOVS     r0,#0                 ;276
000070  e010              B        |L13.148|
                  |L13.114|
000072  482e              LDR      r0,|L13.300|
000074  8800              LDRH     r0,[r0,#0]            ;276
000076  2820              CMP      r0,#0x20              ;276
000078  d106              BNE      |L13.136|
00007a  482f              LDR      r0,|L13.312|
00007c  4284              CMP      r4,r0                 ;276
00007e  d801              BHI      |L13.132|
000080  2001              MOVS     r0,#1                 ;276
000082  e007              B        |L13.148|
                  |L13.132|
000084  2000              MOVS     r0,#0                 ;276
000086  e005              B        |L13.148|
                  |L13.136|
000088  482c              LDR      r0,|L13.316|
00008a  4284              CMP      r4,r0                 ;276
00008c  d801              BHI      |L13.146|
00008e  2001              MOVS     r0,#1                 ;276
000090  e000              B        |L13.148|
                  |L13.146|
000092  2000              MOVS     r0,#0                 ;276
                  |L13.148|
000094  b100              CBZ      r0,|L13.152|
000096  e004              B        |L13.162|
                  |L13.152|
000098  f44f718a          MOV      r1,#0x114             ;276
00009c  a014              ADR      r0,|L13.240|
00009e  f7fffffe          BL       assert_failed
                  |L13.162|
0000a2  4827              LDR      r0,|L13.320|
0000a4  6900              LDR      r0,[r0,#0x10]         ;297
0000a6  f44050a0          ORR      r0,r0,#0x1400         ;297
0000aa  4925              LDR      r1,|L13.320|
0000ac  6108              STR      r0,[r1,#0x10]         ;297
0000ae  480f              LDR      r0,|L13.236|
0000b0  6084              STR      r4,[r0,#8]            ;300  ; pFlash
0000b2  6106              STR      r6,[r0,#0x10]         ;301  ; pFlash
0000b4  6147              STR      r7,[r0,#0x14]         ;301  ; pFlash
0000b6  2d01              CMP      r5,#1                 ;303
0000b8  d105              BNE      |L13.198|
0000ba  2003              MOVS     r0,#3                 ;305
0000bc  490b              LDR      r1,|L13.236|
0000be  7008              STRB     r0,[r1,#0]            ;305
0000c0  2001              MOVS     r0,#1                 ;307
0000c2  6048              STR      r0,[r1,#4]            ;307  ; pFlash
0000c4  e00c              B        |L13.224|
                  |L13.198|
0000c6  2d02              CMP      r5,#2                 ;309
0000c8  d105              BNE      |L13.214|
0000ca  2004              MOVS     r0,#4                 ;311
0000cc  4907              LDR      r1,|L13.236|
0000ce  7008              STRB     r0,[r1,#0]            ;311
0000d0  2002              MOVS     r0,#2                 ;313
0000d2  6048              STR      r0,[r1,#4]            ;313  ; pFlash
0000d4  e004              B        |L13.224|
                  |L13.214|
0000d6  2005              MOVS     r0,#5                 ;317
0000d8  4904              LDR      r1,|L13.236|
0000da  7008              STRB     r0,[r1,#0]            ;317
0000dc  2004              MOVS     r0,#4                 ;319
0000de  6048              STR      r0,[r1,#4]            ;319  ; pFlash
                  |L13.224|
0000e0  b2b1              UXTH     r1,r6                 ;323
0000e2  4620              MOV      r0,r4                 ;323
0000e4  f7fffffe          BL       FLASH_Program_HalfWord
0000e8  4640              MOV      r0,r8                 ;325
0000ea  e797              B        |L13.28|
;;;327    
                          ENDP

                  |L13.236|
                          DCD      pFlash
                  |L13.240|
0000f0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash"
0000f4  72697665
0000f8  72732f53
0000fc  544d3332
000100  46317878
000104  5f48414c
000108  5f447269
00010c  7665722f
000110  5372632f
000114  73746d33
000118  32663178
00011c  785f6861
000120  6c5f666c
000124  617368  
000127  2e6300            DCB      ".c",0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L13.300|
                          DCD      0x1ffff7e0
                  |L13.304|
                          DCD      0x0801ffff
                  |L13.308|
                          DCD      0x0800ffff
                  |L13.312|
                          DCD      0x08007fff
                  |L13.316|
                          DCD      0x08003fff
                  |L13.320|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;656      */
;;;657    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;658    {
;;;659      HAL_StatusTypeDef status = HAL_OK;
;;;660    
;;;661      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4908              LDR      r1,|L14.36|
000004  6909              LDR      r1,[r1,#0x10]
000006  f0010180          AND      r1,r1,#0x80
00000a  b151              CBZ      r1,|L14.34|
;;;662      {
;;;663        /* Authorize the FLASH Registers access */
;;;664        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4906              LDR      r1,|L14.40|
00000e  4a05              LDR      r2,|L14.36|
000010  6051              STR      r1,[r2,#4]
;;;665        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000012  4906              LDR      r1,|L14.44|
000014  6051              STR      r1,[r2,#4]
;;;666    
;;;667        /* Verify Flash is unlocked */
;;;668        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000016  4611              MOV      r1,r2
000018  6909              LDR      r1,[r1,#0x10]
00001a  f0010180          AND      r1,r1,#0x80
00001e  b101              CBZ      r1,|L14.34|
;;;669        {
;;;670          status = HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L14.34|
;;;671        }
;;;672      }
;;;673    #if defined(FLASH_BANK2_END)
;;;674      if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;675      {
;;;676        /* Authorize the FLASH BANK2 Registers access */
;;;677        WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
;;;678        WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
;;;679        
;;;680        /* Verify Flash BANK2 is unlocked */
;;;681        if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
;;;682        {
;;;683          status = HAL_ERROR;
;;;684        }
;;;685      }
;;;686    #endif /* FLASH_BANK2_END */
;;;687    
;;;688      return status;
;;;689    }
000022  4770              BX       lr
;;;690    
                          ENDP

                  |L14.36|
                          DCD      0x40022000
                  |L14.40|
                          DCD      0x45670123
                  |L14.44|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH|
#line 478
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX|
#line 665
|__asm___21_stm32f1xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
