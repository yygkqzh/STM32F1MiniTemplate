; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;505      */
;;;506    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4803              LDR      r0,|L1.16|
;;;507    {
;;;508      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6048              STR      r0,[r1,#4]
;;;509    }
00000c  4770              BX       lr
;;;510    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;583      */
;;;584    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4803              LDR      r0,|L2.16|
;;;585    {
;;;586      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0200004          BIC      r0,r0,#4
000008  4901              LDR      r1,|L2.16|
00000a  6048              STR      r0,[r1,#4]
;;;587    }
00000c  4770              BX       lr
;;;588    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;551      */
;;;552    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4803              LDR      r0,|L3.16|
;;;553    {
;;;554      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L3.16|
00000a  6048              STR      r0,[r1,#4]
;;;555    }
00000c  4770              BX       lr
;;;556    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;489      */
;;;490    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4803              LDR      r0,|L4.16|
;;;491    {
;;;492      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  6048              STR      r0,[r1,#4]
;;;493    }
00000c  4770              BX       lr
;;;494    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;567      */
;;;568    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4803              LDR      r0,|L5.16|
;;;569    {
;;;570      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L5.16|
00000a  6048              STR      r0,[r1,#4]
;;;571    }
00000c  4770              BX       lr
;;;572    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;535      */
;;;536    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4803              LDR      r0,|L6.16|
;;;537    {
;;;538      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;539    }
00000c  4770              BX       lr
;;;540    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;174      */
;;;175    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;176    {
;;;177      /* Reset of all peripherals */
;;;178      __HAL_RCC_APB1_FORCE_RESET();
000002  f04f30ff          MOV      r0,#0xffffffff
000006  4906              LDR      r1,|L7.32|
000008  60c8              STR      r0,[r1,#0xc]
;;;179      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2000              MOVS     r0,#0
00000c  6108              STR      r0,[r1,#0x10]
;;;180    
;;;181      __HAL_RCC_APB2_FORCE_RESET();
00000e  1e40              SUBS     r0,r0,#1
000010  60c8              STR      r0,[r1,#0xc]
;;;182      __HAL_RCC_APB2_RELEASE_RESET();
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]
;;;183    
;;;184    #if defined(STM32F105xC) || defined(STM32F107xC)
;;;185      __HAL_RCC_AHB_FORCE_RESET();
;;;186      __HAL_RCC_AHB_RELEASE_RESET();
;;;187    #endif
;;;188    
;;;189      /* De-Init the low level hardware */
;;;190      HAL_MspDeInit();
000016  f7fffffe          BL       HAL_MspDeInit
;;;191    
;;;192      /* Return function status */
;;;193      return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;194    }
00001c  bd10              POP      {r4,pc}
;;;195    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x40021000

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;369      */
;;;370    __weak void HAL_Delay(uint32_t Delay)
000000  b570              PUSH     {r4-r6,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;373      uint32_t wait = Delay;
00000a  4625              MOV      r5,r4
;;;374    
;;;375      /* Add a freq to guarantee minimum wait */
;;;376      if (wait < HAL_MAX_DELAY)
00000c  1c68              ADDS     r0,r5,#1
00000e  b110              CBZ      r0,|L8.22|
;;;377      {
;;;378        wait += (uint32_t)(uwTickFreq);
000010  4804              LDR      r0,|L8.36|
000012  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000014  4405              ADD      r5,r5,r0
                  |L8.22|
;;;379      }
;;;380    
;;;381      while ((HAL_GetTick() - tickstart) < wait)
000016  bf00              NOP      
                  |L8.24|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d3fa              BCC      |L8.24|
;;;382      {
;;;383      }
;;;384    }
000022  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP

                  |L8.36|
                          DCD      uwTickFreq

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;453      */
;;;454    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L9.12|
;;;455    {
;;;456      return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;457    }
000008  4770              BX       lr
;;;458    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;421      */
;;;422    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L10.4|
;;;423    {
;;;424      return __STM32F1xx_HAL_VERSION;
;;;425    }
000002  4770              BX       lr
;;;426    
                          ENDP

                  |L10.4|
                          DCD      0x01010700

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;437      */
;;;438    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L11.8|
;;;439    {
;;;440      return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;441    }
000006  4770              BX       lr
;;;442    
                          ENDP

                  |L11.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;303      */
;;;304    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L12.8|
;;;305    {
;;;306      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;307    }
000004  4770              BX       lr
;;;308    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      uwTick

                          AREA ||i.HAL_GetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_GetTickFreq PROC
;;;353      */
;;;354    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
000000  4801              LDR      r0,|L13.8|
;;;355    {
;;;356      return uwTickFreq;
000002  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
;;;357    }
000004  4770              BX       lr
;;;358    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      uwTickFreq

                          AREA ||i.HAL_GetTickPrio||, CODE, READONLY, ALIGN=2

                  HAL_GetTickPrio PROC
;;;312      */
;;;313    uint32_t HAL_GetTickPrio(void)
000000  4801              LDR      r0,|L14.8|
;;;314    {
;;;315      return uwTickPrio;
000002  6800              LDR      r0,[r0,#0]  ; uwTickPrio
;;;316    }
000004  4770              BX       lr
;;;317    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      uwTickPrio

                          AREA ||i.HAL_GetUIDw0||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw0 PROC
;;;462      */
;;;463    uint32_t HAL_GetUIDw0(void)
000000  4801              LDR      r0,|L15.8|
;;;464    {
;;;465       return(READ_REG(*((uint32_t *)UID_BASE)));
000002  6800              LDR      r0,[r0,#0]
;;;466    }
000004  4770              BX       lr
;;;467    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      0x1ffff7e8

                          AREA ||i.HAL_GetUIDw1||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw1 PROC
;;;471      */
;;;472    uint32_t HAL_GetUIDw1(void)
000000  4801              LDR      r0,|L16.8|
;;;473    {
;;;474       return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000002  6800              LDR      r0,[r0,#0]
;;;475    }
000004  4770              BX       lr
;;;476    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      0x1ffff7ec

                          AREA ||i.HAL_GetUIDw2||, CODE, READONLY, ALIGN=2

                  HAL_GetUIDw2 PROC
;;;480      */
;;;481    uint32_t HAL_GetUIDw2(void)
000000  4801              LDR      r0,|L17.8|
;;;482    {
;;;483       return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
000002  6800              LDR      r0,[r0,#0]
;;;484    }
000004  4770              BX       lr
;;;485    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x1ffff7f0

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;292      */
;;;293    __weak void HAL_IncTick(void)
000000  4803              LDR      r0,|L18.16|
;;;294    {
;;;295      uwTick += uwTickFreq;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  4903              LDR      r1,|L18.20|
000006  7809              LDRB     r1,[r1,#0]  ; uwTickFreq
000008  4408              ADD      r0,r0,r1
00000a  4901              LDR      r1,|L18.16|
00000c  6008              STR      r0,[r1,#0]  ; uwTick
;;;296    }
00000e  4770              BX       lr
;;;297    
                          ENDP

                  |L18.16|
                          DCD      uwTick
                  |L18.20|
                          DCD      uwTickFreq

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;141      */
;;;142    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144      /* Configure Flash prefetch */
;;;145    #if (PREFETCH_ENABLE != 0)
;;;146    #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) || \
;;;147        defined(STM32F102x6) || defined(STM32F102xB) || \
;;;148        defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
;;;149        defined(STM32F105xC) || defined(STM32F107xC)
;;;150    
;;;151      /* Prefetch buffer is not available on value line devices */
;;;152      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000002  4808              LDR      r0,|L19.36|
000004  6800              LDR      r0,[r0,#0]
000006  f0400010          ORR      r0,r0,#0x10
00000a  4906              LDR      r1,|L19.36|
00000c  6008              STR      r0,[r1,#0]
;;;153    #endif
;;;154    #endif /* PREFETCH_ENABLE */
;;;155    
;;;156      /* Set Interrupt Group Priority */
;;;157      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;158    
;;;159      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;160      HAL_InitTick(TICK_INT_PRIORITY);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       HAL_InitTick
;;;161    
;;;162      /* Init the low level hardware */
;;;163      HAL_MspInit();
00001a  f7fffffe          BL       HAL_MspInit
;;;164    
;;;165      /* Return function status */
;;;166      return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;167    }
000020  bd10              POP      {r4,pc}
;;;168    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0x40022000

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;233      */
;;;234    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236      /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;237      if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
000004  480e              LDR      r0,|L20.64|
000006  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb1f0f0          UDIV     r0,r1,r0
000010  490c              LDR      r1,|L20.68|
000012  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000014  fbb1f5f0          UDIV     r5,r1,r0
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_SYSTICK_Config
00001e  b108              CBZ      r0,|L20.36|
;;;238      {
;;;239        return HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L20.34|
;;;240      }
;;;241    
;;;242      /* Configure the SysTick IRQ priority */
;;;243      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
;;;244      {
;;;245        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
;;;246        uwTickPrio = TickPriority;
;;;247      }
;;;248      else
;;;249      {
;;;250        return HAL_ERROR;
;;;251      }
;;;252    
;;;253      /* Return function status */
;;;254      return HAL_OK;
;;;255    }
000022  bd70              POP      {r4-r6,pc}
                  |L20.36|
000024  2c10              CMP      r4,#0x10              ;243
000026  d207              BCS      |L20.56|
000028  2200              MOVS     r2,#0                 ;245
00002a  4621              MOV      r1,r4                 ;245
00002c  1e50              SUBS     r0,r2,#1              ;245
00002e  f7fffffe          BL       HAL_NVIC_SetPriority
000032  4805              LDR      r0,|L20.72|
000034  6004              STR      r4,[r0,#0]            ;246  ; uwTickPrio
000036  e001              B        |L20.60|
                  |L20.56|
000038  2001              MOVS     r0,#1                 ;250
00003a  e7f2              B        |L20.34|
                  |L20.60|
00003c  2000              MOVS     r0,#0                 ;254
00003e  e7f0              B        |L20.34|
;;;256    
                          ENDP

                  |L20.64|
                          DCD      uwTickFreq
                  |L20.68|
                          DCD      SystemCoreClock
                  |L20.72|
                          DCD      uwTickPrio

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;210      */
;;;211    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;212    {
;;;213      /* NOTE : This function should not be modified, when the callback is needed,
;;;214                the HAL_MspDeInit could be implemented in the user file
;;;215       */
;;;216    }
;;;217    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;199      */
;;;200    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;201    {
;;;202      /* NOTE : This function should not be modified, when the callback is needed,
;;;203                the HAL_MspInit could be implemented in the user file
;;;204       */
;;;205    }
;;;206    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;411      */
;;;412    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;413    {
;;;414      /* Enable SysTick Interrupt */
;;;415      SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
000004  6900              LDR      r0,[r0,#0x10]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;416    }
000010  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.HAL_SetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_SetTickFreq PROC
;;;321      */
;;;322    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
000000  b570              PUSH     {r4-r6,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324      HAL_StatusTypeDef status  = HAL_OK;
000004  2500              MOVS     r5,#0
;;;325      HAL_TickFreqTypeDef prevTickFreq;
;;;326    
;;;327      assert_param(IS_TICKFREQ(Freq));
000006  2c64              CMP      r4,#0x64
000008  d003              BEQ      |L24.18|
00000a  2c0a              CMP      r4,#0xa
00000c  d001              BEQ      |L24.18|
00000e  2c01              CMP      r4,#1
000010  d100              BNE      |L24.20|
                  |L24.18|
000012  e004              B        |L24.30|
                  |L24.20|
000014  f2401147          MOV      r1,#0x147
000018  a009              ADR      r0,|L24.64|
00001a  f7fffffe          BL       assert_failed
                  |L24.30|
;;;328    
;;;329      if (uwTickFreq != Freq)
00001e  4815              LDR      r0,|L24.116|
000020  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000022  42a0              CMP      r0,r4
000024  d00a              BEQ      |L24.60|
;;;330      {
;;;331        /* Back up uwTickFreq frequency */
;;;332        prevTickFreq = uwTickFreq;
000026  4813              LDR      r0,|L24.116|
000028  7806              LDRB     r6,[r0,#0]  ; uwTickFreq
;;;333    
;;;334        /* Update uwTickFreq global variable used by HAL_InitTick() */
;;;335        uwTickFreq = Freq;
00002a  7004              STRB     r4,[r0,#0]
;;;336    
;;;337        /* Apply the new tick Freq  */
;;;338        status = HAL_InitTick(uwTickPrio);
00002c  4812              LDR      r0,|L24.120|
00002e  6800              LDR      r0,[r0,#0]  ; uwTickPrio
000030  f7fffffe          BL       HAL_InitTick
000034  4605              MOV      r5,r0
;;;339    
;;;340        if (status != HAL_OK)
000036  b10d              CBZ      r5,|L24.60|
;;;341        {
;;;342          /* Restore previous tick frequency */
;;;343          uwTickFreq = prevTickFreq;
000038  480e              LDR      r0,|L24.116|
00003a  7006              STRB     r6,[r0,#0]
                  |L24.60|
;;;344        }
;;;345      }
;;;346    
;;;347      return status;
00003c  4628              MOV      r0,r5
;;;348    }
00003e  bd70              POP      {r4-r6,pc}
;;;349    
                          ENDP

                  |L24.64|
000040  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c",0
000044  72697665
000048  72732f53
00004c  544d3332
000050  46317878
000054  5f48414c
000058  5f447269
00005c  7665722f
000060  5372632f
000064  73746d33
000068  32663178
00006c  785f6861
000070  6c2e6300
                  |L24.116|
                          DCD      uwTickFreq
                  |L24.120|
                          DCD      uwTickPrio

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;395      */
;;;396    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;397    {
;;;398      /* Disable SysTick Interrupt */
;;;399      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
000004  6900              LDR      r0,[r0,#0x10]
000006  f0200002          BIC      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;400    }
000010  4770              BX       lr
;;;401    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000
                  uwTickPrio
                          DCD      0x00000010
                  uwTickFreq
000008  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___15_stm32f1xx_hal_c_3da258af____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____REVSH|
#line 478
|__asm___15_stm32f1xx_hal_c_3da258af____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f1xx_hal_c_3da258af____RRX|
#line 665
|__asm___15_stm32f1xx_hal_c_3da258af____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
