; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\stm32f1xx_hal_rcc.o --asm_dir=./ --list_dir=--list --depend=template\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\stm32f1xx_hal_rcc.crf ../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1378     */
;;;1379   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1380   {
;;;1381     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1382       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1383       */
;;;1384   }
;;;1385   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;812      */
;;;813    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;814    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;815      uint32_t tickstart;
;;;816    
;;;817      /* Check Null pointer */
;;;818      if (RCC_ClkInitStruct == NULL)
000006  b90c              CBNZ     r4,|L2.12|
;;;819      {
;;;820        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;821      }
;;;822    
;;;823      /* Check the parameters */
;;;824      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;825      assert_param(IS_FLASH_LATENCY(FLatency));
;;;826    
;;;827      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;828      must be correctly programmed according to the frequency of the CPU clock
;;;829        (HCLK) of the device. */
;;;830    
;;;831    #if defined(FLASH_ACR_LATENCY)
;;;832      /* Increasing the number of wait states because of higher CPU frequency */
;;;833      if (FLatency > __HAL_FLASH_GET_LATENCY())
;;;834      {
;;;835        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;836        __HAL_FLASH_SET_LATENCY(FLatency);
;;;837    
;;;838        /* Check that the new number of wait states is taken into account to access the Flash
;;;839        memory by reading the FLASH_ACR register */
;;;840        if (__HAL_FLASH_GET_LATENCY() != FLatency)
;;;841      {
;;;842        return HAL_ERROR;
;;;843      }
;;;844    }
;;;845    
;;;846    #endif /* FLASH_ACR_LATENCY */
;;;847    /*-------------------------- HCLK Configuration --------------------------*/
;;;848    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;849      {
;;;850        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;851        a non-spec phase whatever we decrease or increase HCLK. */
;;;852        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;853        {
;;;854          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;855        }
;;;856    
;;;857        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;858        {
;;;859          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;860        }
;;;861    
;;;862        /* Set the new HCLK clock divider */
;;;863        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;864        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;865      }
;;;866    
;;;867      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;868      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;869      {
;;;870        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;871    
;;;872        /* HSE is selected as System Clock Source */
;;;873        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;874        {
;;;875          /* Check the HSE ready flag */
;;;876          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;877          {
;;;878            return HAL_ERROR;
;;;879          }
;;;880        }
;;;881        /* PLL is selected as System Clock Source */
;;;882        else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;883        {
;;;884          /* Check the PLL ready flag */
;;;885          if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;886          {
;;;887            return HAL_ERROR;
;;;888          }
;;;889        }
;;;890        /* HSI is selected as System Clock Source */
;;;891        else
;;;892        {
;;;893          /* Check the HSI ready flag */
;;;894          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;895          {
;;;896            return HAL_ERROR;
;;;897          }
;;;898        }
;;;899        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;900    
;;;901        /* Get Start Tick */
;;;902        tickstart = HAL_GetTick();
;;;903    
;;;904        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;905        {
;;;906          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;907          {
;;;908            return HAL_TIMEOUT;
;;;909          }
;;;910        }
;;;911      }
;;;912    
;;;913    #if defined(FLASH_ACR_LATENCY)
;;;914      /* Decreasing the number of wait states because of lower CPU frequency */
;;;915      if (FLatency < __HAL_FLASH_GET_LATENCY())
;;;916      {
;;;917        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;918        __HAL_FLASH_SET_LATENCY(FLatency);
;;;919    
;;;920        /* Check that the new number of wait states is taken into account to access the Flash
;;;921        memory by reading the FLASH_ACR register */
;;;922        if (__HAL_FLASH_GET_LATENCY() != FLatency)
;;;923      {
;;;924        return HAL_ERROR;
;;;925      }
;;;926    }
;;;927    #endif /* FLASH_ACR_LATENCY */
;;;928    
;;;929    /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;930    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;931      {
;;;932        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;933        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;934      }
;;;935    
;;;936      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;937      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;938      {
;;;939        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;940        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;941      }
;;;942    
;;;943      /* Update the SystemCoreClock global variable */
;;;944      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
;;;945    
;;;946      /* Configure the source of time base considering new system clocks settings*/
;;;947      HAL_InitTick(uwTickPrio);
;;;948    
;;;949      return HAL_OK;
;;;950    }
00000a  bd70              POP      {r4-r6,pc}
                  |L2.12|
00000c  7820              LDRB     r0,[r4,#0]            ;824
00000e  f0000001          AND      r0,r0,#1              ;824
000012  b970              CBNZ     r0,|L2.50|
000014  7820              LDRB     r0,[r4,#0]            ;824
000016  f0000002          AND      r0,r0,#2              ;824
00001a  2802              CMP      r0,#2                 ;824
00001c  d009              BEQ      |L2.50|
00001e  7820              LDRB     r0,[r4,#0]            ;824
000020  f0000004          AND      r0,r0,#4              ;824
000024  2804              CMP      r0,#4                 ;824
000026  d004              BEQ      |L2.50|
000028  7820              LDRB     r0,[r4,#0]            ;824
00002a  f0000008          AND      r0,r0,#8              ;824
00002e  2808              CMP      r0,#8                 ;824
000030  d100              BNE      |L2.52|
                  |L2.50|
000032  e004              B        |L2.62|
                  |L2.52|
000034  f44f714e          MOV      r1,#0x338             ;824
000038  a090              ADR      r0,|L2.636|
00003a  f7fffffe          BL       assert_failed
                  |L2.62|
00003e  b11d              CBZ      r5,|L2.72|
000040  2d01              CMP      r5,#1                 ;825
000042  d001              BEQ      |L2.72|
000044  2d02              CMP      r5,#2                 ;825
000046  d100              BNE      |L2.74|
                  |L2.72|
000048  e004              B        |L2.84|
                  |L2.74|
00004a  f2403139          MOV      r1,#0x339             ;825
00004e  a08b              ADR      r0,|L2.636|
000050  f7fffffe          BL       assert_failed
                  |L2.84|
000054  4897              LDR      r0,|L2.692|
000056  6800              LDR      r0,[r0,#0]            ;833
000058  f0000007          AND      r0,r0,#7              ;833
00005c  42a8              CMP      r0,r5                 ;833
00005e  d20e              BCS      |L2.126|
000060  4894              LDR      r0,|L2.692|
000062  6800              LDR      r0,[r0,#0]            ;836
000064  f0200007          BIC      r0,r0,#7              ;836
000068  4328              ORRS     r0,r0,r5              ;836
00006a  4992              LDR      r1,|L2.692|
00006c  6008              STR      r0,[r1,#0]            ;836
00006e  4608              MOV      r0,r1                 ;840
000070  6800              LDR      r0,[r0,#0]            ;840
000072  f0000007          AND      r0,r0,#7              ;840
000076  42a8              CMP      r0,r5                 ;840
000078  d001              BEQ      |L2.126|
00007a  2001              MOVS     r0,#1                 ;842
00007c  e7c5              B        |L2.10|
                  |L2.126|
00007e  7820              LDRB     r0,[r4,#0]            ;848
000080  f0000002          AND      r0,r0,#2              ;848
000084  2802              CMP      r0,#2                 ;848
000086  d13d              BNE      |L2.260|
000088  7820              LDRB     r0,[r4,#0]            ;852
00008a  f0000004          AND      r0,r0,#4              ;852
00008e  2804              CMP      r0,#4                 ;852
000090  d105              BNE      |L2.158|
000092  4889              LDR      r0,|L2.696|
000094  6840              LDR      r0,[r0,#4]            ;854
000096  f44060e0          ORR      r0,r0,#0x700          ;854
00009a  4987              LDR      r1,|L2.696|
00009c  6048              STR      r0,[r1,#4]            ;854
                  |L2.158|
00009e  7820              LDRB     r0,[r4,#0]            ;857
0000a0  f0000008          AND      r0,r0,#8              ;857
0000a4  2808              CMP      r0,#8                 ;857
0000a6  d105              BNE      |L2.180|
0000a8  4883              LDR      r0,|L2.696|
0000aa  6840              LDR      r0,[r0,#4]            ;859
0000ac  f4405060          ORR      r0,r0,#0x3800         ;859
0000b0  4981              LDR      r1,|L2.696|
0000b2  6048              STR      r0,[r1,#4]            ;859
                  |L2.180|
0000b4  68a0              LDR      r0,[r4,#8]            ;863
0000b6  b1b8              CBZ      r0,|L2.232|
0000b8  68a0              LDR      r0,[r4,#8]            ;863
0000ba  2880              CMP      r0,#0x80              ;863
0000bc  d014              BEQ      |L2.232|
0000be  68a0              LDR      r0,[r4,#8]            ;863
0000c0  2890              CMP      r0,#0x90              ;863
0000c2  d011              BEQ      |L2.232|
0000c4  68a0              LDR      r0,[r4,#8]            ;863
0000c6  28a0              CMP      r0,#0xa0              ;863
0000c8  d00e              BEQ      |L2.232|
0000ca  68a0              LDR      r0,[r4,#8]            ;863
0000cc  28b0              CMP      r0,#0xb0              ;863
0000ce  d00b              BEQ      |L2.232|
0000d0  68a0              LDR      r0,[r4,#8]            ;863
0000d2  28c0              CMP      r0,#0xc0              ;863
0000d4  d008              BEQ      |L2.232|
0000d6  68a0              LDR      r0,[r4,#8]            ;863
0000d8  28d0              CMP      r0,#0xd0              ;863
0000da  d005              BEQ      |L2.232|
0000dc  68a0              LDR      r0,[r4,#8]            ;863
0000de  28e0              CMP      r0,#0xe0              ;863
0000e0  d002              BEQ      |L2.232|
0000e2  68a0              LDR      r0,[r4,#8]            ;863
0000e4  28f0              CMP      r0,#0xf0              ;863
0000e6  d100              BNE      |L2.234|
                  |L2.232|
0000e8  e004              B        |L2.244|
                  |L2.234|
0000ea  f240315f          MOV      r1,#0x35f             ;863
0000ee  a063              ADR      r0,|L2.636|
0000f0  f7fffffe          BL       assert_failed
                  |L2.244|
0000f4  4870              LDR      r0,|L2.696|
0000f6  6840              LDR      r0,[r0,#4]            ;864
0000f8  f02000f0          BIC      r0,r0,#0xf0           ;864
0000fc  68a1              LDR      r1,[r4,#8]            ;864
0000fe  4308              ORRS     r0,r0,r1              ;864
000100  496d              LDR      r1,|L2.696|
000102  6048              STR      r0,[r1,#4]            ;864
                  |L2.260|
000104  7820              LDRB     r0,[r4,#0]            ;868
000106  f0000001          AND      r0,r0,#1              ;868
00010a  2800              CMP      r0,#0                 ;868
00010c  d045              BEQ      |L2.410|
00010e  6860              LDR      r0,[r4,#4]            ;870
000110  b128              CBZ      r0,|L2.286|
000112  6860              LDR      r0,[r4,#4]            ;870
000114  2801              CMP      r0,#1                 ;870
000116  d002              BEQ      |L2.286|
000118  6860              LDR      r0,[r4,#4]            ;870
00011a  2802              CMP      r0,#2                 ;870
00011c  d100              BNE      |L2.288|
                  |L2.286|
00011e  e004              B        |L2.298|
                  |L2.288|
000120  f2403166          MOV      r1,#0x366             ;870
000124  a055              ADR      r0,|L2.636|
000126  f7fffffe          BL       assert_failed
                  |L2.298|
00012a  6860              LDR      r0,[r4,#4]            ;873
00012c  2801              CMP      r0,#1                 ;873
00012e  d106              BNE      |L2.318|
000130  4861              LDR      r0,|L2.696|
000132  6800              LDR      r0,[r0,#0]            ;876
000134  f4003000          AND      r0,r0,#0x20000        ;876
000138  b990              CBNZ     r0,|L2.352|
00013a  2001              MOVS     r0,#1                 ;878
00013c  e765              B        |L2.10|
                  |L2.318|
00013e  6860              LDR      r0,[r4,#4]            ;882
000140  2802              CMP      r0,#2                 ;882
000142  d106              BNE      |L2.338|
000144  485c              LDR      r0,|L2.696|
000146  6800              LDR      r0,[r0,#0]            ;885
000148  f0007000          AND      r0,r0,#0x2000000      ;885
00014c  b940              CBNZ     r0,|L2.352|
00014e  2001              MOVS     r0,#1                 ;887
000150  e75b              B        |L2.10|
                  |L2.338|
000152  4859              LDR      r0,|L2.696|
000154  6800              LDR      r0,[r0,#0]            ;894
000156  f0000002          AND      r0,r0,#2              ;894
00015a  b908              CBNZ     r0,|L2.352|
00015c  2001              MOVS     r0,#1                 ;896
00015e  e754              B        |L2.10|
                  |L2.352|
000160  4855              LDR      r0,|L2.696|
000162  6840              LDR      r0,[r0,#4]            ;899
000164  f0200003          BIC      r0,r0,#3              ;899
000168  6861              LDR      r1,[r4,#4]            ;899
00016a  4308              ORRS     r0,r0,r1              ;899
00016c  4952              LDR      r1,|L2.696|
00016e  6048              STR      r0,[r1,#4]            ;899
000170  f7fffffe          BL       HAL_GetTick
000174  4606              MOV      r6,r0                 ;902
000176  e008              B        |L2.394|
                  |L2.376|
000178  f7fffffe          BL       HAL_GetTick
00017c  1b80              SUBS     r0,r0,r6              ;906
00017e  f2413188          MOV      r1,#0x1388            ;906
000182  4288              CMP      r0,r1                 ;906
000184  d901              BLS      |L2.394|
000186  2003              MOVS     r0,#3                 ;908
000188  e73f              B        |L2.10|
                  |L2.394|
00018a  484b              LDR      r0,|L2.696|
00018c  6840              LDR      r0,[r0,#4]            ;904
00018e  f000000c          AND      r0,r0,#0xc            ;904
000192  6861              LDR      r1,[r4,#4]            ;904
000194  ebb00f81          CMP      r0,r1,LSL #2          ;904
000198  d1ee              BNE      |L2.376|
                  |L2.410|
00019a  4846              LDR      r0,|L2.692|
00019c  6800              LDR      r0,[r0,#0]            ;915
00019e  f0000007          AND      r0,r0,#7              ;915
0001a2  42a8              CMP      r0,r5                 ;915
0001a4  d90e              BLS      |L2.452|
0001a6  4843              LDR      r0,|L2.692|
0001a8  6800              LDR      r0,[r0,#0]            ;918
0001aa  f0200007          BIC      r0,r0,#7              ;918
0001ae  4328              ORRS     r0,r0,r5              ;918
0001b0  4940              LDR      r1,|L2.692|
0001b2  6008              STR      r0,[r1,#0]            ;918
0001b4  4608              MOV      r0,r1                 ;922
0001b6  6800              LDR      r0,[r0,#0]            ;922
0001b8  f0000007          AND      r0,r0,#7              ;922
0001bc  42a8              CMP      r0,r5                 ;922
0001be  d001              BEQ      |L2.452|
0001c0  2001              MOVS     r0,#1                 ;924
0001c2  e722              B        |L2.10|
                  |L2.452|
0001c4  7820              LDRB     r0,[r4,#0]            ;930
0001c6  f0000004          AND      r0,r0,#4              ;930
0001ca  2804              CMP      r0,#4                 ;930
0001cc  d11f              BNE      |L2.526|
0001ce  68e0              LDR      r0,[r4,#0xc]          ;932
0001d0  b178              CBZ      r0,|L2.498|
0001d2  68e0              LDR      r0,[r4,#0xc]          ;932
0001d4  f5b06f80          CMP      r0,#0x400             ;932
0001d8  d00b              BEQ      |L2.498|
0001da  68e0              LDR      r0,[r4,#0xc]          ;932
0001dc  f5b06fa0          CMP      r0,#0x500             ;932
0001e0  d007              BEQ      |L2.498|
0001e2  68e0              LDR      r0,[r4,#0xc]          ;932
0001e4  f5b06fc0          CMP      r0,#0x600             ;932
0001e8  d003              BEQ      |L2.498|
0001ea  68e0              LDR      r0,[r4,#0xc]          ;932
0001ec  f5b06fe0          CMP      r0,#0x700             ;932
0001f0  d100              BNE      |L2.500|
                  |L2.498|
0001f2  e004              B        |L2.510|
                  |L2.500|
0001f4  f44f7169          MOV      r1,#0x3a4             ;932
0001f8  a020              ADR      r0,|L2.636|
0001fa  f7fffffe          BL       assert_failed
                  |L2.510|
0001fe  482e              LDR      r0,|L2.696|
000200  6840              LDR      r0,[r0,#4]            ;933
000202  f42060e0          BIC      r0,r0,#0x700          ;933
000206  68e1              LDR      r1,[r4,#0xc]          ;933
000208  4308              ORRS     r0,r0,r1              ;933
00020a  492b              LDR      r1,|L2.696|
00020c  6048              STR      r0,[r1,#4]            ;933
                  |L2.526|
00020e  7820              LDRB     r0,[r4,#0]            ;937
000210  f0000008          AND      r0,r0,#8              ;937
000214  2808              CMP      r0,#8                 ;937
000216  d120              BNE      |L2.602|
000218  6920              LDR      r0,[r4,#0x10]         ;939
00021a  b178              CBZ      r0,|L2.572|
00021c  6920              LDR      r0,[r4,#0x10]         ;939
00021e  f5b06f80          CMP      r0,#0x400             ;939
000222  d00b              BEQ      |L2.572|
000224  6920              LDR      r0,[r4,#0x10]         ;939
000226  f5b06fa0          CMP      r0,#0x500             ;939
00022a  d007              BEQ      |L2.572|
00022c  6920              LDR      r0,[r4,#0x10]         ;939
00022e  f5b06fc0          CMP      r0,#0x600             ;939
000232  d003              BEQ      |L2.572|
000234  6920              LDR      r0,[r4,#0x10]         ;939
000236  f5b06fe0          CMP      r0,#0x700             ;939
00023a  d100              BNE      |L2.574|
                  |L2.572|
00023c  e004              B        |L2.584|
                  |L2.574|
00023e  f24031ab          MOV      r1,#0x3ab             ;939
000242  a00e              ADR      r0,|L2.636|
000244  f7fffffe          BL       assert_failed
                  |L2.584|
000248  481b              LDR      r0,|L2.696|
00024a  6840              LDR      r0,[r0,#4]            ;940
00024c  f4205060          BIC      r0,r0,#0x3800         ;940
000250  6921              LDR      r1,[r4,#0x10]         ;940
000252  ea4000c1          ORR      r0,r0,r1,LSL #3       ;940
000256  4918              LDR      r1,|L2.696|
000258  6048              STR      r0,[r1,#4]            ;940
                  |L2.602|
00025a  f7fffffe          BL       HAL_RCC_GetSysClockFreq
00025e  4916              LDR      r1,|L2.696|
000260  6849              LDR      r1,[r1,#4]            ;944
000262  f3c11103          UBFX     r1,r1,#4,#4           ;944
000266  4a15              LDR      r2,|L2.700|
000268  5c51              LDRB     r1,[r2,r1]            ;944
00026a  40c8              LSRS     r0,r0,r1              ;944
00026c  4914              LDR      r1,|L2.704|
00026e  6008              STR      r0,[r1,#0]            ;944  ; SystemCoreClock
000270  4814              LDR      r0,|L2.708|
000272  6800              LDR      r0,[r0,#0]            ;947  ; uwTickPrio
000274  f7fffffe          BL       HAL_InitTick
000278  2000              MOVS     r0,#0                 ;949
00027a  e6c6              B        |L2.10|
;;;951    
                          ENDP

                  |L2.636|
00027c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
000280  72697665
000284  72732f53
000288  544d3332
00028c  46317878
000290  5f48414c
000294  5f447269
000298  7665722f
00029c  5372632f
0002a0  73746d33
0002a4  32663178
0002a8  785f6861
0002ac  6c5f7263
0002b0  632e63  
0002b3  00                DCB      0
                  |L2.692|
                          DCD      0x40022000
                  |L2.696|
                          DCD      0x40021000
                  |L2.700|
                          DCD      AHBPrescTable
                  |L2.704|
                          DCD      SystemCoreClock
                  |L2.708|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;201      */
;;;202    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;203    {
;;;204      uint32_t tickstart;
;;;205    
;;;206      /* Get Start Tick */
;;;207      tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;208    
;;;209      /* Set HSION bit */
;;;210      SET_BIT(RCC->CR, RCC_CR_HSION);
000008  483d              LDR      r0,|L3.256|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  493b              LDR      r1,|L3.256|
000012  6008              STR      r0,[r1,#0]
;;;211    
;;;212      /* Wait till HSI is ready */
;;;213      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L3.36|
                  |L3.22|
;;;214      {
;;;215        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L3.36|
;;;216        {
;;;217          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;218        }
;;;219      }
;;;220    
;;;221      /* Set HSITRIM bits to the reset value */
;;;222      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
;;;223    
;;;224      /* Get Start Tick */
;;;225      tickstart = HAL_GetTick();
;;;226    
;;;227      /* Reset CFGR register */
;;;228      CLEAR_REG(RCC->CFGR);
;;;229    
;;;230      /* Wait till clock switch is ready */
;;;231      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;232      {
;;;233        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;234        {
;;;235          return HAL_TIMEOUT;
;;;236        }
;;;237      }
;;;238    
;;;239      /* Update the SystemCoreClock global variable */
;;;240      SystemCoreClock = HSI_VALUE;
;;;241    
;;;242      /* Adapt Systick interrupt period */
;;;243      if (HAL_InitTick(uwTickPrio) != HAL_OK)
;;;244      {
;;;245        return HAL_ERROR;
;;;246      }
;;;247    
;;;248      /* Get Start Tick */
;;;249      tickstart = HAL_GetTick();
;;;250    
;;;251      /* Second step is to clear PLLON bit */
;;;252      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;253    
;;;254      /* Wait till PLL is disabled */
;;;255      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;256      {
;;;257        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;258        {
;;;259          return HAL_TIMEOUT;
;;;260        }
;;;261      }
;;;262    
;;;263      /* Ensure to reset PLLSRC and PLLMUL bits */
;;;264      CLEAR_REG(RCC->CFGR);
;;;265    
;;;266      /* Get Start Tick */
;;;267      tickstart = HAL_GetTick();
;;;268    
;;;269      /* Reset HSEON & CSSON bits */
;;;270      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
;;;271    
;;;272      /* Wait till HSE is disabled */
;;;273      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;274      {
;;;275        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;276        {
;;;277          return HAL_TIMEOUT;
;;;278        }
;;;279      }
;;;280    
;;;281      /* Reset HSEBYP bit */
;;;282      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
;;;283    
;;;284    #if defined(RCC_PLL2_SUPPORT)
;;;285      /* Get Start Tick */
;;;286      tickstart = HAL_GetTick();
;;;287    
;;;288      /* Clear PLL2ON bit */
;;;289      CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
;;;290    
;;;291      /* Wait till PLL2 is disabled */
;;;292      while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
;;;293      {
;;;294        if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;295        {
;;;296          return HAL_TIMEOUT;
;;;297        }
;;;298      }
;;;299    #endif /* RCC_PLL2_SUPPORT */
;;;300    
;;;301    #if defined(RCC_PLLI2S_SUPPORT)
;;;302      /* Get Start Tick */
;;;303      tickstart = HAL_GetTick();
;;;304    
;;;305      /* Clear PLL3ON bit */
;;;306      CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
;;;307    
;;;308      /* Wait till PLL3 is disabled */
;;;309      while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
;;;310      {
;;;311        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;312        {
;;;313          return HAL_TIMEOUT;
;;;314        }
;;;315      }
;;;316    #endif /* RCC_PLLI2S_SUPPORT */
;;;317    
;;;318    #if defined(RCC_CFGR2_PREDIV1)
;;;319      /* Reset CFGR2 register */
;;;320      CLEAR_REG(RCC->CFGR2);
;;;321    #endif /* RCC_CFGR2_PREDIV1 */
;;;322    
;;;323      /* Reset all CSR flags */
;;;324      SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;325    
;;;326      /* Disable all interrupts */
;;;327      CLEAR_REG(RCC->CIR);
;;;328    
;;;329      return HAL_OK;
;;;330    }
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  4836              LDR      r0,|L3.256|
000026  6800              LDR      r0,[r0,#0]            ;213
000028  f0000002          AND      r0,r0,#2              ;213
00002c  2800              CMP      r0,#0                 ;213
00002e  d0f2              BEQ      |L3.22|
000030  4833              LDR      r0,|L3.256|
000032  6800              LDR      r0,[r0,#0]            ;222
000034  f02000f8          BIC      r0,r0,#0xf8           ;222
000038  f0400080          ORR      r0,r0,#0x80           ;222
00003c  4930              LDR      r1,|L3.256|
00003e  6008              STR      r0,[r1,#0]            ;222
000040  f7fffffe          BL       HAL_GetTick
000044  4604              MOV      r4,r0                 ;225
000046  2000              MOVS     r0,#0                 ;228
000048  492d              LDR      r1,|L3.256|
00004a  6048              STR      r0,[r1,#4]            ;228
00004c  e008              B        |L3.96|
                  |L3.78|
00004e  f7fffffe          BL       HAL_GetTick
000052  1b00              SUBS     r0,r0,r4              ;233
000054  f2413188          MOV      r1,#0x1388            ;233
000058  4288              CMP      r0,r1                 ;233
00005a  d901              BLS      |L3.96|
00005c  2003              MOVS     r0,#3                 ;235
00005e  e7e0              B        |L3.34|
                  |L3.96|
000060  4827              LDR      r0,|L3.256|
000062  6840              LDR      r0,[r0,#4]            ;231
000064  f000000c          AND      r0,r0,#0xc            ;231
000068  2800              CMP      r0,#0                 ;231
00006a  d1f0              BNE      |L3.78|
00006c  4825              LDR      r0,|L3.260|
00006e  4926              LDR      r1,|L3.264|
000070  6008              STR      r0,[r1,#0]            ;240  ; SystemCoreClock
000072  4826              LDR      r0,|L3.268|
000074  6800              LDR      r0,[r0,#0]            ;243  ; uwTickPrio
000076  f7fffffe          BL       HAL_InitTick
00007a  b108              CBZ      r0,|L3.128|
00007c  2001              MOVS     r0,#1                 ;245
00007e  e7d0              B        |L3.34|
                  |L3.128|
000080  f7fffffe          BL       HAL_GetTick
000084  4604              MOV      r4,r0                 ;249
000086  481e              LDR      r0,|L3.256|
000088  6800              LDR      r0,[r0,#0]            ;252
00008a  f0207080          BIC      r0,r0,#0x1000000      ;252
00008e  491c              LDR      r1,|L3.256|
000090  6008              STR      r0,[r1,#0]            ;252
000092  e006              B        |L3.162|
                  |L3.148|
000094  f7fffffe          BL       HAL_GetTick
000098  1b00              SUBS     r0,r0,r4              ;257
00009a  2802              CMP      r0,#2                 ;257
00009c  d901              BLS      |L3.162|
00009e  2003              MOVS     r0,#3                 ;259
0000a0  e7bf              B        |L3.34|
                  |L3.162|
0000a2  4817              LDR      r0,|L3.256|
0000a4  6800              LDR      r0,[r0,#0]            ;255
0000a6  f0007000          AND      r0,r0,#0x2000000      ;255
0000aa  2800              CMP      r0,#0                 ;255
0000ac  d1f2              BNE      |L3.148|
0000ae  4914              LDR      r1,|L3.256|
0000b0  6048              STR      r0,[r1,#4]            ;264
0000b2  f7fffffe          BL       HAL_GetTick
0000b6  4604              MOV      r4,r0                 ;267
0000b8  4811              LDR      r0,|L3.256|
0000ba  6800              LDR      r0,[r0,#0]            ;270
0000bc  f4202010          BIC      r0,r0,#0x90000        ;270
0000c0  490f              LDR      r1,|L3.256|
0000c2  6008              STR      r0,[r1,#0]            ;270
0000c4  e006              B        |L3.212|
                  |L3.198|
0000c6  f7fffffe          BL       HAL_GetTick
0000ca  1b00              SUBS     r0,r0,r4              ;275
0000cc  2864              CMP      r0,#0x64              ;275
0000ce  d901              BLS      |L3.212|
0000d0  2003              MOVS     r0,#3                 ;277
0000d2  e7a6              B        |L3.34|
                  |L3.212|
0000d4  480a              LDR      r0,|L3.256|
0000d6  6800              LDR      r0,[r0,#0]            ;273
0000d8  f4003000          AND      r0,r0,#0x20000        ;273
0000dc  2800              CMP      r0,#0                 ;273
0000de  d1f2              BNE      |L3.198|
0000e0  4807              LDR      r0,|L3.256|
0000e2  6800              LDR      r0,[r0,#0]            ;282
0000e4  f4202080          BIC      r0,r0,#0x40000        ;282
0000e8  4905              LDR      r1,|L3.256|
0000ea  6008              STR      r0,[r1,#0]            ;282
0000ec  4608              MOV      r0,r1                 ;324
0000ee  6a40              LDR      r0,[r0,#0x24]         ;324
0000f0  f0407080          ORR      r0,r0,#0x1000000      ;324
0000f4  6248              STR      r0,[r1,#0x24]         ;324
0000f6  2000              MOVS     r0,#0                 ;327
0000f8  6088              STR      r0,[r1,#8]            ;327
0000fa  bf00              NOP                            ;329
0000fc  e791              B        |L3.34|
;;;331    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L3.256|
                          DCD      0x40021000
                  |L3.260|
                          DCD      0x007a1200
                  |L3.264|
                          DCD      SystemCoreClock
                  |L3.268|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;1047     */
;;;1048   void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;1049   {
;;;1050     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;1051   }
000006  4770              BX       lr
;;;1052   
                          ENDP

                  |L4.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1038     */
;;;1039   void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;1040   {
;;;1041     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;1042   }
000006  4770              BX       lr
;;;1043   
                          ENDP

                  |L5.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1311     */
;;;1312   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;1313   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1314     /* Check the parameters */
;;;1315     assert_param(RCC_ClkInitStruct != NULL);
000006  b104              CBZ      r4,|L6.10|
000008  e004              B        |L6.20|
                  |L6.10|
00000a  f2405123          MOV      r1,#0x523
00000e  a013              ADR      r0,|L6.92|
000010  f7fffffe          BL       assert_failed
                  |L6.20|
;;;1316     assert_param(pFLatency != NULL);
000014  b105              CBZ      r5,|L6.24|
000016  e004              B        |L6.34|
                  |L6.24|
000018  f2405124          MOV      r1,#0x524
00001c  a00f              ADR      r0,|L6.92|
00001e  f7fffffe          BL       assert_failed
                  |L6.34|
;;;1317   
;;;1318     /* Set all possible values for the Clock type parameter --------------------*/
;;;1319     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000022  200f              MOVS     r0,#0xf
000024  6020              STR      r0,[r4,#0]
;;;1320   
;;;1321     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1322     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000026  481b              LDR      r0,|L6.148|
000028  6840              LDR      r0,[r0,#4]
00002a  f0000003          AND      r0,r0,#3
00002e  6060              STR      r0,[r4,#4]
;;;1323   
;;;1324     /* Get the HCLK configuration ----------------------------------------------*/
;;;1325     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
000030  4818              LDR      r0,|L6.148|
000032  6840              LDR      r0,[r0,#4]
000034  f00000f0          AND      r0,r0,#0xf0
000038  60a0              STR      r0,[r4,#8]
;;;1326   
;;;1327     /* Get the APB1 configuration ----------------------------------------------*/
;;;1328     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
00003a  4816              LDR      r0,|L6.148|
00003c  6840              LDR      r0,[r0,#4]
00003e  f40060e0          AND      r0,r0,#0x700
000042  60e0              STR      r0,[r4,#0xc]
;;;1329   
;;;1330     /* Get the APB2 configuration ----------------------------------------------*/
;;;1331     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000044  4813              LDR      r0,|L6.148|
000046  6840              LDR      r0,[r0,#4]
000048  f4005060          AND      r0,r0,#0x3800
00004c  08c0              LSRS     r0,r0,#3
00004e  6120              STR      r0,[r4,#0x10]
;;;1332   
;;;1333   #if   defined(FLASH_ACR_LATENCY)
;;;1334     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1335     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
000050  4811              LDR      r0,|L6.152|
000052  6800              LDR      r0,[r0,#0]
000054  f0000007          AND      r0,r0,#7
000058  6028              STR      r0,[r5,#0]
;;;1336   #else
;;;1337     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1338     *pFLatency = (uint32_t)FLASH_LATENCY_0;
;;;1339   #endif
;;;1340   }
00005a  bd70              POP      {r4-r6,pc}
;;;1341   
                          ENDP

                  |L6.92|
00005c  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
000060  72697665
000064  72732f53
000068  544d3332
00006c  46317878
000070  5f48414c
000074  5f447269
000078  7665722f
00007c  5372632f
000080  73746d33
000084  32663178
000088  785f6861
00008c  6c5f7263
000090  632e63  
000093  00                DCB      0
                  |L6.148|
                          DCD      0x40021000
                  |L6.152|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1175     */
;;;1176   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1177   {
;;;1178     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1179   }
000004  4770              BX       lr
;;;1180   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1211     */
;;;1212   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b510              PUSH     {r4,lr}
;;;1213   {
000002  4604              MOV      r4,r0
;;;1214     /* Check the parameters */
;;;1215     assert_param(RCC_OscInitStruct != NULL);
000004  b104              CBZ      r4,|L8.8|
000006  e004              B        |L8.18|
                  |L8.8|
000008  f24041bf          MOV      r1,#0x4bf
00000c  a032              ADR      r0,|L8.216|
00000e  f7fffffe          BL       assert_failed
                  |L8.18|
;;;1216   
;;;1217     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1218     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000012  200f              MOVS     r0,#0xf
000014  6020              STR      r0,[r4,#0]
;;;1219                                         | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1220   
;;;1221   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1222     /* Get the Prediv1 source --------------------------------------------------*/
;;;1223     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;1224   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1225   
;;;1226     /* Get the HSE configuration -----------------------------------------------*/
;;;1227     if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000016  483e              LDR      r0,|L8.272|
000018  6800              LDR      r0,[r0,#0]
00001a  f4002080          AND      r0,r0,#0x40000
00001e  f5b02f80          CMP      r0,#0x40000
000022  d103              BNE      |L8.44|
;;;1228     {
;;;1229       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000024  f44f20a0          MOV      r0,#0x50000
000028  6060              STR      r0,[r4,#4]
00002a  e00c              B        |L8.70|
                  |L8.44|
;;;1230     }
;;;1231     else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
00002c  4838              LDR      r0,|L8.272|
00002e  6800              LDR      r0,[r0,#0]
000030  f4003080          AND      r0,r0,#0x10000
000034  f5b03f80          CMP      r0,#0x10000
000038  d103              BNE      |L8.66|
;;;1232     {
;;;1233       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
00003a  f44f3080          MOV      r0,#0x10000
00003e  6060              STR      r0,[r4,#4]
000040  e001              B        |L8.70|
                  |L8.66|
;;;1234     }
;;;1235     else
;;;1236     {
;;;1237       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000042  2000              MOVS     r0,#0
000044  6060              STR      r0,[r4,#4]
                  |L8.70|
;;;1238     }
;;;1239     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
000046  4832              LDR      r0,|L8.272|
000048  6840              LDR      r0,[r0,#4]
00004a  f4003000          AND      r0,r0,#0x20000
00004e  60a0              STR      r0,[r4,#8]
;;;1240   
;;;1241     /* Get the HSI configuration -----------------------------------------------*/
;;;1242     if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
000050  482f              LDR      r0,|L8.272|
000052  6800              LDR      r0,[r0,#0]
000054  f0000001          AND      r0,r0,#1
000058  b110              CBZ      r0,|L8.96|
;;;1243     {
;;;1244       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00005a  2001              MOVS     r0,#1
00005c  6120              STR      r0,[r4,#0x10]
00005e  e001              B        |L8.100|
                  |L8.96|
;;;1245     }
;;;1246     else
;;;1247     {
;;;1248       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000060  2000              MOVS     r0,#0
000062  6120              STR      r0,[r4,#0x10]
                  |L8.100|
;;;1249     }
;;;1250   
;;;1251     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000064  482a              LDR      r0,|L8.272|
000066  6800              LDR      r0,[r0,#0]
000068  f3c000c4          UBFX     r0,r0,#3,#5
00006c  6160              STR      r0,[r4,#0x14]
;;;1252   
;;;1253     /* Get the LSE configuration -----------------------------------------------*/
;;;1254     if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00006e  4828              LDR      r0,|L8.272|
000070  6a00              LDR      r0,[r0,#0x20]
000072  f0000004          AND      r0,r0,#4
000076  2804              CMP      r0,#4
000078  d102              BNE      |L8.128|
;;;1255     {
;;;1256       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
00007a  2005              MOVS     r0,#5
00007c  60e0              STR      r0,[r4,#0xc]
00007e  e009              B        |L8.148|
                  |L8.128|
;;;1257     }
;;;1258     else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000080  4823              LDR      r0,|L8.272|
000082  6a00              LDR      r0,[r0,#0x20]
000084  f0000001          AND      r0,r0,#1
000088  b110              CBZ      r0,|L8.144|
;;;1259     {
;;;1260       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00008a  2001              MOVS     r0,#1
00008c  60e0              STR      r0,[r4,#0xc]
00008e  e001              B        |L8.148|
                  |L8.144|
;;;1261     }
;;;1262     else
;;;1263     {
;;;1264       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000090  2000              MOVS     r0,#0
000092  60e0              STR      r0,[r4,#0xc]
                  |L8.148|
;;;1265     }
;;;1266   
;;;1267     /* Get the LSI configuration -----------------------------------------------*/
;;;1268     if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
000094  481e              LDR      r0,|L8.272|
000096  6a40              LDR      r0,[r0,#0x24]
000098  f0000001          AND      r0,r0,#1
00009c  b110              CBZ      r0,|L8.164|
;;;1269     {
;;;1270       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
00009e  2001              MOVS     r0,#1
0000a0  61a0              STR      r0,[r4,#0x18]
0000a2  e001              B        |L8.168|
                  |L8.164|
;;;1271     }
;;;1272     else
;;;1273     {
;;;1274       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
0000a4  2000              MOVS     r0,#0
0000a6  61a0              STR      r0,[r4,#0x18]
                  |L8.168|
;;;1275     }
;;;1276   
;;;1277   
;;;1278     /* Get the PLL configuration -----------------------------------------------*/
;;;1279     if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
0000a8  4819              LDR      r0,|L8.272|
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f0007080          AND      r0,r0,#0x1000000
0000b0  f1b07f80          CMP      r0,#0x1000000
0000b4  d102              BNE      |L8.188|
;;;1280     {
;;;1281       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000b6  2002              MOVS     r0,#2
0000b8  61e0              STR      r0,[r4,#0x1c]
0000ba  e001              B        |L8.192|
                  |L8.188|
;;;1282     }
;;;1283     else
;;;1284     {
;;;1285       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000bc  2001              MOVS     r0,#1
0000be  61e0              STR      r0,[r4,#0x1c]
                  |L8.192|
;;;1286     }
;;;1287     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
0000c0  4813              LDR      r0,|L8.272|
0000c2  6840              LDR      r0,[r0,#4]
0000c4  f4003180          AND      r1,r0,#0x10000
0000c8  6221              STR      r1,[r4,#0x20]
;;;1288     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
0000ca  4811              LDR      r0,|L8.272|
0000cc  6840              LDR      r0,[r0,#4]
0000ce  f4001170          AND      r1,r0,#0x3c0000
0000d2  6261              STR      r1,[r4,#0x24]
;;;1289   #if defined(RCC_CR_PLL2ON)
;;;1290     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1291     if ((RCC->CR & RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
;;;1292     {
;;;1293       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
;;;1298     }
;;;1299     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
;;;1300     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
;;;1301   #endif /* RCC_CR_PLL2ON */
;;;1302   }
0000d4  bd10              POP      {r4,pc}
;;;1303   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L8.216|
0000d8  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
0000dc  72697665
0000e0  72732f53
0000e4  544d3332
0000e8  46317878
0000ec  5f48414c
0000f0  5f447269
0000f4  7665722f
0000f8  5372632f
0000fc  73746d33
000100  32663178
000104  785f6861
000108  6c5f7263
00010c  632e63  
00010f  00                DCB      0
                  |L8.272|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1186     */
;;;1187   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1188   {
;;;1189     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1190     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6849              LDR      r1,[r1,#4]
00000a  f3c12102          UBFX     r1,r1,#8,#3
00000e  4a03              LDR      r2,|L9.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1191   }
000014  bd00              POP      {pc}
;;;1192   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1198     */
;;;1199   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1200   {
;;;1201     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1202     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6849              LDR      r1,[r1,#4]
00000a  f3c121c2          UBFX     r1,r1,#11,#3
00000e  4a03              LDR      r2,|L10.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1203   }
000014  bd00              POP      {pc}
;;;1204   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40021000
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1081     */
;;;1082   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1083   {
000002  b085              SUB      sp,sp,#0x14
;;;1084   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1085     const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
;;;1086     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1087   #else
;;;1088     const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
000004  f20f0c6c          ADR      r12,|L11.116|
000008  e89c10e0          LDM      r12,{r5-r7,r12}
00000c  a801              ADD      r0,sp,#4
00000e  e8a010e0          STM      r0!,{r5-r7,r12}
;;;1089   #if defined(RCC_CFGR2_PREDIV1)
;;;1090     const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1091   #else
;;;1092     const uint8_t aPredivFactorTable[2] = {1, 2};
000012  a51c              ADR      r5,|L11.132|
000014  682d              LDR      r5,[r5,#0]
000016  9500              STR      r5,[sp,#0]
;;;1093   #endif /*RCC_CFGR2_PREDIV1*/
;;;1094   
;;;1095   #endif
;;;1096     uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
000018  2100              MOVS     r1,#0
00001a  2200              MOVS     r2,#0
00001c  2300              MOVS     r3,#0
00001e  2400              MOVS     r4,#0
;;;1097     uint32_t sysclockfreq = 0U;
000020  2000              MOVS     r0,#0
;;;1098   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1099     uint32_t prediv2 = 0U, pll2mul = 0U;
;;;1100   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1101   
;;;1102     tmpreg = RCC->CFGR;
000022  4d19              LDR      r5,|L11.136|
000024  6869              LDR      r1,[r5,#4]
;;;1103   
;;;1104     /* Get SYSCLK source -------------------------------------------------------*/
;;;1105     switch (tmpreg & RCC_CFGR_SWS)
000026  f001050c          AND      r5,r1,#0xc
00002a  b1f5              CBZ      r5,|L11.106|
00002c  2d04              CMP      r5,#4
00002e  d002              BEQ      |L11.54|
000030  2d08              CMP      r5,#8
000032  d119              BNE      |L11.104|
000034  e001              B        |L11.58|
                  |L11.54|
;;;1106     {
;;;1107       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1108       {
;;;1109         sysclockfreq = HSE_VALUE;
000036  4815              LDR      r0,|L11.140|
;;;1110         break;
000038  e019              B        |L11.110|
                  |L11.58|
;;;1111       }
;;;1112       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1113       {
;;;1114         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
00003a  ad01              ADD      r5,sp,#4
00003c  f3c14683          UBFX     r6,r1,#18,#4
000040  5dac              LDRB     r4,[r5,r6]
;;;1115         if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
000042  f4013580          AND      r5,r1,#0x10000
000046  b155              CBZ      r5,|L11.94|
;;;1116         {
;;;1117   #if defined(RCC_CFGR2_PREDIV1)
;;;1118           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;1119   #else
;;;1120           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
000048  4d0f              LDR      r5,|L11.136|
00004a  686d              LDR      r5,[r5,#4]
00004c  f3c54540          UBFX     r5,r5,#17,#1
000050  f81d2005          LDRB     r2,[sp,r5]
;;;1121   #endif /*RCC_CFGR2_PREDIV1*/
;;;1122   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1123   
;;;1124           if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1125           {
;;;1126             /* PLL2 selected as Prediv1 source */
;;;1127             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1128             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;1129             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;1130             pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
;;;1131           }
;;;1132           else
;;;1133           {
;;;1134             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1135             pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
;;;1136           }
;;;1137   
;;;1138           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1139           /* In this case need to divide pllclk by 2 */
;;;1140           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;1141           {
;;;1142             pllclk = pllclk / 2;
;;;1143           }
;;;1144   #else
;;;1145           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1146           pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
000054  4d0d              LDR      r5,|L11.140|
000056  4365              MULS     r5,r4,r5
000058  fbb5f3f2          UDIV     r3,r5,r2
00005c  e002              B        |L11.100|
                  |L11.94|
;;;1147   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1148         }
;;;1149         else
;;;1150         {
;;;1151           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1152           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
00005e  4d0c              LDR      r5,|L11.144|
000060  fb04f305          MUL      r3,r4,r5
                  |L11.100|
;;;1153         }
;;;1154         sysclockfreq = pllclk;
000064  4618              MOV      r0,r3
;;;1155         break;
000066  e002              B        |L11.110|
                  |L11.104|
;;;1156       }
;;;1157       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
000068  bf00              NOP      
                  |L11.106|
;;;1158       default: /* HSI used as system clock */
;;;1159       {
;;;1160         sysclockfreq = HSI_VALUE;
00006a  4808              LDR      r0,|L11.140|
;;;1161         break;
00006c  bf00              NOP      
                  |L11.110|
00006e  bf00              NOP                            ;1110
;;;1162       }
;;;1163     }
;;;1164     return sysclockfreq;
;;;1165   }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
;;;1166   
                          ENDP

                  |L11.116|
000074  02030405          DCB      2,3,4,5,6,"\a\b\t\n\v\f\r",14,15,16,16
000078  06070809
00007c  0a0b0c0d
000080  0e0f1010
                  |L11.132|
000084  010200            DCB      1,2,0
000087  00                DCB      0
                  |L11.136|
                          DCD      0x40021000
                  |L11.140|
                          DCD      0x007a1200
                  |L11.144|
                          DCD      0x003d0900

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;1001     */
;;;1002   void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;1003   {
000002  b086              SUB      sp,sp,#0x18
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1004     GPIO_InitTypeDef gpio = {0U};
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
000012  9005              STR      r0,[sp,#0x14]
;;;1005   
;;;1006     /* Check the parameters */
;;;1007     assert_param(IS_RCC_MCO(RCC_MCOx));
000014  b905              CBNZ     r5,|L12.24|
000016  e004              B        |L12.34|
                  |L12.24|
000018  f24031ef          MOV      r1,#0x3ef
00001c  a020              ADR      r0,|L12.160|
00001e  f7fffffe          BL       assert_failed
                  |L12.34|
;;;1008     assert_param(IS_RCC_MCODIV(RCC_MCODiv));
000022  b906              CBNZ     r6,|L12.38|
000024  e004              B        |L12.48|
                  |L12.38|
000026  f44f717c          MOV      r1,#0x3f0
00002a  a01d              ADR      r0,|L12.160|
00002c  f7fffffe          BL       assert_failed
                  |L12.48|
;;;1009     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
000030  f1b46f80          CMP      r4,#0x4000000
000034  d009              BEQ      |L12.74|
000036  f1b46fa0          CMP      r4,#0x5000000
00003a  d006              BEQ      |L12.74|
00003c  f1b46fc0          CMP      r4,#0x6000000
000040  d003              BEQ      |L12.74|
000042  f1b46fe0          CMP      r4,#0x7000000
000046  d000              BEQ      |L12.74|
000048  b904              CBNZ     r4,|L12.76|
                  |L12.74|
00004a  e004              B        |L12.86|
                  |L12.76|
00004c  f24031f1          MOV      r1,#0x3f1
000050  a013              ADR      r0,|L12.160|
000052  f7fffffe          BL       assert_failed
                  |L12.86|
;;;1010   
;;;1011     /* Prevent unused argument(s) compilation warning */
;;;1012     UNUSED(RCC_MCOx);
;;;1013     UNUSED(RCC_MCODiv);
;;;1014   
;;;1015     /* Configure the MCO1 pin in alternate function mode */
;;;1016     gpio.Mode      = GPIO_MODE_AF_PP;
000056  2002              MOVS     r0,#2
000058  9003              STR      r0,[sp,#0xc]
;;;1017     gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
00005a  2003              MOVS     r0,#3
00005c  9005              STR      r0,[sp,#0x14]
;;;1018     gpio.Pull      = GPIO_NOPULL;
00005e  2000              MOVS     r0,#0
000060  9004              STR      r0,[sp,#0x10]
;;;1019     gpio.Pin       = MCO1_PIN;
000062  f44f7080          MOV      r0,#0x100
000066  9002              STR      r0,[sp,#8]
;;;1020   
;;;1021     /* MCO1 Clock Enable */
;;;1022     MCO1_CLK_ENABLE();
000068  bf00              NOP      
00006a  481b              LDR      r0,|L12.216|
00006c  6980              LDR      r0,[r0,#0x18]
00006e  f0400004          ORR      r0,r0,#4
000072  4919              LDR      r1,|L12.216|
000074  6188              STR      r0,[r1,#0x18]
000076  4608              MOV      r0,r1
000078  6980              LDR      r0,[r0,#0x18]
00007a  f0000004          AND      r0,r0,#4
00007e  9001              STR      r0,[sp,#4]
000080  bf00              NOP      
000082  bf00              NOP      
;;;1023   
;;;1024     HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
000084  a902              ADD      r1,sp,#8
000086  4815              LDR      r0,|L12.220|
000088  f7fffffe          BL       HAL_GPIO_Init
;;;1025   
;;;1026     /* Configure the MCO clock source */
;;;1027     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
00008c  4812              LDR      r0,|L12.216|
00008e  6840              LDR      r0,[r0,#4]
000090  f02060e0          BIC      r0,r0,#0x7000000
000094  4320              ORRS     r0,r0,r4
000096  4910              LDR      r1,|L12.216|
000098  6048              STR      r0,[r1,#4]
;;;1028   }
00009a  b006              ADD      sp,sp,#0x18
00009c  bd70              POP      {r4-r6,pc}
;;;1029   
                          ENDP

00009e  0000              DCW      0x0000
                  |L12.160|
0000a0  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
0000a4  72697665
0000a8  72732f53
0000ac  544d3332
0000b0  46317878
0000b4  5f48414c
0000b8  5f447269
0000bc  7665722f
0000c0  5372632f
0000c4  73746d33
0000c8  32663178
0000cc  785f6861
0000d0  6c5f7263
0000d4  632e63  
0000d7  00                DCB      0
                  |L12.216|
                          DCD      0x40021000
                  |L12.220|
                          DCD      0x40010800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1346     */
;;;1347   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1348   {
;;;1349     /* Check RCC CSSF flag  */
;;;1350     if (__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6880              LDR      r0,[r0,#8]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d104              BNE      |L13.24|
;;;1351     {
;;;1352       /* RCC Clock Security System interrupt user callback */
;;;1353       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1354   
;;;1355       /* Clear RCC CSS pending bit */
;;;1356       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  7288              STRB     r0,[r1,#0xa]
                  |L13.24|
;;;1357     }
;;;1358   }
000018  bd10              POP      {r4,pc}
;;;1359   
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;346      */
;;;347    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;348    {
000002  4604              MOV      r4,r0
;;;349      uint32_t tickstart;
;;;350      uint32_t pll_config;
;;;351    
;;;352      /* Check Null pointer */
;;;353      if (RCC_OscInitStruct == NULL)
000004  b90c              CBNZ     r4,|L14.10|
;;;354      {
;;;355        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L14.8|
;;;356      }
;;;357    
;;;358      /* Check the parameters */
;;;359      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;360    
;;;361      /*------------------------------- HSE Configuration ------------------------*/
;;;362      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;363      {
;;;364        /* Check the parameters */
;;;365        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;366    
;;;367        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;368        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
;;;369            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
;;;370        {
;;;371          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;372          {
;;;373            return HAL_ERROR;
;;;374          }
;;;375        }
;;;376        else
;;;377        {
;;;378          /* Set the new HSE configuration ---------------------------------------*/
;;;379          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;380    
;;;381    
;;;382          /* Check the HSE State */
;;;383          if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;384          {
;;;385            /* Get Start Tick */
;;;386            tickstart = HAL_GetTick();
;;;387    
;;;388            /* Wait till HSE is ready */
;;;389            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;390            {
;;;391              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;392              {
;;;393                return HAL_TIMEOUT;
;;;394              }
;;;395            }
;;;396          }
;;;397          else
;;;398          {
;;;399            /* Get Start Tick */
;;;400            tickstart = HAL_GetTick();
;;;401    
;;;402            /* Wait till HSE is disabled */
;;;403            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;404            {
;;;405              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;406              {
;;;407                return HAL_TIMEOUT;
;;;408              }
;;;409            }
;;;410          }
;;;411        }
;;;412      }
;;;413      /*----------------------------- HSI Configuration --------------------------*/
;;;414      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;415      {
;;;416        /* Check the parameters */
;;;417        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;418        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;419    
;;;420        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;421        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
;;;422            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;423        {
;;;424          /* When HSI is used as system clock it will not disabled */
;;;425          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;426          {
;;;427            return HAL_ERROR;
;;;428          }
;;;429          /* Otherwise, just the calibration is allowed */
;;;430          else
;;;431          {
;;;432            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;433            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;434          }
;;;435        }
;;;436        else
;;;437        {
;;;438          /* Check the HSI State */
;;;439          if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;440          {
;;;441            /* Enable the Internal High Speed oscillator (HSI). */
;;;442            __HAL_RCC_HSI_ENABLE();
;;;443    
;;;444            /* Get Start Tick */
;;;445            tickstart = HAL_GetTick();
;;;446    
;;;447            /* Wait till HSI is ready */
;;;448            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;449            {
;;;450              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;451              {
;;;452                return HAL_TIMEOUT;
;;;453              }
;;;454            }
;;;455    
;;;456            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;457            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;458          }
;;;459          else
;;;460          {
;;;461            /* Disable the Internal High Speed oscillator (HSI). */
;;;462            __HAL_RCC_HSI_DISABLE();
;;;463    
;;;464            /* Get Start Tick */
;;;465            tickstart = HAL_GetTick();
;;;466    
;;;467            /* Wait till HSI is disabled */
;;;468            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;469            {
;;;470              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;471              {
;;;472                return HAL_TIMEOUT;
;;;473              }
;;;474            }
;;;475          }
;;;476        }
;;;477      }
;;;478      /*------------------------------ LSI Configuration -------------------------*/
;;;479      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;480      {
;;;481        /* Check the parameters */
;;;482        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;483    
;;;484        /* Check the LSI State */
;;;485        if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;486        {
;;;487          /* Enable the Internal Low Speed oscillator (LSI). */
;;;488          __HAL_RCC_LSI_ENABLE();
;;;489    
;;;490          /* Get Start Tick */
;;;491          tickstart = HAL_GetTick();
;;;492    
;;;493          /* Wait till LSI is ready */
;;;494          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;495          {
;;;496            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;497            {
;;;498              return HAL_TIMEOUT;
;;;499            }
;;;500          }
;;;501          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
;;;502              should be added.*/
;;;503          RCC_Delay(1);
;;;504        }
;;;505        else
;;;506        {
;;;507          /* Disable the Internal Low Speed oscillator (LSI). */
;;;508          __HAL_RCC_LSI_DISABLE();
;;;509    
;;;510          /* Get Start Tick */
;;;511          tickstart = HAL_GetTick();
;;;512    
;;;513          /* Wait till LSI is disabled */
;;;514          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;515          {
;;;516            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;517            {
;;;518              return HAL_TIMEOUT;
;;;519            }
;;;520          }
;;;521        }
;;;522      }
;;;523      /*------------------------------ LSE Configuration -------------------------*/
;;;524      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;525      {
;;;526        FlagStatus       pwrclkchanged = RESET;
;;;527    
;;;528        /* Check the parameters */
;;;529        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;530    
;;;531        /* Update LSE configuration in Backup Domain control register    */
;;;532        /* Requires to enable write access to Backup Domain of necessary */
;;;533        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;534        {
;;;535          __HAL_RCC_PWR_CLK_ENABLE();
;;;536          pwrclkchanged = SET;
;;;537        }
;;;538    
;;;539        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;540        {
;;;541          /* Enable write access to Backup domain */
;;;542          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;543    
;;;544          /* Wait for Backup domain Write protection disable */
;;;545          tickstart = HAL_GetTick();
;;;546    
;;;547          while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;548          {
;;;549            if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;550            {
;;;551              return HAL_TIMEOUT;
;;;552            }
;;;553          }
;;;554        }
;;;555    
;;;556        /* Set the new LSE configuration -----------------------------------------*/
;;;557        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;558        /* Check the LSE State */
;;;559        if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;560        {
;;;561          /* Get Start Tick */
;;;562          tickstart = HAL_GetTick();
;;;563    
;;;564          /* Wait till LSE is ready */
;;;565          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;566          {
;;;567            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;568            {
;;;569              return HAL_TIMEOUT;
;;;570            }
;;;571          }
;;;572        }
;;;573        else
;;;574        {
;;;575          /* Get Start Tick */
;;;576          tickstart = HAL_GetTick();
;;;577    
;;;578          /* Wait till LSE is disabled */
;;;579          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;580          {
;;;581            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;582            {
;;;583              return HAL_TIMEOUT;
;;;584            }
;;;585          }
;;;586        }
;;;587    
;;;588        /* Require to disable power clock if necessary */
;;;589        if (pwrclkchanged == SET)
;;;590        {
;;;591          __HAL_RCC_PWR_CLK_DISABLE();
;;;592        }
;;;593      }
;;;594    
;;;595    #if defined(RCC_CR_PLL2ON)
;;;596      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;597      /* Check the parameters */
;;;598      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;599      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;600      {
;;;601        /* This bit can not be cleared if the PLL2 clock is used indirectly as system
;;;602          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;603        if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;604            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;605            ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;606        {
;;;607          return HAL_ERROR;
;;;608        }
;;;609        else
;;;610        {
;;;611          if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;612          {
;;;613            /* Check the parameters */
;;;614            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;615            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;616    
;;;617            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;618            /* Return an error only if new value is different from the programmed value */
;;;619            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
;;;620                (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;621            {
;;;622              return HAL_ERROR;
;;;623            }
;;;624    
;;;625            /* Disable the main PLL2. */
;;;626            __HAL_RCC_PLL2_DISABLE();
;;;627    
;;;628            /* Get Start Tick */
;;;629            tickstart = HAL_GetTick();
;;;630    
;;;631            /* Wait till PLL2 is disabled */
;;;632            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;633            {
;;;634              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;635              {
;;;636                return HAL_TIMEOUT;
;;;637              }
;;;638            }
;;;639    
;;;640            /* Configure the HSE prediv2 factor --------------------------------*/
;;;641            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;642    
;;;643            /* Configure the main PLL2 multiplication factors. */
;;;644            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;645    
;;;646            /* Enable the main PLL2. */
;;;647            __HAL_RCC_PLL2_ENABLE();
;;;648    
;;;649            /* Get Start Tick */
;;;650            tickstart = HAL_GetTick();
;;;651    
;;;652            /* Wait till PLL2 is ready */
;;;653            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;654            {
;;;655              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;656              {
;;;657                return HAL_TIMEOUT;
;;;658              }
;;;659            }
;;;660          }
;;;661          else
;;;662          {
;;;663            /* Set PREDIV1 source to HSE */
;;;664            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;665    
;;;666            /* Disable the main PLL2. */
;;;667            __HAL_RCC_PLL2_DISABLE();
;;;668    
;;;669            /* Get Start Tick */
;;;670            tickstart = HAL_GetTick();
;;;671    
;;;672            /* Wait till PLL2 is disabled */
;;;673            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;674            {
;;;675              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;676              {
;;;677                return HAL_TIMEOUT;
;;;678              }
;;;679            }
;;;680          }
;;;681        }
;;;682      }
;;;683    
;;;684    #endif /* RCC_CR_PLL2ON */
;;;685      /*-------------------------------- PLL Configuration -----------------------*/
;;;686      /* Check the parameters */
;;;687      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;688      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;689      {
;;;690        /* Check if the PLL is used as system clock or not */
;;;691        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;692        {
;;;693          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;694          {
;;;695            /* Check the parameters */
;;;696            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;697            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;698    
;;;699            /* Disable the main PLL. */
;;;700            __HAL_RCC_PLL_DISABLE();
;;;701    
;;;702            /* Get Start Tick */
;;;703            tickstart = HAL_GetTick();
;;;704    
;;;705            /* Wait till PLL is disabled */
;;;706            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;707            {
;;;708              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;709              {
;;;710                return HAL_TIMEOUT;
;;;711              }
;;;712            }
;;;713    
;;;714            /* Configure the HSE prediv factor --------------------------------*/
;;;715            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;716            if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;717            {
;;;718              /* Check the parameter */
;;;719              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;720    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;721              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;722    
;;;723              /* Set PREDIV1 source */
;;;724              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;725    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;726    
;;;727              /* Set PREDIV1 Value */
;;;728              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;729            }
;;;730    
;;;731            /* Configure the main PLL clock source and multiplication factors. */
;;;732            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;733                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;734            /* Enable the main PLL. */
;;;735            __HAL_RCC_PLL_ENABLE();
;;;736    
;;;737            /* Get Start Tick */
;;;738            tickstart = HAL_GetTick();
;;;739    
;;;740            /* Wait till PLL is ready */
;;;741            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;742            {
;;;743              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;744              {
;;;745                return HAL_TIMEOUT;
;;;746              }
;;;747            }
;;;748          }
;;;749          else
;;;750          {
;;;751            /* Disable the main PLL. */
;;;752            __HAL_RCC_PLL_DISABLE();
;;;753    
;;;754            /* Get Start Tick */
;;;755            tickstart = HAL_GetTick();
;;;756    
;;;757            /* Wait till PLL is disabled */
;;;758            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;759            {
;;;760              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;761              {
;;;762                return HAL_TIMEOUT;
;;;763              }
;;;764            }
;;;765          }
;;;766        }
;;;767        else
;;;768        {
;;;769          /* Check if there is a request to disable the PLL used as System clock source */
;;;770          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
;;;771          {
;;;772            return HAL_ERROR;
;;;773          }
;;;774          else
;;;775          {
;;;776            /* Do not return HAL_ERROR if request repeats the current configuration */
;;;777            pll_config = RCC->CFGR;
;;;778            if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;779                (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
;;;780            {
;;;781              return HAL_ERROR;
;;;782            }
;;;783          }
;;;784        }
;;;785      }
;;;786    
;;;787      return HAL_OK;
;;;788    }
000008  bdf8              POP      {r3-r7,pc}
                  |L14.10|
00000a  6820              LDR      r0,[r4,#0]            ;359
00000c  b190              CBZ      r0,|L14.52|
00000e  7820              LDRB     r0,[r4,#0]            ;359
000010  f0000001          AND      r0,r0,#1              ;359
000014  b970              CBNZ     r0,|L14.52|
000016  7820              LDRB     r0,[r4,#0]            ;359
000018  f0000002          AND      r0,r0,#2              ;359
00001c  2802              CMP      r0,#2                 ;359
00001e  d009              BEQ      |L14.52|
000020  7820              LDRB     r0,[r4,#0]            ;359
000022  f0000008          AND      r0,r0,#8              ;359
000026  2808              CMP      r0,#8                 ;359
000028  d004              BEQ      |L14.52|
00002a  7820              LDRB     r0,[r4,#0]            ;359
00002c  f0000004          AND      r0,r0,#4              ;359
000030  2804              CMP      r0,#4                 ;359
000032  d100              BNE      |L14.54|
                  |L14.52|
000034  e004              B        |L14.64|
                  |L14.54|
000036  f2401167          MOV      r1,#0x167             ;359
00003a  a0fa              ADR      r0,|L14.1060|
00003c  f7fffffe          BL       assert_failed
                  |L14.64|
000040  7820              LDRB     r0,[r4,#0]            ;362
000042  f0000001          AND      r0,r0,#1              ;362
000046  2800              CMP      r0,#0                 ;362
000048  d070              BEQ      |L14.300|
00004a  6860              LDR      r0,[r4,#4]            ;365
00004c  b138              CBZ      r0,|L14.94|
00004e  6860              LDR      r0,[r4,#4]            ;365
000050  f5b03f80          CMP      r0,#0x10000           ;365
000054  d003              BEQ      |L14.94|
000056  6860              LDR      r0,[r4,#4]            ;365
000058  f5b02fa0          CMP      r0,#0x50000           ;365
00005c  d100              BNE      |L14.96|
                  |L14.94|
00005e  e004              B        |L14.106|
                  |L14.96|
000060  f240116d          MOV      r1,#0x16d             ;365
000064  a0ef              ADR      r0,|L14.1060|
000066  f7fffffe          BL       assert_failed
                  |L14.106|
00006a  48fc              LDR      r0,|L14.1116|
00006c  6840              LDR      r0,[r0,#4]            ;368
00006e  f000000c          AND      r0,r0,#0xc            ;368
000072  2804              CMP      r0,#4                 ;368
000074  d00c              BEQ      |L14.144|
000076  48f9              LDR      r0,|L14.1116|
000078  6840              LDR      r0,[r0,#4]            ;369
00007a  f000000c          AND      r0,r0,#0xc            ;369
00007e  2808              CMP      r0,#8                 ;369
000080  d111              BNE      |L14.166|
000082  48f6              LDR      r0,|L14.1116|
000084  6840              LDR      r0,[r0,#4]            ;369
000086  f4003080          AND      r0,r0,#0x10000        ;369
00008a  f5b03f80          CMP      r0,#0x10000           ;369
00008e  d10a              BNE      |L14.166|
                  |L14.144|
000090  48f2              LDR      r0,|L14.1116|
000092  6800              LDR      r0,[r0,#0]            ;371
000094  f4003000          AND      r0,r0,#0x20000        ;371
000098  2800              CMP      r0,#0                 ;371
00009a  d060              BEQ      |L14.350|
00009c  6860              LDR      r0,[r4,#4]            ;371
00009e  2800              CMP      r0,#0                 ;371
0000a0  d15d              BNE      |L14.350|
0000a2  2001              MOVS     r0,#1                 ;373
0000a4  e7b0              B        |L14.8|
                  |L14.166|
0000a6  bf00              NOP                            ;379
0000a8  6860              LDR      r0,[r4,#4]            ;379
0000aa  f5b03f80          CMP      r0,#0x10000           ;379
0000ae  d106              BNE      |L14.190|
0000b0  48ea              LDR      r0,|L14.1116|
0000b2  6800              LDR      r0,[r0,#0]            ;379
0000b4  f4403080          ORR      r0,r0,#0x10000        ;379
0000b8  49e8              LDR      r1,|L14.1116|
0000ba  6008              STR      r0,[r1,#0]            ;379
0000bc  e028              B        |L14.272|
                  |L14.190|
0000be  6860              LDR      r0,[r4,#4]            ;379
0000c0  b958              CBNZ     r0,|L14.218|
0000c2  48e6              LDR      r0,|L14.1116|
0000c4  6800              LDR      r0,[r0,#0]            ;379
0000c6  f4203080          BIC      r0,r0,#0x10000        ;379
0000ca  49e4              LDR      r1,|L14.1116|
0000cc  6008              STR      r0,[r1,#0]            ;379
0000ce  4608              MOV      r0,r1                 ;379
0000d0  6800              LDR      r0,[r0,#0]            ;379
0000d2  f4202080          BIC      r0,r0,#0x40000        ;379
0000d6  6008              STR      r0,[r1,#0]            ;379
0000d8  e01a              B        |L14.272|
                  |L14.218|
0000da  6860              LDR      r0,[r4,#4]            ;379
0000dc  f5b02fa0          CMP      r0,#0x50000           ;379
0000e0  d10b              BNE      |L14.250|
0000e2  48de              LDR      r0,|L14.1116|
0000e4  6800              LDR      r0,[r0,#0]            ;379
0000e6  f4402080          ORR      r0,r0,#0x40000        ;379
0000ea  49dc              LDR      r1,|L14.1116|
0000ec  6008              STR      r0,[r1,#0]            ;379
0000ee  4608              MOV      r0,r1                 ;379
0000f0  6800              LDR      r0,[r0,#0]            ;379
0000f2  f4403080          ORR      r0,r0,#0x10000        ;379
0000f6  6008              STR      r0,[r1,#0]            ;379
0000f8  e00a              B        |L14.272|
                  |L14.250|
0000fa  48d8              LDR      r0,|L14.1116|
0000fc  6800              LDR      r0,[r0,#0]            ;379
0000fe  f4203080          BIC      r0,r0,#0x10000        ;379
000102  49d6              LDR      r1,|L14.1116|
000104  6008              STR      r0,[r1,#0]            ;379
000106  4608              MOV      r0,r1                 ;379
000108  6800              LDR      r0,[r0,#0]            ;379
00010a  f4202080          BIC      r0,r0,#0x40000        ;379
00010e  6008              STR      r0,[r1,#0]            ;379
                  |L14.272|
000110  bf00              NOP                            ;379
000112  6860              LDR      r0,[r4,#4]            ;383
000114  b190              CBZ      r0,|L14.316|
000116  f7fffffe          BL       HAL_GetTick
00011a  4605              MOV      r5,r0                 ;386
00011c  e007              B        |L14.302|
                  |L14.286|
00011e  f7fffffe          BL       HAL_GetTick
000122  1b40              SUBS     r0,r0,r5              ;391
000124  2864              CMP      r0,#0x64              ;391
000126  d902              BLS      |L14.302|
000128  2003              MOVS     r0,#3                 ;393
00012a  e76d              B        |L14.8|
                  |L14.300|
00012c  e017              B        |L14.350|
                  |L14.302|
00012e  48cb              LDR      r0,|L14.1116|
000130  6800              LDR      r0,[r0,#0]            ;389
000132  f4003000          AND      r0,r0,#0x20000        ;389
000136  2800              CMP      r0,#0                 ;389
000138  d0f1              BEQ      |L14.286|
00013a  e010              B        |L14.350|
                  |L14.316|
00013c  f7fffffe          BL       HAL_GetTick
000140  4605              MOV      r5,r0                 ;400
000142  e006              B        |L14.338|
                  |L14.324|
000144  f7fffffe          BL       HAL_GetTick
000148  1b40              SUBS     r0,r0,r5              ;405
00014a  2864              CMP      r0,#0x64              ;405
00014c  d901              BLS      |L14.338|
00014e  2003              MOVS     r0,#3                 ;407
000150  e75a              B        |L14.8|
                  |L14.338|
000152  48c2              LDR      r0,|L14.1116|
000154  6800              LDR      r0,[r0,#0]            ;403
000156  f4003000          AND      r0,r0,#0x20000        ;403
00015a  2800              CMP      r0,#0                 ;403
00015c  d1f2              BNE      |L14.324|
                  |L14.350|
00015e  7820              LDRB     r0,[r4,#0]            ;414
000160  f0000002          AND      r0,r0,#2              ;414
000164  2802              CMP      r0,#2                 ;414
000166  d16b              BNE      |L14.576|
000168  6920              LDR      r0,[r4,#0x10]         ;417
00016a  b110              CBZ      r0,|L14.370|
00016c  6920              LDR      r0,[r4,#0x10]         ;417
00016e  2801              CMP      r0,#1                 ;417
000170  d100              BNE      |L14.372|
                  |L14.370|
000172  e004              B        |L14.382|
                  |L14.372|
000174  f24011a1          MOV      r1,#0x1a1             ;417
000178  a0aa              ADR      r0,|L14.1060|
00017a  f7fffffe          BL       assert_failed
                  |L14.382|
00017e  6960              LDR      r0,[r4,#0x14]         ;418
000180  281f              CMP      r0,#0x1f              ;418
000182  d800              BHI      |L14.390|
000184  e004              B        |L14.400|
                  |L14.390|
000186  f44f71d1          MOV      r1,#0x1a2             ;418
00018a  a0a6              ADR      r0,|L14.1060|
00018c  f7fffffe          BL       assert_failed
                  |L14.400|
000190  48b2              LDR      r0,|L14.1116|
000192  6840              LDR      r0,[r0,#4]            ;421
000194  f000000c          AND      r0,r0,#0xc            ;421
000198  b150              CBZ      r0,|L14.432|
00019a  48b0              LDR      r0,|L14.1116|
00019c  6840              LDR      r0,[r0,#4]            ;422
00019e  f000000c          AND      r0,r0,#0xc            ;422
0001a2  2808              CMP      r0,#8                 ;422
0001a4  d118              BNE      |L14.472|
0001a6  48ad              LDR      r0,|L14.1116|
0001a8  6840              LDR      r0,[r0,#4]            ;422
0001aa  f4003080          AND      r0,r0,#0x10000        ;422
0001ae  b998              CBNZ     r0,|L14.472|
                  |L14.432|
0001b0  48aa              LDR      r0,|L14.1116|
0001b2  6800              LDR      r0,[r0,#0]            ;425
0001b4  f0000002          AND      r0,r0,#2              ;425
0001b8  b120              CBZ      r0,|L14.452|
0001ba  6920              LDR      r0,[r4,#0x10]         ;425
0001bc  2801              CMP      r0,#1                 ;425
0001be  d001              BEQ      |L14.452|
0001c0  2001              MOVS     r0,#1                 ;427
0001c2  e721              B        |L14.8|
                  |L14.452|
0001c4  48a5              LDR      r0,|L14.1116|
0001c6  6800              LDR      r0,[r0,#0]            ;433
0001c8  f02000f8          BIC      r0,r0,#0xf8           ;433
0001cc  6961              LDR      r1,[r4,#0x14]         ;433
0001ce  ea4000c1          ORR      r0,r0,r1,LSL #3       ;433
0001d2  49a2              LDR      r1,|L14.1116|
0001d4  6008              STR      r0,[r1,#0]            ;433
0001d6  e033              B        |L14.576|
                  |L14.472|
0001d8  6920              LDR      r0,[r4,#0x10]         ;439
0001da  b1e8              CBZ      r0,|L14.536|
0001dc  2001              MOVS     r0,#1                 ;442
0001de  49a0              LDR      r1,|L14.1120|
0001e0  6008              STR      r0,[r1,#0]            ;442
0001e2  f7fffffe          BL       HAL_GetTick
0001e6  4605              MOV      r5,r0                 ;445
0001e8  e006              B        |L14.504|
                  |L14.490|
0001ea  f7fffffe          BL       HAL_GetTick
0001ee  1b40              SUBS     r0,r0,r5              ;450
0001f0  2802              CMP      r0,#2                 ;450
0001f2  d901              BLS      |L14.504|
0001f4  2003              MOVS     r0,#3                 ;452
0001f6  e707              B        |L14.8|
                  |L14.504|
0001f8  4898              LDR      r0,|L14.1116|
0001fa  6800              LDR      r0,[r0,#0]            ;448
0001fc  f0000002          AND      r0,r0,#2              ;448
000200  2800              CMP      r0,#0                 ;448
000202  d0f2              BEQ      |L14.490|
000204  4895              LDR      r0,|L14.1116|
000206  6800              LDR      r0,[r0,#0]            ;457
000208  f02000f8          BIC      r0,r0,#0xf8           ;457
00020c  6961              LDR      r1,[r4,#0x14]         ;457
00020e  ea4000c1          ORR      r0,r0,r1,LSL #3       ;457
000212  4992              LDR      r1,|L14.1116|
000214  6008              STR      r0,[r1,#0]            ;457
000216  e013              B        |L14.576|
                  |L14.536|
000218  2000              MOVS     r0,#0                 ;462
00021a  4991              LDR      r1,|L14.1120|
00021c  6008              STR      r0,[r1,#0]            ;462
00021e  f7fffffe          BL       HAL_GetTick
000222  4605              MOV      r5,r0                 ;465
000224  e006              B        |L14.564|
                  |L14.550|
000226  f7fffffe          BL       HAL_GetTick
00022a  1b40              SUBS     r0,r0,r5              ;470
00022c  2802              CMP      r0,#2                 ;470
00022e  d901              BLS      |L14.564|
000230  2003              MOVS     r0,#3                 ;472
000232  e6e9              B        |L14.8|
                  |L14.564|
000234  4889              LDR      r0,|L14.1116|
000236  6800              LDR      r0,[r0,#0]            ;468
000238  f0000002          AND      r0,r0,#2              ;468
00023c  2800              CMP      r0,#0                 ;468
00023e  d1f2              BNE      |L14.550|
                  |L14.576|
000240  7820              LDRB     r0,[r4,#0]            ;479
000242  f0000008          AND      r0,r0,#8              ;479
000246  2808              CMP      r0,#8                 ;479
000248  d138              BNE      |L14.700|
00024a  69a0              LDR      r0,[r4,#0x18]         ;482
00024c  b110              CBZ      r0,|L14.596|
00024e  69a0              LDR      r0,[r4,#0x18]         ;482
000250  2801              CMP      r0,#1                 ;482
000252  d100              BNE      |L14.598|
                  |L14.596|
000254  e004              B        |L14.608|
                  |L14.598|
000256  f44f71f1          MOV      r1,#0x1e2             ;482
00025a  a072              ADR      r0,|L14.1060|
00025c  f7fffffe          BL       assert_failed
                  |L14.608|
000260  69a0              LDR      r0,[r4,#0x18]         ;485
000262  b1b8              CBZ      r0,|L14.660|
000264  2001              MOVS     r0,#1                 ;488
000266  497f              LDR      r1,|L14.1124|
000268  6008              STR      r0,[r1,#0]            ;488
00026a  f7fffffe          BL       HAL_GetTick
00026e  4605              MOV      r5,r0                 ;491
000270  e006              B        |L14.640|
                  |L14.626|
000272  f7fffffe          BL       HAL_GetTick
000276  1b40              SUBS     r0,r0,r5              ;496
000278  2802              CMP      r0,#2                 ;496
00027a  d901              BLS      |L14.640|
00027c  2003              MOVS     r0,#3                 ;498
00027e  e6c3              B        |L14.8|
                  |L14.640|
000280  4876              LDR      r0,|L14.1116|
000282  6a40              LDR      r0,[r0,#0x24]         ;494
000284  f0000002          AND      r0,r0,#2              ;494
000288  2800              CMP      r0,#0                 ;494
00028a  d0f2              BEQ      |L14.626|
00028c  2001              MOVS     r0,#1                 ;503
00028e  f7fffffe          BL       RCC_Delay
000292  e013              B        |L14.700|
                  |L14.660|
000294  2000              MOVS     r0,#0                 ;508
000296  4973              LDR      r1,|L14.1124|
000298  6008              STR      r0,[r1,#0]            ;508
00029a  f7fffffe          BL       HAL_GetTick
00029e  4605              MOV      r5,r0                 ;511
0002a0  e006              B        |L14.688|
                  |L14.674|
0002a2  f7fffffe          BL       HAL_GetTick
0002a6  1b40              SUBS     r0,r0,r5              ;516
0002a8  2802              CMP      r0,#2                 ;516
0002aa  d901              BLS      |L14.688|
0002ac  2003              MOVS     r0,#3                 ;518
0002ae  e6ab              B        |L14.8|
                  |L14.688|
0002b0  486a              LDR      r0,|L14.1116|
0002b2  6a40              LDR      r0,[r0,#0x24]         ;514
0002b4  f0000002          AND      r0,r0,#2              ;514
0002b8  2800              CMP      r0,#0                 ;514
0002ba  d1f2              BNE      |L14.674|
                  |L14.700|
0002bc  7820              LDRB     r0,[r4,#0]            ;524
0002be  f0000004          AND      r0,r0,#4              ;524
0002c2  2804              CMP      r0,#4                 ;524
0002c4  d178              BNE      |L14.952|
0002c6  2700              MOVS     r7,#0                 ;526
0002c8  68e0              LDR      r0,[r4,#0xc]          ;529
0002ca  b128              CBZ      r0,|L14.728|
0002cc  68e0              LDR      r0,[r4,#0xc]          ;529
0002ce  2801              CMP      r0,#1                 ;529
0002d0  d002              BEQ      |L14.728|
0002d2  68e0              LDR      r0,[r4,#0xc]          ;529
0002d4  2805              CMP      r0,#5                 ;529
0002d6  d100              BNE      |L14.730|
                  |L14.728|
0002d8  e004              B        |L14.740|
                  |L14.730|
0002da  f2402111          MOV      r1,#0x211             ;529
0002de  a051              ADR      r0,|L14.1060|
0002e0  f7fffffe          BL       assert_failed
                  |L14.740|
0002e4  485d              LDR      r0,|L14.1116|
0002e6  69c0              LDR      r0,[r0,#0x1c]         ;533
0002e8  f0005080          AND      r0,r0,#0x10000000     ;533
0002ec  b970              CBNZ     r0,|L14.780|
0002ee  bf00              NOP                            ;535
0002f0  485a              LDR      r0,|L14.1116|
0002f2  69c0              LDR      r0,[r0,#0x1c]         ;535
0002f4  f0405080          ORR      r0,r0,#0x10000000     ;535
0002f8  4958              LDR      r1,|L14.1116|
0002fa  61c8              STR      r0,[r1,#0x1c]         ;535
0002fc  4608              MOV      r0,r1                 ;535
0002fe  69c0              LDR      r0,[r0,#0x1c]         ;535
000300  f0005080          AND      r0,r0,#0x10000000     ;535
000304  9000              STR      r0,[sp,#0]            ;535
000306  bf00              NOP                            ;535
000308  bf00              NOP                            ;535
00030a  2701              MOVS     r7,#1                 ;536
                  |L14.780|
00030c  4856              LDR      r0,|L14.1128|
00030e  6800              LDR      r0,[r0,#0]            ;539
000310  f4007080          AND      r0,r0,#0x100          ;539
000314  b9b0              CBNZ     r0,|L14.836|
000316  4854              LDR      r0,|L14.1128|
000318  6800              LDR      r0,[r0,#0]            ;542
00031a  f4407080          ORR      r0,r0,#0x100          ;542
00031e  4952              LDR      r1,|L14.1128|
000320  6008              STR      r0,[r1,#0]            ;542
000322  f7fffffe          BL       HAL_GetTick
000326  4605              MOV      r5,r0                 ;545
000328  e006              B        |L14.824|
                  |L14.810|
00032a  f7fffffe          BL       HAL_GetTick
00032e  1b40              SUBS     r0,r0,r5              ;549
000330  2864              CMP      r0,#0x64              ;549
000332  d901              BLS      |L14.824|
000334  2003              MOVS     r0,#3                 ;551
000336  e667              B        |L14.8|
                  |L14.824|
000338  484b              LDR      r0,|L14.1128|
00033a  6800              LDR      r0,[r0,#0]            ;547
00033c  f4007080          AND      r0,r0,#0x100          ;547
000340  2800              CMP      r0,#0                 ;547
000342  d0f2              BEQ      |L14.810|
                  |L14.836|
000344  bf00              NOP                            ;557
000346  68e0              LDR      r0,[r4,#0xc]          ;557
000348  2801              CMP      r0,#1                 ;557
00034a  d106              BNE      |L14.858|
00034c  4843              LDR      r0,|L14.1116|
00034e  6a00              LDR      r0,[r0,#0x20]         ;557
000350  f0400001          ORR      r0,r0,#1              ;557
000354  4941              LDR      r1,|L14.1116|
000356  6208              STR      r0,[r1,#0x20]         ;557
000358  e027              B        |L14.938|
                  |L14.858|
00035a  68e0              LDR      r0,[r4,#0xc]          ;557
00035c  b958              CBNZ     r0,|L14.886|
00035e  483f              LDR      r0,|L14.1116|
000360  6a00              LDR      r0,[r0,#0x20]         ;557
000362  f0200001          BIC      r0,r0,#1              ;557
000366  493d              LDR      r1,|L14.1116|
000368  6208              STR      r0,[r1,#0x20]         ;557
00036a  4608              MOV      r0,r1                 ;557
00036c  6a00              LDR      r0,[r0,#0x20]         ;557
00036e  f0200004          BIC      r0,r0,#4              ;557
000372  6208              STR      r0,[r1,#0x20]         ;557
000374  e019              B        |L14.938|
                  |L14.886|
000376  68e0              LDR      r0,[r4,#0xc]          ;557
000378  2805              CMP      r0,#5                 ;557
00037a  d10b              BNE      |L14.916|
00037c  4837              LDR      r0,|L14.1116|
00037e  6a00              LDR      r0,[r0,#0x20]         ;557
000380  f0400004          ORR      r0,r0,#4              ;557
000384  4935              LDR      r1,|L14.1116|
000386  6208              STR      r0,[r1,#0x20]         ;557
000388  4608              MOV      r0,r1                 ;557
00038a  6a00              LDR      r0,[r0,#0x20]         ;557
00038c  f0400001          ORR      r0,r0,#1              ;557
000390  6208              STR      r0,[r1,#0x20]         ;557
000392  e00a              B        |L14.938|
                  |L14.916|
000394  4831              LDR      r0,|L14.1116|
000396  6a00              LDR      r0,[r0,#0x20]         ;557
000398  f0200001          BIC      r0,r0,#1              ;557
00039c  492f              LDR      r1,|L14.1116|
00039e  6208              STR      r0,[r1,#0x20]         ;557
0003a0  4608              MOV      r0,r1                 ;557
0003a2  6a00              LDR      r0,[r0,#0x20]         ;557
0003a4  f0200004          BIC      r0,r0,#4              ;557
0003a8  6208              STR      r0,[r1,#0x20]         ;557
                  |L14.938|
0003aa  bf00              NOP                            ;557
0003ac  68e0              LDR      r0,[r4,#0xc]          ;559
0003ae  b1a0              CBZ      r0,|L14.986|
0003b0  f7fffffe          BL       HAL_GetTick
0003b4  4605              MOV      r5,r0                 ;562
0003b6  e009              B        |L14.972|
                  |L14.952|
0003b8  e02b              B        |L14.1042|
                  |L14.954|
0003ba  f7fffffe          BL       HAL_GetTick
0003be  1b40              SUBS     r0,r0,r5              ;567
0003c0  f2413188          MOV      r1,#0x1388            ;567
0003c4  4288              CMP      r0,r1                 ;567
0003c6  d901              BLS      |L14.972|
0003c8  2003              MOVS     r0,#3                 ;569
0003ca  e61d              B        |L14.8|
                  |L14.972|
0003cc  4823              LDR      r0,|L14.1116|
0003ce  6a00              LDR      r0,[r0,#0x20]         ;565
0003d0  f0000002          AND      r0,r0,#2              ;565
0003d4  2800              CMP      r0,#0                 ;565
0003d6  d0f0              BEQ      |L14.954|
0003d8  e012              B        |L14.1024|
                  |L14.986|
0003da  f7fffffe          BL       HAL_GetTick
0003de  4605              MOV      r5,r0                 ;576
0003e0  e008              B        |L14.1012|
                  |L14.994|
0003e2  f7fffffe          BL       HAL_GetTick
0003e6  1b40              SUBS     r0,r0,r5              ;581
0003e8  f2413188          MOV      r1,#0x1388            ;581
0003ec  4288              CMP      r0,r1                 ;581
0003ee  d901              BLS      |L14.1012|
0003f0  2003              MOVS     r0,#3                 ;583
0003f2  e609              B        |L14.8|
                  |L14.1012|
0003f4  4819              LDR      r0,|L14.1116|
0003f6  6a00              LDR      r0,[r0,#0x20]         ;579
0003f8  f0000002          AND      r0,r0,#2              ;579
0003fc  2800              CMP      r0,#0                 ;579
0003fe  d1f0              BNE      |L14.994|
                  |L14.1024|
000400  2f01              CMP      r7,#1                 ;589
000402  d105              BNE      |L14.1040|
000404  4815              LDR      r0,|L14.1116|
000406  69c0              LDR      r0,[r0,#0x1c]         ;591
000408  f0205080          BIC      r0,r0,#0x10000000     ;591
00040c  4913              LDR      r1,|L14.1116|
00040e  61c8              STR      r0,[r1,#0x1c]         ;591
                  |L14.1040|
000410  bf00              NOP                            ;593
                  |L14.1042|
000412  69e0              LDR      r0,[r4,#0x1c]         ;687
000414  b128              CBZ      r0,|L14.1058|
000416  69e0              LDR      r0,[r4,#0x1c]         ;687
000418  2801              CMP      r0,#1                 ;687
00041a  d002              BEQ      |L14.1058|
00041c  69e0              LDR      r0,[r4,#0x1c]         ;687
00041e  2802              CMP      r0,#2                 ;687
000420  d124              BNE      |L14.1132|
                  |L14.1058|
000422  e029              B        |L14.1144|
                  |L14.1060|
000424  2e2e2f44          DCB      "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
000428  72697665
00042c  72732f53
000430  544d3332
000434  46317878
000438  5f48414c
00043c  5f447269
000440  7665722f
000444  5372632f
000448  73746d33
00044c  32663178
000450  785f6861
000454  6c5f7263
000458  632e63  
00045b  00                DCB      0
                  |L14.1116|
                          DCD      0x40021000
                  |L14.1120|
                          DCD      0x42420000
                  |L14.1124|
                          DCD      0x42420480
                  |L14.1128|
                          DCD      0x40007000
                  |L14.1132|
00046c  f24021af          MOV      r1,#0x2af             ;687
000470  f2af0050          ADR      r0,|L14.1060|
000474  f7fffffe          BL       assert_failed
                  |L14.1144|
000478  69e0              LDR      r0,[r4,#0x1c]         ;688
00047a  2800              CMP      r0,#0                 ;688
00047c  d075              BEQ      |L14.1386|
00047e  4867              LDR      r0,|L14.1564|
000480  6840              LDR      r0,[r0,#4]            ;691
000482  f000000c          AND      r0,r0,#0xc            ;691
000486  2808              CMP      r0,#8                 ;691
000488  d070              BEQ      |L14.1388|
00048a  69e0              LDR      r0,[r4,#0x1c]         ;693
00048c  2802              CMP      r0,#2                 ;693
00048e  d16e              BNE      |L14.1390|
000490  6a20              LDR      r0,[r4,#0x20]         ;696
000492  b118              CBZ      r0,|L14.1180|
000494  6a20              LDR      r0,[r4,#0x20]         ;696
000496  f5b03f80          CMP      r0,#0x10000           ;696
00049a  d100              BNE      |L14.1182|
                  |L14.1180|
00049c  e005              B        |L14.1194|
                  |L14.1182|
00049e  f44f712e          MOV      r1,#0x2b8             ;696
0004a2  f2af0080          ADR      r0,|L14.1060|
0004a6  f7fffffe          BL       assert_failed
                  |L14.1194|
0004aa  6a60              LDR      r0,[r4,#0x24]         ;697
0004ac  b3b8              CBZ      r0,|L14.1310|
0004ae  6a60              LDR      r0,[r4,#0x24]         ;697
0004b0  f5b02f80          CMP      r0,#0x40000           ;697
0004b4  d033              BEQ      |L14.1310|
0004b6  6a60              LDR      r0,[r4,#0x24]         ;697
0004b8  f5b02f00          CMP      r0,#0x80000           ;697
0004bc  d02f              BEQ      |L14.1310|
0004be  6a60              LDR      r0,[r4,#0x24]         ;697
0004c0  f5b02f40          CMP      r0,#0xc0000           ;697
0004c4  d02b              BEQ      |L14.1310|
0004c6  6a60              LDR      r0,[r4,#0x24]         ;697
0004c8  f5b01f80          CMP      r0,#0x100000          ;697
0004cc  d027              BEQ      |L14.1310|
0004ce  6a60              LDR      r0,[r4,#0x24]         ;697
0004d0  f5b01fa0          CMP      r0,#0x140000          ;697
0004d4  d023              BEQ      |L14.1310|
0004d6  6a60              LDR      r0,[r4,#0x24]         ;697
0004d8  f5b01fc0          CMP      r0,#0x180000          ;697
0004dc  d01f              BEQ      |L14.1310|
0004de  6a60              LDR      r0,[r4,#0x24]         ;697
0004e0  f5b01fe0          CMP      r0,#0x1c0000          ;697
0004e4  d01b              BEQ      |L14.1310|
0004e6  6a60              LDR      r0,[r4,#0x24]         ;697
0004e8  f5b01f00          CMP      r0,#0x200000          ;697
0004ec  d017              BEQ      |L14.1310|
0004ee  6a60              LDR      r0,[r4,#0x24]         ;697
0004f0  f5b01f10          CMP      r0,#0x240000          ;697
0004f4  d013              BEQ      |L14.1310|
0004f6  6a60              LDR      r0,[r4,#0x24]         ;697
0004f8  f5b01f20          CMP      r0,#0x280000          ;697
0004fc  d00f              BEQ      |L14.1310|
0004fe  6a60              LDR      r0,[r4,#0x24]         ;697
000500  f5b01f30          CMP      r0,#0x2c0000          ;697
000504  d00b              BEQ      |L14.1310|
000506  6a60              LDR      r0,[r4,#0x24]         ;697
000508  f5b01f40          CMP      r0,#0x300000          ;697
00050c  d007              BEQ      |L14.1310|
00050e  6a60              LDR      r0,[r4,#0x24]         ;697
000510  f5b01f50          CMP      r0,#0x340000          ;697
000514  d003              BEQ      |L14.1310|
000516  6a60              LDR      r0,[r4,#0x24]         ;697
000518  f5b01f60          CMP      r0,#0x380000          ;697
00051c  d100              BNE      |L14.1312|
                  |L14.1310|
00051e  e005              B        |L14.1324|
                  |L14.1312|
000520  f24021b9          MOV      r1,#0x2b9             ;697
000524  f2af1004          ADR      r0,|L14.1060|
000528  f7fffffe          BL       assert_failed
                  |L14.1324|
00052c  2000              MOVS     r0,#0                 ;700
00052e  493c              LDR      r1,|L14.1568|
000530  6608              STR      r0,[r1,#0x60]         ;700
000532  f7fffffe          BL       HAL_GetTick
000536  4605              MOV      r5,r0                 ;703
000538  e006              B        |L14.1352|
                  |L14.1338|
00053a  f7fffffe          BL       HAL_GetTick
00053e  1b40              SUBS     r0,r0,r5              ;708
000540  2802              CMP      r0,#2                 ;708
000542  d901              BLS      |L14.1352|
000544  2003              MOVS     r0,#3                 ;710
000546  e55f              B        |L14.8|
                  |L14.1352|
000548  4834              LDR      r0,|L14.1564|
00054a  6800              LDR      r0,[r0,#0]            ;706
00054c  f0007000          AND      r0,r0,#0x2000000      ;706
000550  2800              CMP      r0,#0                 ;706
000552  d1f2              BNE      |L14.1338|
000554  6a20              LDR      r0,[r4,#0x20]         ;716
000556  f5b03f80          CMP      r0,#0x10000           ;716
00055a  d117              BNE      |L14.1420|
00055c  68a0              LDR      r0,[r4,#8]            ;719
00055e  b118              CBZ      r0,|L14.1384|
000560  68a0              LDR      r0,[r4,#8]            ;719
000562  f5b03f00          CMP      r0,#0x20000           ;719
000566  d103              BNE      |L14.1392|
                  |L14.1384|
000568  e008              B        |L14.1404|
                  |L14.1386|
00056a  e055              B        |L14.1560|
                  |L14.1388|
00056c  e042              B        |L14.1524|
                  |L14.1390|
00056e  e02c              B        |L14.1482|
                  |L14.1392|
000570  f24021cf          MOV      r1,#0x2cf             ;719
000574  f2af1054          ADR      r0,|L14.1060|
000578  f7fffffe          BL       assert_failed
                  |L14.1404|
00057c  4827              LDR      r0,|L14.1564|
00057e  6840              LDR      r0,[r0,#4]            ;728
000580  f4203000          BIC      r0,r0,#0x20000        ;728
000584  68a1              LDR      r1,[r4,#8]            ;728
000586  4308              ORRS     r0,r0,r1              ;728
000588  4924              LDR      r1,|L14.1564|
00058a  6048              STR      r0,[r1,#4]            ;728
                  |L14.1420|
00058c  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;732
000590  4308              ORRS     r0,r0,r1              ;732
000592  4922              LDR      r1,|L14.1564|
000594  6849              LDR      r1,[r1,#4]            ;732
000596  f4211174          BIC      r1,r1,#0x3d0000       ;732
00059a  4308              ORRS     r0,r0,r1              ;732
00059c  491f              LDR      r1,|L14.1564|
00059e  6048              STR      r0,[r1,#4]            ;732
0005a0  2001              MOVS     r0,#1                 ;735
0005a2  491f              LDR      r1,|L14.1568|
0005a4  6608              STR      r0,[r1,#0x60]         ;735
0005a6  f7fffffe          BL       HAL_GetTick
0005aa  4605              MOV      r5,r0                 ;738
0005ac  e006              B        |L14.1468|
                  |L14.1454|
0005ae  f7fffffe          BL       HAL_GetTick
0005b2  1b40              SUBS     r0,r0,r5              ;743
0005b4  2802              CMP      r0,#2                 ;743
0005b6  d901              BLS      |L14.1468|
0005b8  2003              MOVS     r0,#3                 ;745
0005ba  e525              B        |L14.8|
                  |L14.1468|
0005bc  4817              LDR      r0,|L14.1564|
0005be  6800              LDR      r0,[r0,#0]            ;741
0005c0  f0007000          AND      r0,r0,#0x2000000      ;741
0005c4  2800              CMP      r0,#0                 ;741
0005c6  d0f2              BEQ      |L14.1454|
0005c8  e026              B        |L14.1560|
                  |L14.1482|
0005ca  2000              MOVS     r0,#0                 ;752
0005cc  4914              LDR      r1,|L14.1568|
0005ce  6608              STR      r0,[r1,#0x60]         ;752
0005d0  f7fffffe          BL       HAL_GetTick
0005d4  4605              MOV      r5,r0                 ;755
0005d6  e006              B        |L14.1510|
                  |L14.1496|
0005d8  f7fffffe          BL       HAL_GetTick
0005dc  1b40              SUBS     r0,r0,r5              ;760
0005de  2802              CMP      r0,#2                 ;760
0005e0  d901              BLS      |L14.1510|
0005e2  2003              MOVS     r0,#3                 ;762
0005e4  e510              B        |L14.8|
                  |L14.1510|
0005e6  480d              LDR      r0,|L14.1564|
0005e8  6800              LDR      r0,[r0,#0]            ;758
0005ea  f0007000          AND      r0,r0,#0x2000000      ;758
0005ee  2800              CMP      r0,#0                 ;758
0005f0  d1f2              BNE      |L14.1496|
0005f2  e011              B        |L14.1560|
                  |L14.1524|
0005f4  69e0              LDR      r0,[r4,#0x1c]         ;770
0005f6  2801              CMP      r0,#1                 ;770
0005f8  d100              BNE      |L14.1532|
0005fa  e505              B        |L14.8|
                  |L14.1532|
0005fc  4807              LDR      r0,|L14.1564|
0005fe  6846              LDR      r6,[r0,#4]            ;777
000600  f4063180          AND      r1,r6,#0x10000        ;778
000604  6a20              LDR      r0,[r4,#0x20]         ;778
000606  4281              CMP      r1,r0                 ;778
000608  d104              BNE      |L14.1556|
00060a  f4061170          AND      r1,r6,#0x3c0000       ;779
00060e  6a60              LDR      r0,[r4,#0x24]         ;779
000610  4281              CMP      r1,r0                 ;779
000612  d001              BEQ      |L14.1560|
                  |L14.1556|
000614  2001              MOVS     r0,#1                 ;781
000616  e4f7              B        |L14.8|
                  |L14.1560|
000618  2000              MOVS     r0,#0                 ;787
00061a  e4f5              B        |L14.8|
;;;789    
                          ENDP

                  |L14.1564|
                          DCD      0x40021000
                  |L14.1568|
                          DCD      0x42420000

                          AREA ||i.RCC_Delay||, CODE, READONLY, ALIGN=2

                  RCC_Delay PROC
;;;1364     */
;;;1365   static void RCC_Delay(uint32_t mdelay)
000000  b508              PUSH     {r3,lr}
;;;1366   {
;;;1367     __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
000002  4908              LDR      r1,|L15.36|
000004  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000006  08c9              LSRS     r1,r1,#3
000008  f44f727a          MOV      r2,#0x3e8
00000c  fbb1f1f2          UDIV     r1,r1,r2
000010  4341              MULS     r1,r0,r1
000012  9100              STR      r1,[sp,#0]
;;;1368     do
000014  bf00              NOP      
                  |L15.22|
;;;1369     {
;;;1370       __NOP();
000016  bf00              NOP      
;;;1371     }
;;;1372     while (Delay --);
000018  9900              LDR      r1,[sp,#0]
00001a  1e4a              SUBS     r2,r1,#1
00001c  9200              STR      r2,[sp,#0]
00001e  2900              CMP      r1,#0
000020  d1f9              BNE      |L15.22|
;;;1373   }
000022  bd08              POP      {r3,pc}
;;;1374   
                          ENDP

                  |L15.36|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 665
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
