; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otemplate\ff.o --asm_dir=./ --list_dir=--list --depend=template\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I.\RTE\_Template -ID:\Keil_v5\Pack\ARM\CMSIS\5.7.0\CMSIS\Core\Include -ID:\Keil_v5\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_FULL_LL_DRIVER -DUSE_HAL_DRIVER -DSTM32F103xB --signed_chars --omf_browse=template\ff.crf ../Middlewares/Third_Party/FatFs/src/ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2247   static
;;;2248   BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2249   	FATFS* fs,	/* File system object */
;;;2250   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2251   )
;;;2252   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2253   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
000006  2100              MOVS     r1,#0
000008  f2410004          MOV      r0,#0x1004
00000c  5501              STRB     r1,[r0,r4]
00000e  1e49              SUBS     r1,r1,#1
000010  f2410030          MOV      r0,#0x1030
000014  5101              STR      r1,[r0,r4]
;;;2254   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       move_window
00001e  b108              CBZ      r0,|L1.36|
;;;2255   		return 3;
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;2256   
;;;2257   	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2258   		return 2;
;;;2259   
;;;2260   	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2261   		return 0;
;;;2262   	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2263   		return 0;
;;;2264   
;;;2265   	return 1;
;;;2266   }
000022  bd70              POP      {r4-r6,pc}
                  |L1.36|
000024  f89411fe          LDRB     r1,[r4,#0x1fe]        ;2257
000028  f24010ff          MOV      r0,#0x1ff             ;2257
00002c  5d00              LDRB     r0,[r0,r4]            ;2257
00002e  ea412000          ORR      r0,r1,r0,LSL #8       ;2257
000032  f64a2155          MOV      r1,#0xaa55            ;2257
000036  4288              CMP      r0,r1                 ;2257
000038  d001              BEQ      |L1.62|
00003a  2002              MOVS     r0,#2                 ;2258
00003c  e7f1              B        |L1.34|
                  |L1.62|
00003e  2039              MOVS     r0,#0x39              ;2260
000040  5d00              LDRB     r0,[r0,r4]            ;2260
000042  0601              LSLS     r1,r0,#24             ;2260
000044  2038              MOVS     r0,#0x38              ;2260
000046  5d00              LDRB     r0,[r0,r4]            ;2260
000048  ea414100          ORR      r1,r1,r0,LSL #16      ;2260
00004c  2037              MOVS     r0,#0x37              ;2260
00004e  5d00              LDRB     r0,[r0,r4]            ;2260
000050  ea412000          ORR      r0,r1,r0,LSL #8       ;2260
000054  f8941036          LDRB     r1,[r4,#0x36]         ;2260
000058  4308              ORRS     r0,r0,r1              ;2260
00005a  f020407f          BIC      r0,r0,#0xff000000     ;2260
00005e  490e              LDR      r1,|L1.152|
000060  4288              CMP      r0,r1                 ;2260
000062  d101              BNE      |L1.104|
000064  2000              MOVS     r0,#0                 ;2261
000066  e7dc              B        |L1.34|
                  |L1.104|
000068  2055              MOVS     r0,#0x55              ;2262
00006a  5d00              LDRB     r0,[r0,r4]            ;2262
00006c  0601              LSLS     r1,r0,#24             ;2262
00006e  2054              MOVS     r0,#0x54              ;2262
000070  5d00              LDRB     r0,[r0,r4]            ;2262
000072  ea414100          ORR      r1,r1,r0,LSL #16      ;2262
000076  2053              MOVS     r0,#0x53              ;2262
000078  5d00              LDRB     r0,[r0,r4]            ;2262
00007a  ea412000          ORR      r0,r1,r0,LSL #8       ;2262
00007e  f8941052          LDRB     r1,[r4,#0x52]         ;2262
000082  4308              ORRS     r0,r0,r1              ;2262
000084  f020407f          BIC      r0,r0,#0xff000000     ;2262
000088  4903              LDR      r1,|L1.152|
00008a  4288              CMP      r0,r1                 ;2262
00008c  d101              BNE      |L1.146|
00008e  2000              MOVS     r0,#0                 ;2263
000090  e7c7              B        |L1.34|
                  |L1.146|
000092  2001              MOVS     r0,#1                 ;2265
000094  e7c5              B        |L1.34|
;;;2267   
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;615    static
;;;616    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;617    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b118              CBZ      r0,|L2.18|
00000a  f9920000          LDRSB    r0,[r2,#0]
00000e  4288              CMP      r0,r1
000010  d1f8              BNE      |L2.4|
                  |L2.18|
;;;618    	return *str;
000012  f9920000          LDRSB    r0,[r2,#0]
;;;619    }
000016  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.chk_lock||, CODE, READONLY, ALIGN=2

                  chk_lock PROC
;;;661    static
;;;662    FRESULT chk_lock (	/* Check if the file can be accessed */
000000  b530              PUSH     {r4,r5,lr}
;;;663    	DIR* dp,		/* Directory object pointing the file to be checked */
;;;664    	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
;;;665    )
;;;666    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;667    	UINT i, be;
;;;668    
;;;669    	/* Search file semaphore table */
;;;670    	for (i = be = 0; i < _FS_LOCK; i++) {
000006  2000              MOVS     r0,#0
000008  4604              MOV      r4,r0
00000a  4601              MOV      r1,r0
00000c  e027              B        |L3.94|
                  |L3.14|
;;;671    		if (Files[i].fs) {	/* Existing entry */
00000e  eb010041          ADD      r0,r1,r1,LSL #1
000012  4d20              LDR      r5,|L3.148|
000014  f8550020          LDR      r0,[r5,r0,LSL #2]
000018  b1f8              CBZ      r0,|L3.90|
;;;672    			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
00001a  eb010041          ADD      r0,r1,r1,LSL #1
00001e  f8555020          LDR      r5,[r5,r0,LSL #2]
000022  f44f5080          MOV      r0,#0x1000
000026  5880              LDR      r0,[r0,r2]
000028  4285              CMP      r5,r0
00002a  d117              BNE      |L3.92|
;;;673    				Files[i].clu == dp->sclust &&
00002c  eb010041          ADD      r0,r1,r1,LSL #1
000030  4d18              LDR      r5,|L3.148|
000032  eb050080          ADD      r0,r5,r0,LSL #2
000036  6845              LDR      r5,[r0,#4]
000038  f2410008          MOV      r0,#0x1008
00003c  5880              LDR      r0,[r0,r2]
00003e  4285              CMP      r5,r0
000040  d10c              BNE      |L3.92|
;;;674    				Files[i].idx == dp->index) break;
000042  eb010041          ADD      r0,r1,r1,LSL #1
000046  4d13              LDR      r5,|L3.148|
000048  eb050080          ADD      r0,r5,r0,LSL #2
00004c  8905              LDRH     r5,[r0,#8]
00004e  f2410006          MOV      r0,#0x1006
000052  5a80              LDRH     r0,[r0,r2]
000054  4285              CMP      r5,r0
000056  d101              BNE      |L3.92|
000058  e003              B        |L3.98|
                  |L3.90|
;;;675    		} else {			/* Blank entry */
;;;676    			be = 1;
00005a  2401              MOVS     r4,#1
                  |L3.92|
00005c  1c49              ADDS     r1,r1,#1              ;670
                  |L3.94|
00005e  2902              CMP      r1,#2                 ;670
000060  d3d5              BCC      |L3.14|
                  |L3.98|
000062  bf00              NOP                            ;674
;;;677    		}
;;;678    	}
;;;679    	if (i == _FS_LOCK)	/* The object is not opened */
000064  2902              CMP      r1,#2
000066  d106              BNE      |L3.118|
;;;680    		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
000068  b90c              CBNZ     r4,|L3.110|
00006a  2b02              CMP      r3,#2
00006c  d101              BNE      |L3.114|
                  |L3.110|
00006e  2000              MOVS     r0,#0
                  |L3.112|
;;;681    
;;;682    	/* The object has been opened. Reject any open against writing file and all write mode open */
;;;683    	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
;;;684    }
000070  bd30              POP      {r4,r5,pc}
                  |L3.114|
000072  2012              MOVS     r0,#0x12              ;680
000074  e7fc              B        |L3.112|
                  |L3.118|
000076  b943              CBNZ     r3,|L3.138|
000078  eb010041          ADD      r0,r1,r1,LSL #1       ;683
00007c  4d05              LDR      r5,|L3.148|
00007e  eb050080          ADD      r0,r5,r0,LSL #2       ;683
000082  8940              LDRH     r0,[r0,#0xa]          ;683
000084  f5b07f80          CMP      r0,#0x100             ;683
000088  d101              BNE      |L3.142|
                  |L3.138|
00008a  2010              MOVS     r0,#0x10              ;683
00008c  e7f0              B        |L3.112|
                  |L3.142|
00008e  2000              MOVS     r0,#0                 ;683
000090  e7ee              B        |L3.112|
;;;685    
                          ENDP

000092  0000              DCW      0x0000
                  |L3.148|
                          DCD      Files

                          AREA ||i.clear_lock||, CODE, READONLY, ALIGN=2

                  clear_lock PROC
;;;752    static
;;;753    void clear_lock (	/* Clear lock entries of the volume */
000000  b510              PUSH     {r4,lr}
;;;754    	FATFS *fs
;;;755    )
;;;756    {
000002  4601              MOV      r1,r0
;;;757    	UINT i;
;;;758    
;;;759    	for (i = 0; i < _FS_LOCK; i++) {
000004  2000              MOVS     r0,#0
000006  e00d              B        |L4.36|
                  |L4.8|
;;;760    		if (Files[i].fs == fs) Files[i].fs = 0;
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b07              LDR      r3,|L4.44|
00000e  f8532022          LDR      r2,[r3,r2,LSL #2]
000012  428a              CMP      r2,r1
000014  d105              BNE      |L4.34|
000016  2200              MOVS     r2,#0
000018  eb000340          ADD      r3,r0,r0,LSL #1
00001c  4c03              LDR      r4,|L4.44|
00001e  f8442023          STR      r2,[r4,r3,LSL #2]
                  |L4.34|
000022  1c40              ADDS     r0,r0,#1              ;759
                  |L4.36|
000024  2802              CMP      r0,#2                 ;759
000026  d3ef              BCC      |L4.8|
;;;761    	}
;;;762    }
000028  bd10              POP      {r4,pc}
;;;763    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      Files

                          AREA ||i.clmt_clust||, CODE, READONLY, ALIGN=1

                  clmt_clust PROC
;;;1124   static
;;;1125   DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
000000  b570              PUSH     {r4-r6,lr}
;;;1126   	FIL* fp,		/* Pointer to the file object */
;;;1127   	DWORD ofs		/* File offset to be converted to cluster# */
;;;1128   )
;;;1129   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
;;;1130   	DWORD cl, ncl, *tbl;
;;;1131   
;;;1132   
;;;1133   	tbl = fp->cltbl + 1;	/* Top of CLMT */
000006  f2410024          MOV      r0,#0x1024
00000a  58c0              LDR      r0,[r0,r3]
00000c  1d02              ADDS     r2,r0,#4
;;;1134   	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
00000e  0b2e              LSRS     r6,r5,#12
000010  f44f5080          MOV      r0,#0x1000
000014  58c0              LDR      r0,[r0,r3]
000016  f5005080          ADD      r0,r0,#0x1000
00001a  7880              LDRB     r0,[r0,#2]
00001c  fbb6f4f0          UDIV     r4,r6,r0
;;;1135   	for (;;) {
000020  bf00              NOP      
                  |L5.34|
;;;1136   		ncl = *tbl++;			/* Number of cluters in the fragment */
000022  ca02              LDM      r2!,{r1}
;;;1137   		if (!ncl) return 0;		/* End of table? (error) */
000024  b909              CBNZ     r1,|L5.42|
000026  2000              MOVS     r0,#0
                  |L5.40|
;;;1138   		if (cl < ncl) break;	/* In this fragment? */
;;;1139   		cl -= ncl; tbl++;		/* Next fragment */
;;;1140   	}
;;;1141   	return cl + *tbl;	/* Return the cluster number */
;;;1142   }
000028  bd70              POP      {r4-r6,pc}
                  |L5.42|
00002a  428c              CMP      r4,r1                 ;1138
00002c  d200              BCS      |L5.48|
00002e  e002              B        |L5.54|
                  |L5.48|
000030  1a64              SUBS     r4,r4,r1              ;1139
000032  1d12              ADDS     r2,r2,#4              ;1139
000034  e7f5              B        |L5.34|
                  |L5.54|
000036  bf00              NOP                            ;1138
000038  6810              LDR      r0,[r2,#0]            ;1141
00003a  4420              ADD      r0,r0,r4              ;1141
00003c  e7f4              B        |L5.40|
;;;1143   #endif	/* _USE_FASTSEEK */
                          ENDP


                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;872    
;;;873    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;874    	FATFS* fs,		/* File system object */
;;;875    	DWORD clst		/* Cluster# to be converted */
;;;876    )
;;;877    {
;;;878    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;879    	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
000004  f2410018          MOV      r0,#0x1018
000008  5880              LDR      r0,[r0,r2]
00000a  1e80              SUBS     r0,r0,#2
00000c  4288              CMP      r0,r1
00000e  d801              BHI      |L6.20|
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;880    	return clst * fs->csize + fs->database;
;;;881    }
000012  4770              BX       lr
                  |L6.20|
000014  f241002c          MOV      r0,#0x102c            ;880
000018  5883              LDR      r3,[r0,r2]            ;880
00001a  f2410002          MOV      r0,#0x1002            ;880
00001e  5c80              LDRB     r0,[r0,r2]            ;880
000020  fb013000          MLA      r0,r1,r0,r3           ;880
000024  e7f5              B        |L6.18|
;;;882    
                          ENDP


                          AREA ||i.cmp_lfn||, CODE, READONLY, ALIGN=2

                  cmp_lfn PROC
;;;1346   static
;;;1347   int cmp_lfn (			/* 1:Matched, 0:Not matched */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1348   	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
;;;1349   	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
;;;1350   )
;;;1351   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1352   	UINT i, s;
;;;1353   	WCHAR wc, uc;
;;;1354   
;;;1355   
;;;1356   	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
000008  7820              LDRB     r0,[r4,#0]
00000a  f0200040          BIC      r0,r0,#0x40
00000e  1e40              SUBS     r0,r0,#1
000010  eb000180          ADD      r1,r0,r0,LSL #2
000014  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;1357   	s = 0; wc = 1;
000018  2700              MOVS     r7,#0
00001a  f04f0801          MOV      r8,#1
;;;1358   	do {
00001e  bf00              NOP      
                  |L7.32|
;;;1359   		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
000020  481a              LDR      r0,|L7.140|
000022  5dc0              LDRB     r0,[r0,r7]
000024  5c20              LDRB     r0,[r4,r0]
000026  4919              LDR      r1,|L7.140|
000028  5dc9              LDRB     r1,[r1,r7]
00002a  4421              ADD      r1,r1,r4
00002c  7849              LDRB     r1,[r1,#1]
00002e  ea402901          ORR      r9,r0,r1,LSL #8
;;;1360   		if (wc) {	/* Last character has not been processed */
000032  f1b80f00          CMP      r8,#0
000036  d010              BEQ      |L7.90|
;;;1361   			wc = ff_wtoupper(uc);		/* Convert it to upper case */
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       ff_wtoupper
00003e  4680              MOV      r8,r0
;;;1362   			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
000040  2e19              CMP      r6,#0x19
000042  d207              BCS      |L7.84|
000044  4631              MOV      r1,r6
000046  1c76              ADDS     r6,r6,#1
000048  f8350011          LDRH     r0,[r5,r1,LSL #1]
00004c  f7fffffe          BL       ff_wtoupper
000050  4540              CMP      r0,r8
000052  d008              BEQ      |L7.102|
                  |L7.84|
;;;1363   				return 0;				/* Not matched */
000054  2000              MOVS     r0,#0
                  |L7.86|
;;;1364   		} else {
;;;1365   			if (uc != 0xFFFF) return 0;	/* Check filler */
;;;1366   		}
;;;1367   	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
;;;1368   
;;;1369   	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1370   		return 0;
;;;1371   
;;;1372   	return 1;						/* The part of LFN matched */
;;;1373   }
000056  e8bd87f0          POP      {r4-r10,pc}
                  |L7.90|
00005a  f64f70ff          MOV      r0,#0xffff            ;1365
00005e  4581              CMP      r9,r0                 ;1365
000060  d001              BEQ      |L7.102|
000062  2000              MOVS     r0,#0                 ;1365
000064  e7f7              B        |L7.86|
                  |L7.102|
000066  1c78              ADDS     r0,r7,#1              ;1367
000068  4607              MOV      r7,r0                 ;1367
00006a  280d              CMP      r0,#0xd               ;1367
00006c  d3d8              BCC      |L7.32|
00006e  7820              LDRB     r0,[r4,#0]            ;1369
000070  f0000040          AND      r0,r0,#0x40           ;1369
000074  b138              CBZ      r0,|L7.134|
000076  f1b80f00          CMP      r8,#0                 ;1369
00007a  d004              BEQ      |L7.134|
00007c  f8350016          LDRH     r0,[r5,r6,LSL #1]     ;1369
000080  b108              CBZ      r0,|L7.134|
000082  2000              MOVS     r0,#0                 ;1370
000084  e7e7              B        |L7.86|
                  |L7.134|
000086  2001              MOVS     r0,#1                 ;1372
000088  e7e5              B        |L7.86|
;;;1374   
                          ENDP

00008a  0000              DCW      0x0000
                  |L7.140|
                          DCD      LfnOfs

                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;1062   static
;;;1063   DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1064   	FATFS* fs,			/* File system object */
;;;1065   	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;1066   )
;;;1067   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;1068   	DWORD cs, ncl, scl;
;;;1069   	FRESULT res;
;;;1070   
;;;1071   
;;;1072   	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d10a              BNE      |L8.36|
;;;1073   		scl = fs->last_clust;			/* Get suggested start point */
00000e  f241000c          MOV      r0,#0x100c
000012  5907              LDR      r7,[r0,r4]
;;;1074   		if (!scl || scl >= fs->n_fatent) scl = 1;
000014  b127              CBZ      r7,|L8.32|
000016  f2410018          MOV      r0,#0x1018
00001a  5900              LDR      r0,[r0,r4]
00001c  42b8              CMP      r0,r7
00001e  d817              BHI      |L8.80|
                  |L8.32|
000020  2701              MOVS     r7,#1
000022  e015              B        |L8.80|
                  |L8.36|
;;;1075   	}
;;;1076   	else {					/* Stretch the current chain */
;;;1077   		cs = get_fat(fs, clst);			/* Check the cluster status */
000024  4649              MOV      r1,r9
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       get_fat
00002c  4606              MOV      r6,r0
;;;1078   		if (cs < 2) return 1;			/* Invalid value */
00002e  2e02              CMP      r6,#2
000030  d202              BCS      |L8.56|
000032  2001              MOVS     r0,#1
                  |L8.52|
;;;1079   		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;1080   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1081   		scl = clst;
;;;1082   	}
;;;1083   
;;;1084   	ncl = scl;				/* Start cluster */
;;;1085   	for (;;) {
;;;1086   		ncl++;							/* Next cluster */
;;;1087   		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;1088   			ncl = 2;
;;;1089   			if (ncl > scl) return 0;	/* No free cluster */
;;;1090   		}
;;;1091   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1092   		if (cs == 0) break;				/* Found a free cluster */
;;;1093   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1094   			return cs;
;;;1095   		if (ncl == scl) return 0;		/* No free cluster */
;;;1096   	}
;;;1097   
;;;1098   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1099   	if (res == FR_OK && clst != 0) {
;;;1100   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1101   	}
;;;1102   	if (res == FR_OK) {
;;;1103   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1104   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1105   			fs->free_clust--;
;;;1106   			fs->fsi_flag |= 1;
;;;1107   		}
;;;1108   	} else {
;;;1109   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1110   	}
;;;1111   
;;;1112   	return ncl;		/* Return new cluster number or error code */
;;;1113   }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L8.56|
000038  1c70              ADDS     r0,r6,#1              ;1079
00003a  b908              CBNZ     r0,|L8.64|
00003c  4630              MOV      r0,r6                 ;1079
00003e  e7f9              B        |L8.52|
                  |L8.64|
000040  f2410018          MOV      r0,#0x1018            ;1080
000044  5900              LDR      r0,[r0,r4]            ;1080
000046  42b0              CMP      r0,r6                 ;1080
000048  d901              BLS      |L8.78|
00004a  4630              MOV      r0,r6                 ;1080
00004c  e7f2              B        |L8.52|
                  |L8.78|
00004e  464f              MOV      r7,r9                 ;1081
                  |L8.80|
000050  463d              MOV      r5,r7                 ;1084
000052  bf00              NOP                            ;1085
                  |L8.84|
000054  1c6d              ADDS     r5,r5,#1              ;1086
000056  f2410018          MOV      r0,#0x1018            ;1087
00005a  5900              LDR      r0,[r0,r4]            ;1087
00005c  42a8              CMP      r0,r5                 ;1087
00005e  d804              BHI      |L8.106|
000060  2502              MOVS     r5,#2                 ;1088
000062  42bd              CMP      r5,r7                 ;1089
000064  d901              BLS      |L8.106|
000066  2000              MOVS     r0,#0                 ;1089
000068  e7e4              B        |L8.52|
                  |L8.106|
00006a  4629              MOV      r1,r5                 ;1091
00006c  4620              MOV      r0,r4                 ;1091
00006e  f7fffffe          BL       get_fat
000072  4606              MOV      r6,r0                 ;1091
000074  b906              CBNZ     r6,|L8.120|
000076  e009              B        |L8.140|
                  |L8.120|
000078  1c70              ADDS     r0,r6,#1              ;1093
00007a  b108              CBZ      r0,|L8.128|
00007c  2e01              CMP      r6,#1                 ;1093
00007e  d101              BNE      |L8.132|
                  |L8.128|
000080  4630              MOV      r0,r6                 ;1094
000082  e7d7              B        |L8.52|
                  |L8.132|
000084  42bd              CMP      r5,r7                 ;1095
000086  d1e5              BNE      |L8.84|
000088  2000              MOVS     r0,#0                 ;1095
00008a  e7d3              B        |L8.52|
                  |L8.140|
00008c  bf00              NOP                            ;1092
00008e  f06f4270          MVN      r2,#0xf0000000        ;1098
000092  4629              MOV      r1,r5                 ;1098
000094  4620              MOV      r0,r4                 ;1098
000096  f7fffffe          BL       put_fat
00009a  4680              MOV      r8,r0                 ;1098
00009c  f1b80f00          CMP      r8,#0                 ;1099
0000a0  d108              BNE      |L8.180|
0000a2  f1b90f00          CMP      r9,#0                 ;1099
0000a6  d005              BEQ      |L8.180|
0000a8  462a              MOV      r2,r5                 ;1100
0000aa  4649              MOV      r1,r9                 ;1100
0000ac  4620              MOV      r0,r4                 ;1100
0000ae  f7fffffe          BL       put_fat
0000b2  4680              MOV      r8,r0                 ;1100
                  |L8.180|
0000b4  f1b80f00          CMP      r8,#0                 ;1102
0000b8  d116              BNE      |L8.232|
0000ba  f241000c          MOV      r0,#0x100c            ;1103
0000be  5105              STR      r5,[r0,r4]            ;1103
0000c0  1d00              ADDS     r0,r0,#4              ;1104
0000c2  5900              LDR      r0,[r0,r4]            ;1104
0000c4  1c40              ADDS     r0,r0,#1              ;1104
0000c6  b1b8              CBZ      r0,|L8.248|
0000c8  f2410010          MOV      r0,#0x1010            ;1105
0000cc  5900              LDR      r0,[r0,r4]            ;1105
0000ce  1e40              SUBS     r0,r0,#1              ;1105
0000d0  f2410110          MOV      r1,#0x1010            ;1105
0000d4  5108              STR      r0,[r1,r4]            ;1105
0000d6  f2410005          MOV      r0,#0x1005            ;1106
0000da  5d00              LDRB     r0,[r0,r4]            ;1106
0000dc  f0400101          ORR      r1,r0,#1              ;1106
0000e0  f2410005          MOV      r0,#0x1005            ;1106
0000e4  5501              STRB     r1,[r0,r4]            ;1106
0000e6  e007              B        |L8.248|
                  |L8.232|
0000e8  f1b80f01          CMP      r8,#1                 ;1109
0000ec  d102              BNE      |L8.244|
0000ee  f04f30ff          MOV      r0,#0xffffffff        ;1109
0000f2  e000              B        |L8.246|
                  |L8.244|
0000f4  2001              MOVS     r0,#1                 ;1109
                  |L8.246|
0000f6  4605              MOV      r5,r0                 ;1109
                  |L8.248|
0000f8  4628              MOV      r0,r5                 ;1112
0000fa  e79b              B        |L8.52|
;;;1114   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1912   static
;;;1913   FRESULT create_name (
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1914   	DIR* dp,			/* Pointer to the directory object */
;;;1915   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1916   )
;;;1917   {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;1918   #if _USE_LFN	/* LFN configuration */
;;;1919   	BYTE b, cf;
;;;1920   	WCHAR w, *lfn;
;;;1921   	UINT i, ni, si, di;
;;;1922   	const TCHAR *p;
;;;1923   
;;;1924   	/* Create LFN in Unicode */
;;;1925   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000008  9804              LDR      r0,[sp,#0x10]
00000a  6800              LDR      r0,[r0,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  e002              B        |L9.22|
                  |L9.16|
000010  9801              LDR      r0,[sp,#4]
000012  1c40              ADDS     r0,r0,#1
000014  9001              STR      r0,[sp,#4]
                  |L9.22|
000016  9801              LDR      r0,[sp,#4]
000018  7800              LDRB     r0,[r0,#0]
00001a  282f              CMP      r0,#0x2f
00001c  d0f8              BEQ      |L9.16|
00001e  9801              LDR      r0,[sp,#4]
000020  7800              LDRB     r0,[r0,#0]
000022  285c              CMP      r0,#0x5c
000024  d0f4              BEQ      |L9.16|
;;;1926   	lfn = dp->lfn;
000026  f44f5081          MOV      r0,#0x1020
00002a  f8507009          LDR      r7,[r0,r9]
;;;1927   	si = di = 0;
00002e  2500              MOVS     r5,#0
000030  46a8              MOV      r8,r5
;;;1928   	for (;;) {
000032  bf00              NOP      
                  |L9.52|
;;;1929   		w = p[si++];					/* Get a character */
000034  4640              MOV      r0,r8
000036  f1080801          ADD      r8,r8,#1
00003a  9901              LDR      r1,[sp,#4]
00003c  5608              LDRSB    r0,[r1,r0]
00003e  b284              UXTH     r4,r0
;;;1930   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000040  2c20              CMP      r4,#0x20
000042  db03              BLT      |L9.76|
000044  2c2f              CMP      r4,#0x2f
000046  d001              BEQ      |L9.76|
000048  2c5c              CMP      r4,#0x5c
00004a  d100              BNE      |L9.78|
                  |L9.76|
00004c  e01c              B        |L9.136|
                  |L9.78|
;;;1931   		if (di >= _MAX_LFN)				/* Reject too long name */
00004e  2d19              CMP      r5,#0x19
000050  d303              BCC      |L9.90|
;;;1932   			return FR_INVALID_NAME;
000052  2006              MOVS     r0,#6
                  |L9.84|
;;;1933   #if !_LFN_UNICODE
;;;1934   		w &= 0xFF;
;;;1935   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1936   #if _DF1S
;;;1937   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1938   			w = (w << 8) + b;			/* Create a DBC */
;;;1939   			if (!IsDBCS2(b))
;;;1940   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1941   #endif
;;;1942   		}
;;;1943   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1944   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1945   #endif
;;;1946   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1947   			return FR_INVALID_NAME;
;;;1948   		lfn[di++] = w;					/* Store the Unicode character */
;;;1949   	}
;;;1950   	*path = &p[si];						/* Return pointer to the next segment */
;;;1951   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1952   #if _FS_RPATH
;;;1953   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1954   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1955   		lfn[di] = 0;
;;;1956   		for (i = 0; i < 11; i++)
;;;1957   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1958   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1959   		return FR_OK;
;;;1960   	}
;;;1961   #endif
;;;1962   	while (di) {						/* Strip trailing spaces and dots */
;;;1963   		w = lfn[di - 1];
;;;1964   		if (w != ' ' && w != '.') break;
;;;1965   		di--;
;;;1966   	}
;;;1967   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1968   
;;;1969   	lfn[di] = 0;						/* LFN is created */
;;;1970   
;;;1971   	/* Create SFN in directory form */
;;;1972   	mem_set(dp->fn, ' ', 11);
;;;1973   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1974   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1975   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1976   
;;;1977   	b = i = 0; ni = 8;
;;;1978   	for (;;) {
;;;1979   		w = lfn[si++];					/* Get an LFN character */
;;;1980   		if (!w) break;					/* Break on end of the LFN */
;;;1981   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1982   			cf |= NS_LOSS | NS_LFN; continue;
;;;1983   		}
;;;1984   
;;;1985   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1986   			if (ni == 11) {				/* Long extension */
;;;1987   				cf |= NS_LOSS | NS_LFN; break;
;;;1988   			}
;;;1989   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1990   			if (si > di) break;			/* No extension */
;;;1991   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1992   			b <<= 2; continue;
;;;1993   		}
;;;1994   
;;;1995   		if (w >= 0x80) {				/* Non ASCII character */
;;;1996   #ifdef _EXCVT
;;;1997   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1998   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1999   #else
;;;2000   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;2001   #endif
;;;2002   			cf |= NS_LFN;				/* Force create LFN entry */
;;;2003   		}
;;;2004   
;;;2005   		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
;;;2006   			if (i >= ni - 1) {
;;;2007   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;2008   			}
;;;2009   			dp->fn[i++] = (BYTE)(w >> 8);
;;;2010   		} else {						/* SBC */
;;;2011   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;2012   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;2013   			} else {
;;;2014   				if (IsUpper(w)) {		/* ASCII large capital */
;;;2015   					b |= 2;
;;;2016   				} else {
;;;2017   					if (IsLower(w)) {	/* ASCII small capital */
;;;2018   						b |= 1; w -= 0x20;
;;;2019   					}
;;;2020   				}
;;;2021   			}
;;;2022   		}
;;;2023   		dp->fn[i++] = (BYTE)w;
;;;2024   	}
;;;2025   
;;;2026   	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
;;;2027   
;;;2028   	if (ni == 8) b <<= 2;
;;;2029   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;2030   		cf |= NS_LFN;
;;;2031   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;2032   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;2033   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;2034   	}
;;;2035   
;;;2036   	dp->fn[NSFLAG] = cf;	/* SFN is created */
;;;2037   
;;;2038   	return FR_OK;
;;;2039   
;;;2040   
;;;2041   #else	/* Non-LFN configuration */
;;;2042   	BYTE b, c, d, *sfn;
;;;2043   	UINT ni, si, i;
;;;2044   	const char *p;
;;;2045   
;;;2046   	/* Create file name in directory form */
;;;2047   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;2048   	sfn = dp->fn;
;;;2049   	mem_set(sfn, ' ', 11);
;;;2050   	si = i = b = 0; ni = 8;
;;;2051   #if _FS_RPATH
;;;2052   	if (p[si] == '.') { /* Is this a dot entry? */
;;;2053   		for (;;) {
;;;2054   			c = (BYTE)p[si++];
;;;2055   			if (c != '.' || si >= 3) break;
;;;2056   			sfn[i++] = c;
;;;2057   		}
;;;2058   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;2059   		*path = &p[si];									/* Return pointer to the next segment */
;;;2060   		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;2061   		return FR_OK;
;;;2062   	}
;;;2063   #endif
;;;2064   	for (;;) {
;;;2065   		c = (BYTE)p[si++];
;;;2066   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;2067   		if (c == '.' || i >= ni) {
;;;2068   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;2069   			i = 8; ni = 11;
;;;2070   			b <<= 2; continue;
;;;2071   		}
;;;2072   		if (c >= 0x80) {				/* Extended character? */
;;;2073   			b |= 3;						/* Eliminate NT flag */
;;;2074   #ifdef _EXCVT
;;;2075   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;2076   #else
;;;2077   #if !_DF1S
;;;2078   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;2079   #endif
;;;2080   #endif
;;;2081   		}
;;;2082   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;2083   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;2084   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;2085   				return FR_INVALID_NAME;
;;;2086   			sfn[i++] = c;
;;;2087   			sfn[i++] = d;
;;;2088   		} else {						/* SBC */
;;;2089   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;2090   				return FR_INVALID_NAME;
;;;2091   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;2092   				b |= 2;
;;;2093   			} else {
;;;2094   				if (IsLower(c)) {		/* ASCII small capital? */
;;;2095   					b |= 1; c -= 0x20;
;;;2096   				}
;;;2097   			}
;;;2098   			sfn[i++] = c;
;;;2099   		}
;;;2100   	}
;;;2101   	*path = &p[si];						/* Return pointer to the next segment */
;;;2102   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;2103   
;;;2104   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;2105   	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
;;;2106   
;;;2107   	if (ni == 8) b <<= 2;
;;;2108   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;2109   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;2110   
;;;2111   	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
;;;2112   
;;;2113   	return FR_OK;
;;;2114   #endif
;;;2115   }
000054  b005              ADD      sp,sp,#0x14
000056  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.90|
00005a  b2e4              UXTB     r4,r4                 ;1934
00005c  2101              MOVS     r1,#1                 ;1943
00005e  4620              MOV      r0,r4                 ;1943
000060  f7fffffe          BL       ff_convert
000064  4604              MOV      r4,r0                 ;1943
000066  b90c              CBNZ     r4,|L9.108|
000068  2006              MOVS     r0,#6                 ;1944
00006a  e7f3              B        |L9.84|
                  |L9.108|
00006c  2c80              CMP      r4,#0x80              ;1946
00006e  da06              BGE      |L9.126|
000070  4621              MOV      r1,r4                 ;1946
000072  a08b              ADR      r0,|L9.672|
000074  f7fffffe          BL       chk_chr
000078  b108              CBZ      r0,|L9.126|
00007a  2006              MOVS     r0,#6                 ;1947
00007c  e7ea              B        |L9.84|
                  |L9.126|
00007e  4628              MOV      r0,r5                 ;1948
000080  1c6d              ADDS     r5,r5,#1              ;1948
000082  f8274010          STRH     r4,[r7,r0,LSL #1]     ;1948
000086  e7d5              B        |L9.52|
                  |L9.136|
000088  bf00              NOP                            ;1930
00008a  9801              LDR      r0,[sp,#4]            ;1950
00008c  eb000108          ADD      r1,r0,r8              ;1950
000090  9804              LDR      r0,[sp,#0x10]         ;1950
000092  6001              STR      r1,[r0,#0]            ;1950
000094  2c20              CMP      r4,#0x20              ;1951
000096  da01              BGE      |L9.156|
000098  2004              MOVS     r0,#4                 ;1951
00009a  e000              B        |L9.158|
                  |L9.156|
00009c  2000              MOVS     r0,#0                 ;1951
                  |L9.158|
00009e  4606              MOV      r6,r0                 ;1951
0000a0  2d01              CMP      r5,#1                 ;1953
0000a2  d104              BNE      |L9.174|
0000a4  1e68              SUBS     r0,r5,#1              ;1953
0000a6  f8370010          LDRH     r0,[r7,r0,LSL #1]     ;1953
0000aa  282e              CMP      r0,#0x2e              ;1953
0000ac  d00b              BEQ      |L9.198|
                  |L9.174|
0000ae  2d02              CMP      r5,#2                 ;1954
0000b0  d128              BNE      |L9.260|
0000b2  1e68              SUBS     r0,r5,#1              ;1954
0000b4  f8370010          LDRH     r0,[r7,r0,LSL #1]     ;1954
0000b8  282e              CMP      r0,#0x2e              ;1954
0000ba  d123              BNE      |L9.260|
0000bc  1ea8              SUBS     r0,r5,#2              ;1954
0000be  f8370010          LDRH     r0,[r7,r0,LSL #1]     ;1954
0000c2  282e              CMP      r0,#0x2e              ;1954
0000c4  d11e              BNE      |L9.260|
                  |L9.198|
0000c6  2000              MOVS     r0,#0                 ;1955
0000c8  f8270015          STRH     r0,[r7,r5,LSL #1]     ;1955
0000cc  4683              MOV      r11,r0                ;1956
0000ce  e00c              B        |L9.234|
                  |L9.208|
0000d0  45ab              CMP      r11,r5                ;1957
0000d2  d201              BCS      |L9.216|
0000d4  212e              MOVS     r1,#0x2e              ;1957
0000d6  e000              B        |L9.218|
                  |L9.216|
0000d8  2120              MOVS     r1,#0x20              ;1957
                  |L9.218|
0000da  f2410018          MOV      r0,#0x1018            ;1957
0000de  f8500009          LDR      r0,[r0,r9]            ;1957
0000e2  f800100b          STRB     r1,[r0,r11]           ;1957
0000e6  f10b0b01          ADD      r11,r11,#1            ;1956
                  |L9.234|
0000ea  f1bb0f0b          CMP      r11,#0xb              ;1956
0000ee  d3ef              BCC      |L9.208|
0000f0  f0460120          ORR      r1,r6,#0x20           ;1958
0000f4  f2410018          MOV      r0,#0x1018            ;1958
0000f8  f8500009          LDR      r0,[r0,r9]            ;1958
0000fc  f800100b          STRB     r1,[r0,r11]           ;1958
000100  2000              MOVS     r0,#0                 ;1959
000102  e7a7              B        |L9.84|
                  |L9.260|
000104  e008              B        |L9.280|
                  |L9.262|
000106  1e68              SUBS     r0,r5,#1              ;1963
000108  f8374010          LDRH     r4,[r7,r0,LSL #1]     ;1963
00010c  2c20              CMP      r4,#0x20              ;1964
00010e  d002              BEQ      |L9.278|
000110  2c2e              CMP      r4,#0x2e              ;1964
000112  d000              BEQ      |L9.278|
000114  e002              B        |L9.284|
                  |L9.278|
000116  1e6d              SUBS     r5,r5,#1              ;1965
                  |L9.280|
000118  2d00              CMP      r5,#0                 ;1962
00011a  d1f4              BNE      |L9.262|
                  |L9.284|
00011c  bf00              NOP                            ;1964
00011e  b90d              CBNZ     r5,|L9.292|
000120  2006              MOVS     r0,#6                 ;1967
000122  e797              B        |L9.84|
                  |L9.292|
000124  2000              MOVS     r0,#0                 ;1969
000126  f8270015          STRH     r0,[r7,r5,LSL #1]     ;1969
00012a  f2410118          MOV      r1,#0x1018            ;1972
00012e  f8510009          LDR      r0,[r1,r9]            ;1972
000132  220b              MOVS     r2,#0xb               ;1972
000134  2120              MOVS     r1,#0x20              ;1972
000136  f7fffffe          BL       mem_set
00013a  f04f0800          MOV      r8,#0                 ;1973
00013e  e001              B        |L9.324|
                  |L9.320|
000140  f1080801          ADD      r8,r8,#1              ;1973
                  |L9.324|
000144  f8370018          LDRH     r0,[r7,r8,LSL #1]     ;1973
000148  2820              CMP      r0,#0x20              ;1973
00014a  d0f9              BEQ      |L9.320|
00014c  f8370018          LDRH     r0,[r7,r8,LSL #1]     ;1973
000150  282e              CMP      r0,#0x2e              ;1973
000152  d0f5              BEQ      |L9.320|
000154  f1b80f00          CMP      r8,#0                 ;1974
000158  d001              BEQ      |L9.350|
00015a  f0460603          ORR      r6,r6,#3              ;1974
                  |L9.350|
00015e  e000              B        |L9.354|
                  |L9.352|
000160  1e6d              SUBS     r5,r5,#1              ;1975
                  |L9.354|
000162  b125              CBZ      r5,|L9.366|
000164  1e68              SUBS     r0,r5,#1              ;1975
000166  f8370010          LDRH     r0,[r7,r0,LSL #1]     ;1975
00016a  282e              CMP      r0,#0x2e              ;1975
00016c  d1f8              BNE      |L9.352|
                  |L9.366|
00016e  f04f0a00          MOV      r10,#0                ;1977
000172  46d3              MOV      r11,r10               ;1977
000174  2008              MOVS     r0,#8                 ;1977
000176  9002              STR      r0,[sp,#8]            ;1977
000178  bf00              NOP                            ;1978
                  |L9.378|
00017a  4640              MOV      r0,r8                 ;1979
00017c  f1080801          ADD      r8,r8,#1              ;1979
000180  f8374010          LDRH     r4,[r7,r0,LSL #1]     ;1979
000184  b904              CBNZ     r4,|L9.392|
000186  e056              B        |L9.566|
                  |L9.392|
000188  2c20              CMP      r4,#0x20              ;1981
00018a  d003              BEQ      |L9.404|
00018c  2c2e              CMP      r4,#0x2e              ;1981
00018e  d104              BNE      |L9.410|
000190  45a8              CMP      r8,r5                 ;1981
000192  d002              BEQ      |L9.410|
                  |L9.404|
000194  f0460603          ORR      r6,r6,#3              ;1982
000198  e7ef              B        |L9.378|
                  |L9.410|
00019a  9802              LDR      r0,[sp,#8]            ;1985
00019c  4583              CMP      r11,r0                ;1985
00019e  d201              BCS      |L9.420|
0001a0  45a8              CMP      r8,r5                 ;1985
0001a2  d116              BNE      |L9.466|
                  |L9.420|
0001a4  9802              LDR      r0,[sp,#8]            ;1986
0001a6  280b              CMP      r0,#0xb               ;1986
0001a8  d102              BNE      |L9.432|
0001aa  f0460603          ORR      r6,r6,#3              ;1987
0001ae  e042              B        |L9.566|
                  |L9.432|
0001b0  45a8              CMP      r8,r5                 ;1989
0001b2  d001              BEQ      |L9.440|
0001b4  f0460603          ORR      r6,r6,#3              ;1989
                  |L9.440|
0001b8  45a8              CMP      r8,r5                 ;1990
0001ba  d900              BLS      |L9.446|
0001bc  e03b              B        |L9.566|
                  |L9.446|
0001be  46a8              MOV      r8,r5                 ;1991
0001c0  f04f0b08          MOV      r11,#8                ;1991
0001c4  200b              MOVS     r0,#0xb               ;1991
0001c6  9002              STR      r0,[sp,#8]            ;1991
0001c8  ea4f608a          LSL      r0,r10,#26            ;1992
0001cc  ea4f6a10          LSR      r10,r0,#24            ;1992
0001d0  e7d3              B        |L9.378|
                  |L9.466|
0001d2  2c80              CMP      r4,#0x80              ;1995
0001d4  db0b              BLT      |L9.494|
0001d6  2100              MOVS     r1,#0                 ;1997
0001d8  4620              MOV      r0,r4                 ;1997
0001da  f7fffffe          BL       ff_convert
0001de  4604              MOV      r4,r0                 ;1997
0001e0  b11c              CBZ      r4,|L9.490|
0001e2  f1a40080          SUB      r0,r4,#0x80           ;1998
0001e6  4931              LDR      r1,|L9.684|
0001e8  5c0c              LDRB     r4,[r1,r0]            ;1998
                  |L9.490|
0001ea  f0460602          ORR      r6,r6,#2              ;2002
                  |L9.494|
0001ee  bf00              NOP                            ;2005
0001f0  b124              CBZ      r4,|L9.508|
0001f2  4621              MOV      r1,r4                 ;2011
0001f4  a02e              ADR      r0,|L9.688|
0001f6  f7fffffe          BL       chk_chr
0001fa  b118              CBZ      r0,|L9.516|
                  |L9.508|
0001fc  245f              MOVS     r4,#0x5f              ;2012
0001fe  f0460603          ORR      r6,r6,#3              ;2012
000202  e00f              B        |L9.548|
                  |L9.516|
000204  2c41              CMP      r4,#0x41              ;2014
000206  db04              BLT      |L9.530|
000208  2c5a              CMP      r4,#0x5a              ;2014
00020a  dc02              BGT      |L9.530|
00020c  f04a0a02          ORR      r10,r10,#2            ;2015
000210  e008              B        |L9.548|
                  |L9.530|
000212  2c61              CMP      r4,#0x61              ;2017
000214  db06              BLT      |L9.548|
000216  2c7a              CMP      r4,#0x7a              ;2017
000218  dc04              BGT      |L9.548|
00021a  f04a0a01          ORR      r10,r10,#1            ;2018
00021e  f1a40020          SUB      r0,r4,#0x20           ;2018
000222  b284              UXTH     r4,r0                 ;2018
                  |L9.548|
000224  f2410018          MOV      r0,#0x1018            ;2023
000228  f8503009          LDR      r3,[r0,r9]            ;2023
00022c  4658              MOV      r0,r11                ;2023
00022e  f10b0b01          ADD      r11,r11,#1            ;2023
000232  541c              STRB     r4,[r3,r0]            ;2023
000234  e7a1              B        |L9.378|
                  |L9.566|
000236  bf00              NOP                            ;1980
000238  f2410018          MOV      r0,#0x1018            ;2026
00023c  f8500009          LDR      r0,[r0,r9]            ;2026
000240  7800              LDRB     r0,[r0,#0]            ;2026
000242  28e5              CMP      r0,#0xe5              ;2026
000244  d105              BNE      |L9.594|
000246  2105              MOVS     r1,#5                 ;2026
000248  f2410018          MOV      r0,#0x1018            ;2026
00024c  f8500009          LDR      r0,[r0,r9]            ;2026
000250  7001              STRB     r1,[r0,#0]            ;2026
                  |L9.594|
000252  9802              LDR      r0,[sp,#8]            ;2028
000254  2808              CMP      r0,#8                 ;2028
000256  d103              BNE      |L9.608|
000258  ea4f608a          LSL      r0,r10,#26            ;2028
00025c  ea4f6a10          LSR      r10,r0,#24            ;2028
                  |L9.608|
000260  f00a000c          AND      r0,r10,#0xc           ;2029
000264  280c              CMP      r0,#0xc               ;2029
000266  d003              BEQ      |L9.624|
000268  f00a0003          AND      r0,r10,#3             ;2029
00026c  2803              CMP      r0,#3                 ;2029
00026e  d101              BNE      |L9.628|
                  |L9.624|
000270  f0460602          ORR      r6,r6,#2              ;2030
                  |L9.628|
000274  f0060002          AND      r0,r6,#2              ;2031
000278  b958              CBNZ     r0,|L9.658|
00027a  f00a0003          AND      r0,r10,#3             ;2032
00027e  2801              CMP      r0,#1                 ;2032
000280  d101              BNE      |L9.646|
000282  f0460610          ORR      r6,r6,#0x10           ;2032
                  |L9.646|
000286  f00a000c          AND      r0,r10,#0xc           ;2033
00028a  2804              CMP      r0,#4                 ;2033
00028c  d101              BNE      |L9.658|
00028e  f0460608          ORR      r6,r6,#8              ;2033
                  |L9.658|
000292  f2410018          MOV      r0,#0x1018            ;2036
000296  f8500009          LDR      r0,[r0,r9]            ;2036
00029a  72c6              STRB     r6,[r0,#0xb]          ;2036
00029c  2000              MOVS     r0,#0                 ;2038
00029e  e6d9              B        |L9.84|
;;;2116   
                          ENDP

                  |L9.672|
0002a0  222a3a3c          DCB      """*:<>?|",127,0
0002a4  3e3f7c7f
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L9.684|
                          DCD      ExCvt
                  |L9.688|
0002b0  2b2c3b3d          DCB      "+,;=[]",0
0002b4  5b5d00  
0002b7  00                DCB      0

                          AREA ||i.dec_lock||, CODE, READONLY, ALIGN=2

                  dec_lock PROC
;;;729    static
;;;730    FRESULT dec_lock (	/* Decrement object open counter */
000000  b530              PUSH     {r4,r5,lr}
;;;731    	UINT i			/* Semaphore index (1..) */
;;;732    )
;;;733    {
000002  4602              MOV      r2,r0
;;;734    	WORD n;
;;;735    	FRESULT res;
;;;736    
;;;737    
;;;738    	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
000004  1e53              SUBS     r3,r2,#1
000006  461a              MOV      r2,r3
000008  2b02              CMP      r3,#2
00000a  d21b              BCS      |L10.68|
;;;739    		n = Files[i].ctr;
00000c  eb020342          ADD      r3,r2,r2,LSL #1
000010  4c0d              LDR      r4,|L10.72|
000012  eb040383          ADD      r3,r4,r3,LSL #2
000016  8959              LDRH     r1,[r3,#0xa]
;;;740    		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
000018  f5b17f80          CMP      r1,#0x100
00001c  d100              BNE      |L10.32|
00001e  2100              MOVS     r1,#0
                  |L10.32|
;;;741    		if (n) n--;					/* Decrement read mode open count */
000020  b109              CBZ      r1,|L10.38|
000022  1e4b              SUBS     r3,r1,#1
000024  b299              UXTH     r1,r3
                  |L10.38|
;;;742    		Files[i].ctr = n;
000026  eb020342          ADD      r3,r2,r2,LSL #1
00002a  4c07              LDR      r4,|L10.72|
00002c  eb040383          ADD      r3,r4,r3,LSL #2
000030  8159              STRH     r1,[r3,#0xa]
;;;743    		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
000032  b929              CBNZ     r1,|L10.64|
000034  2300              MOVS     r3,#0
000036  eb020442          ADD      r4,r2,r2,LSL #1
00003a  4d03              LDR      r5,|L10.72|
00003c  f8453024          STR      r3,[r5,r4,LSL #2]
                  |L10.64|
;;;744    		res = FR_OK;
000040  2000              MOVS     r0,#0
000042  e000              B        |L10.70|
                  |L10.68|
;;;745    	} else {
;;;746    		res = FR_INT_ERR;			/* Invalid index nunber */
000044  2002              MOVS     r0,#2
                  |L10.70|
;;;747    	}
;;;748    	return res;
;;;749    }
000046  bd30              POP      {r4,r5,pc}
;;;750    
                          ENDP

                  |L10.72|
                          DCD      Files

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1271   static
;;;1272   FRESULT dir_alloc (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1273   	DIR* dp,	/* Pointer to the directory object */
;;;1274   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1275   )
;;;1276   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1277   	FRESULT res;
;;;1278   	UINT n;
;;;1279   
;;;1280   
;;;1281   	res = dir_sdi(dp, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1282   	if (res == FR_OK) {
000012  bb2d              CBNZ     r5,|L11.96|
;;;1283   		n = 0;
000014  2700              MOVS     r7,#0
;;;1284   		do {
000016  bf00              NOP      
                  |L11.24|
;;;1285   			res = move_window(dp->fs, dp->sect);
000018  f2410210          MOV      r2,#0x1010
00001c  5911              LDR      r1,[r2,r4]
00001e  f44f5280          MOV      r2,#0x1000
000022  5910              LDR      r0,[r2,r4]
000024  f7fffffe          BL       move_window
000028  4605              MOV      r5,r0
;;;1286   			if (res != FR_OK) break;
00002a  b105              CBZ      r5,|L11.46|
00002c  e017              B        |L11.94|
                  |L11.46|
;;;1287   			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
00002e  f2410014          MOV      r0,#0x1014
000032  5900              LDR      r0,[r0,r4]
000034  7800              LDRB     r0,[r0,#0]
000036  28e5              CMP      r0,#0xe5
000038  d004              BEQ      |L11.68|
00003a  f2410014          MOV      r0,#0x1014
00003e  5900              LDR      r0,[r0,r4]
000040  7800              LDRB     r0,[r0,#0]
000042  b920              CBNZ     r0,|L11.78|
                  |L11.68|
;;;1288   				if (++n == nent) break;	/* A block of contiguous free entries is found */
000044  1c78              ADDS     r0,r7,#1
000046  4607              MOV      r7,r0
000048  42b0              CMP      r0,r6
00004a  d101              BNE      |L11.80|
00004c  e007              B        |L11.94|
                  |L11.78|
;;;1289   			} else {
;;;1290   				n = 0;					/* Not a blank entry. Restart to search */
00004e  2700              MOVS     r7,#0
                  |L11.80|
;;;1291   			}
;;;1292   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000050  2101              MOVS     r1,#1
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_next
000058  4605              MOV      r5,r0
;;;1293   		} while (res == FR_OK);
00005a  2d00              CMP      r5,#0
00005c  d0dc              BEQ      |L11.24|
                  |L11.94|
00005e  bf00              NOP                            ;1286
                  |L11.96|
;;;1294   	}
;;;1295   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000060  2d04              CMP      r5,#4
000062  d100              BNE      |L11.102|
000064  2507              MOVS     r5,#7
                  |L11.102|
;;;1296   	return res;
000066  4628              MOV      r0,r5
;;;1297   }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;1298   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1527   static
;;;1528   FRESULT dir_find (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1529   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1530   )
;;;1531   {
000004  4604              MOV      r4,r0
;;;1532   	FRESULT res;
;;;1533   	BYTE c, *dir;
;;;1534   #if _USE_LFN
;;;1535   	BYTE a, ord, sum;
;;;1536   #endif
;;;1537   
;;;1538   	res = dir_sdi(dp, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4607              MOV      r7,r0
;;;1539   	if (res != FR_OK) return res;
000010  b117              CBZ      r7,|L12.24|
000012  4638              MOV      r0,r7
                  |L12.20|
;;;1540   
;;;1541   #if _USE_LFN
;;;1542   	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1543   #endif
;;;1544   	do {
;;;1545   		res = move_window(dp->fs, dp->sect);
;;;1546   		if (res != FR_OK) break;
;;;1547   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1548   		c = dir[DIR_Name];
;;;1549   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1550   #if _USE_LFN	/* LFN configuration */
;;;1551   		a = dir[DIR_Attr] & AM_MASK;
;;;1552   		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1553   			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1554   		} else {
;;;1555   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1556   				if (dp->lfn) {
;;;1557   					if (c & LLEF) {		/* Is it start of LFN sequence? */
;;;1558   						sum = dir[LDIR_Chksum];
;;;1559   						c &= ~LLEF; ord = c;	/* LFN start order */
;;;1560   						dp->lfn_idx = dp->index;	/* Start index of LFN */
;;;1561   					}
;;;1562   					/* Check validity of the LFN entry and compare it with given name */
;;;1563   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1564   				}
;;;1565   			} else {					/* An SFN entry is found */
;;;1566   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1567   				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1568   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1569   			}
;;;1570   		}
;;;1571   #else		/* Non LFN configuration */
;;;1572   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1573   			break;
;;;1574   #endif
;;;1575   		res = dir_next(dp, 0);		/* Next entry */
;;;1576   	} while (res == FR_OK);
;;;1577   
;;;1578   	return res;
;;;1579   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L12.24|
000018  f04f09ff          MOV      r9,#0xff              ;1542
00001c  46ca              MOV      r10,r9                ;1542
00001e  f64f71ff          MOV      r1,#0xffff            ;1542
000022  f2410024          MOV      r0,#0x1024            ;1542
000026  5301              STRH     r1,[r0,r4]            ;1542
000028  bf00              NOP                            ;1544
                  |L12.42|
00002a  f2410210          MOV      r2,#0x1010            ;1545
00002e  5911              LDR      r1,[r2,r4]            ;1545
000030  f44f5280          MOV      r2,#0x1000            ;1545
000034  5910              LDR      r0,[r2,r4]            ;1545
000036  f7fffffe          BL       move_window
00003a  4607              MOV      r7,r0                 ;1545
00003c  b107              CBZ      r7,|L12.64|
00003e  e068              B        |L12.274|
                  |L12.64|
000040  f2410014          MOV      r0,#0x1014            ;1547
000044  5905              LDR      r5,[r0,r4]            ;1547
000046  782e              LDRB     r6,[r5,#0]            ;1548
000048  b90e              CBNZ     r6,|L12.78|
00004a  2704              MOVS     r7,#4                 ;1549
00004c  e061              B        |L12.274|
                  |L12.78|
00004e  7ae8              LDRB     r0,[r5,#0xb]          ;1551
000050  f000083f          AND      r8,r0,#0x3f           ;1551
000054  2ee5              CMP      r6,#0xe5              ;1552
000056  d005              BEQ      |L12.100|
000058  f0080008          AND      r0,r8,#8              ;1552
00005c  b150              CBZ      r0,|L12.116|
00005e  f1b80f0f          CMP      r8,#0xf               ;1552
000062  d007              BEQ      |L12.116|
                  |L12.100|
000064  f04f09ff          MOV      r9,#0xff              ;1553
000068  f64f71ff          MOV      r1,#0xffff            ;1553
00006c  f2410024          MOV      r0,#0x1024            ;1553
000070  5301              STRH     r1,[r0,r4]            ;1553
000072  e047              B        |L12.260|
                  |L12.116|
000074  f1b80f0f          CMP      r8,#0xf               ;1555
000078  d124              BNE      |L12.196|
00007a  f44f5081          MOV      r0,#0x1020            ;1556
00007e  5900              LDR      r0,[r0,r4]            ;1556
000080  b1f8              CBZ      r0,|L12.194|
000082  f0060040          AND      r0,r6,#0x40           ;1557
000086  b150              CBZ      r0,|L12.158|
000088  f895a00d          LDRB     r10,[r5,#0xd]         ;1558
00008c  f0260640          BIC      r6,r6,#0x40           ;1559
000090  46b1              MOV      r9,r6                 ;1559
000092  f2410006          MOV      r0,#0x1006            ;1560
000096  5b01              LDRH     r1,[r0,r4]            ;1560
000098  f2410024          MOV      r0,#0x1024            ;1560
00009c  5301              STRH     r1,[r0,r4]            ;1560
                  |L12.158|
00009e  454e              CMP      r6,r9                 ;1563
0000a0  d10c              BNE      |L12.188|
0000a2  7b68              LDRB     r0,[r5,#0xd]          ;1563
0000a4  4550              CMP      r0,r10                ;1563
0000a6  d109              BNE      |L12.188|
0000a8  f44f5181          MOV      r1,#0x1020            ;1563
0000ac  5908              LDR      r0,[r1,r4]            ;1563
0000ae  4629              MOV      r1,r5                 ;1563
0000b0  f7fffffe          BL       cmp_lfn
0000b4  b110              CBZ      r0,|L12.188|
0000b6  f1a90001          SUB      r0,r9,#1              ;1563
0000ba  e000              B        |L12.190|
                  |L12.188|
0000bc  20ff              MOVS     r0,#0xff              ;1563
                  |L12.190|
0000be  f00009ff          AND      r9,r0,#0xff           ;1563
                  |L12.194|
0000c2  e01f              B        |L12.260|
                  |L12.196|
0000c4  f1b90f00          CMP      r9,#0                 ;1566
0000c8  d105              BNE      |L12.214|
0000ca  4628              MOV      r0,r5                 ;1566
0000cc  f7fffffe          BL       sum_sfn
0000d0  4550              CMP      r0,r10                ;1566
0000d2  d100              BNE      |L12.214|
0000d4  e01d              B        |L12.274|
                  |L12.214|
0000d6  f2410018          MOV      r0,#0x1018            ;1567
0000da  5900              LDR      r0,[r0,r4]            ;1567
0000dc  7ac0              LDRB     r0,[r0,#0xb]          ;1567
0000de  f0000001          AND      r0,r0,#1              ;1567
0000e2  b940              CBNZ     r0,|L12.246|
0000e4  f2410018          MOV      r0,#0x1018            ;1567
0000e8  5901              LDR      r1,[r0,r4]            ;1567
0000ea  220b              MOVS     r2,#0xb               ;1567
0000ec  4628              MOV      r0,r5                 ;1567
0000ee  f7fffffe          BL       mem_cmp
0000f2  b900              CBNZ     r0,|L12.246|
0000f4  e00d              B        |L12.274|
                  |L12.246|
0000f6  f04f09ff          MOV      r9,#0xff              ;1568
0000fa  f64f71ff          MOV      r1,#0xffff            ;1568
0000fe  f2410024          MOV      r0,#0x1024            ;1568
000102  5301              STRH     r1,[r0,r4]            ;1568
                  |L12.260|
000104  2100              MOVS     r1,#0                 ;1575
000106  4620              MOV      r0,r4                 ;1575
000108  f7fffffe          BL       dir_next
00010c  4607              MOV      r7,r0                 ;1575
00010e  2f00              CMP      r7,#0                 ;1576
000110  d08b              BEQ      |L12.42|
                  |L12.274|
000112  bf00              NOP                            ;1546
000114  4638              MOV      r0,r7                 ;1578
000116  e77d              B        |L12.20|
;;;1580   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1200   static
;;;1201   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1202   	DIR* dp,		/* Pointer to the directory object */
;;;1203   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1204   )
;;;1205   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1206   	DWORD clst;
;;;1207   	UINT i;
;;;1208   #if !_FS_READONLY
;;;1209   	UINT c;
;;;1210   #endif
;;;1211   
;;;1212   
;;;1213   	i = dp->index + 1;
000008  f2410006          MOV      r0,#0x1006
00000c  5b00              LDRH     r0,[r0,r4]
00000e  1c46              ADDS     r6,r0,#1
;;;1214   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
000010  b2b0              UXTH     r0,r6
000012  b118              CBZ      r0,|L13.28|
000014  f2410010          MOV      r0,#0x1010
000018  5900              LDR      r0,[r0,r4]
00001a  b910              CBNZ     r0,|L13.34|
                  |L13.28|
;;;1215   		return FR_NO_FILE;
00001c  2004              MOVS     r0,#4
                  |L13.30|
;;;1216   
;;;1217   	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
;;;1218   		dp->sect++;					/* Next sector */
;;;1219   
;;;1220   		if (!dp->clust) {		/* Static table */
;;;1221   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1222   				return FR_NO_FILE;
;;;1223   		}
;;;1224   		else {					/* Dynamic table */
;;;1225   			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1226   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1227   				if (clst <= 1) return FR_INT_ERR;
;;;1228   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1229   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1230   #if !_FS_READONLY
;;;1231   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1232   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1233   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1234   					if (clst == 1) return FR_INT_ERR;
;;;1235   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1236   					/* Clean-up stretched table */
;;;1237   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1238   					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
;;;1239   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1240   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1241   						dp->fs->wflag = 1;
;;;1242   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1243   						dp->fs->winsect++;
;;;1244   					}
;;;1245   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1246   #else
;;;1247   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1248   					return FR_NO_FILE;							/* Report EOT */
;;;1249   #endif
;;;1250   				}
;;;1251   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1252   				dp->sect = clust2sect(dp->fs, clst);
;;;1253   			}
;;;1254   		}
;;;1255   	}
;;;1256   
;;;1257   	dp->index = (WORD)i;	/* Current index */
;;;1258   	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
;;;1259   
;;;1260   	return FR_OK;
;;;1261   }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L13.34|
000022  f006007f          AND      r0,r6,#0x7f           ;1217
000026  2800              CMP      r0,#0                 ;1217
                  |L13.40|
000028  d17a              BNE      |L13.288|
00002a  f2410010          MOV      r0,#0x1010            ;1218
00002e  5900              LDR      r0,[r0,r4]            ;1218
000030  1c40              ADDS     r0,r0,#1              ;1218
000032  f2410110          MOV      r1,#0x1010            ;1218
000036  5108              STR      r0,[r1,r4]            ;1218
000038  1f08              SUBS     r0,r1,#4              ;1220
00003a  5900              LDR      r0,[r0,r4]            ;1220
00003c  b948              CBNZ     r0,|L13.82|
00003e  f44f5080          MOV      r0,#0x1000            ;1221
000042  5900              LDR      r0,[r0,r4]            ;1221
000044  f5005080          ADD      r0,r0,#0x1000         ;1221
000048  8900              LDRH     r0,[r0,#8]            ;1221
00004a  42b0              CMP      r0,r6                 ;1221
00004c  d868              BHI      |L13.288|
00004e  2004              MOVS     r0,#4                 ;1222
000050  e7e5              B        |L13.30|
                  |L13.82|
000052  f44f5080          MOV      r0,#0x1000            ;1225
000056  5900              LDR      r0,[r0,r4]            ;1225
000058  f5005080          ADD      r0,r0,#0x1000         ;1225
00005c  7880              LDRB     r0,[r0,#2]            ;1225
00005e  1e40              SUBS     r0,r0,#1              ;1225
000060  ea0010d6          AND      r0,r0,r6,LSR #7       ;1225
000064  2800              CMP      r0,#0                 ;1225
000066  d1df              BNE      |L13.40|
000068  f241020c          MOV      r2,#0x100c            ;1226
00006c  5911              LDR      r1,[r2,r4]            ;1226
00006e  f44f5280          MOV      r2,#0x1000            ;1226
000072  5910              LDR      r0,[r2,r4]            ;1226
000074  f7fffffe          BL       get_fat
000078  4605              MOV      r5,r0                 ;1226
00007a  2d01              CMP      r5,#1                 ;1227
00007c  d801              BHI      |L13.130|
00007e  2002              MOVS     r0,#2                 ;1227
000080  e7cd              B        |L13.30|
                  |L13.130|
000082  1c68              ADDS     r0,r5,#1              ;1228
000084  b908              CBNZ     r0,|L13.138|
000086  2001              MOVS     r0,#1                 ;1228
000088  e7c9              B        |L13.30|
                  |L13.138|
00008a  f44f5080          MOV      r0,#0x1000            ;1229
00008e  5900              LDR      r0,[r0,r4]            ;1229
000090  f5005080          ADD      r0,r0,#0x1000         ;1229
000094  6980              LDR      r0,[r0,#0x18]         ;1229
000096  42a8              CMP      r0,r5                 ;1229
000098  d866              BHI      |L13.360|
00009a  f1b80f00          CMP      r8,#0                 ;1231
00009e  d101              BNE      |L13.164|
0000a0  2004              MOVS     r0,#4                 ;1231
0000a2  e7bc              B        |L13.30|
                  |L13.164|
0000a4  f241020c          MOV      r2,#0x100c            ;1232
0000a8  5911              LDR      r1,[r2,r4]            ;1232
0000aa  f44f5280          MOV      r2,#0x1000            ;1232
0000ae  5910              LDR      r0,[r2,r4]            ;1232
0000b0  f7fffffe          BL       create_chain
0000b4  4605              MOV      r5,r0                 ;1232
0000b6  b90d              CBNZ     r5,|L13.188|
0000b8  2007              MOVS     r0,#7                 ;1233
0000ba  e7b0              B        |L13.30|
                  |L13.188|
0000bc  2d01              CMP      r5,#1                 ;1234
0000be  d101              BNE      |L13.196|
0000c0  2002              MOVS     r0,#2                 ;1234
0000c2  e7ac              B        |L13.30|
                  |L13.196|
0000c4  1c68              ADDS     r0,r5,#1              ;1235
0000c6  b908              CBNZ     r0,|L13.204|
0000c8  2001              MOVS     r0,#1                 ;1235
0000ca  e7a8              B        |L13.30|
                  |L13.204|
0000cc  f44f5180          MOV      r1,#0x1000            ;1237
0000d0  5908              LDR      r0,[r1,r4]            ;1237
0000d2  f7fffffe          BL       sync_window
0000d6  b108              CBZ      r0,|L13.220|
0000d8  2001              MOVS     r0,#1                 ;1237
0000da  e7a0              B        |L13.30|
                  |L13.220|
0000dc  f44f5180          MOV      r1,#0x1000            ;1238
0000e0  5908              LDR      r0,[r1,r4]            ;1238
0000e2  460a              MOV      r2,r1                 ;1238
0000e4  2100              MOVS     r1,#0                 ;1238
0000e6  f7fffffe          BL       mem_set
0000ea  f44f5180          MOV      r1,#0x1000            ;1239
0000ee  5908              LDR      r0,[r1,r4]            ;1239
0000f0  4629              MOV      r1,r5                 ;1239
0000f2  f7fffffe          BL       clust2sect
0000f6  f44f5180          MOV      r1,#0x1000            ;1239
0000fa  5909              LDR      r1,[r1,r4]            ;1239
0000fc  f5015180          ADD      r1,r1,#0x1000         ;1239
000100  6308              STR      r0,[r1,#0x30]         ;1239
000102  2700              MOVS     r7,#0                 ;1240
000104  e01b              B        |L13.318|
                  |L13.262|
000106  2101              MOVS     r1,#1                 ;1241
000108  0308              LSLS     r0,r1,#12             ;1241
00010a  5900              LDR      r0,[r0,r4]            ;1241
00010c  f5005080          ADD      r0,r0,#0x1000         ;1241
000110  7101              STRB     r1,[r0,#4]            ;1241
000112  0309              LSLS     r1,r1,#12             ;1242
000114  5908              LDR      r0,[r1,r4]            ;1242
000116  f7fffffe          BL       sync_window
00011a  b110              CBZ      r0,|L13.290|
00011c  2001              MOVS     r0,#1                 ;1242
00011e  e77e              B        |L13.30|
                  |L13.288|
000120  e02e              B        |L13.384|
                  |L13.290|
000122  f44f5080          MOV      r0,#0x1000            ;1243
000126  5900              LDR      r0,[r0,r4]            ;1243
000128  f5005080          ADD      r0,r0,#0x1000         ;1243
00012c  6b00              LDR      r0,[r0,#0x30]         ;1243
00012e  1c40              ADDS     r0,r0,#1              ;1243
000130  f44f5180          MOV      r1,#0x1000            ;1243
000134  5909              LDR      r1,[r1,r4]            ;1243
000136  f5015180          ADD      r1,r1,#0x1000         ;1243
00013a  6308              STR      r0,[r1,#0x30]         ;1243
00013c  1c7f              ADDS     r7,r7,#1              ;1240
                  |L13.318|
00013e  f44f5080          MOV      r0,#0x1000            ;1240
000142  5900              LDR      r0,[r0,r4]            ;1240
000144  f5005080          ADD      r0,r0,#0x1000         ;1240
000148  7880              LDRB     r0,[r0,#2]            ;1240
00014a  42b8              CMP      r0,r7                 ;1240
00014c  d8db              BHI      |L13.262|
00014e  f44f5080          MOV      r0,#0x1000            ;1245
000152  5900              LDR      r0,[r0,r4]            ;1245
000154  f5005080          ADD      r0,r0,#0x1000         ;1245
000158  6b00              LDR      r0,[r0,#0x30]         ;1245
00015a  1bc1              SUBS     r1,r0,r7              ;1245
00015c  f44f5080          MOV      r0,#0x1000            ;1245
000160  5900              LDR      r0,[r0,r4]            ;1245
000162  f5005080          ADD      r0,r0,#0x1000         ;1245
000166  6301              STR      r1,[r0,#0x30]         ;1245
                  |L13.360|
000168  f241000c          MOV      r0,#0x100c            ;1251
00016c  5105              STR      r5,[r0,r4]            ;1251
00016e  f44f5180          MOV      r1,#0x1000            ;1252
000172  5908              LDR      r0,[r1,r4]            ;1252
000174  4629              MOV      r1,r5                 ;1252
000176  f7fffffe          BL       clust2sect
00017a  f2410110          MOV      r1,#0x1010            ;1252
00017e  5108              STR      r0,[r1,r4]            ;1252
                  |L13.384|
000180  f2410006          MOV      r0,#0x1006            ;1257
000184  5306              STRH     r6,[r0,r4]            ;1257
000186  1f80              SUBS     r0,r0,#6              ;1258
000188  5901              LDR      r1,[r0,r4]            ;1258
00018a  f006007f          AND      r0,r6,#0x7f           ;1258
00018e  eb011140          ADD      r1,r1,r0,LSL #5       ;1258
000192  f2410014          MOV      r0,#0x1014            ;1258
000196  5101              STR      r1,[r0,r4]            ;1258
000198  2000              MOVS     r0,#0                 ;1260
00019a  e740              B        |L13.30|
;;;1262   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1588   static
;;;1589   FRESULT dir_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1590   	DIR* dp,		/* Pointer to the directory object */
;;;1591   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1592   )
;;;1593   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;1594   	FRESULT res;
;;;1595   	BYTE a, c, *dir;
;;;1596   #if _USE_LFN
;;;1597   	BYTE ord = 0xFF, sum = 0xFF;
000008  f04f09ff          MOV      r9,#0xff
00000c  46cb              MOV      r11,r9
;;;1598   #endif
;;;1599   
;;;1600   	res = FR_NO_FILE;
00000e  2704              MOVS     r7,#4
;;;1601   	while (dp->sect) {
000010  e05c              B        |L14.204|
                  |L14.18|
;;;1602   		res = move_window(dp->fs, dp->sect);
000012  f2410210          MOV      r2,#0x1010
000016  5911              LDR      r1,[r2,r4]
000018  f44f5280          MOV      r2,#0x1000
00001c  5910              LDR      r0,[r2,r4]
00001e  f7fffffe          BL       move_window
000022  4607              MOV      r7,r0
;;;1603   		if (res != FR_OK) break;
000024  b107              CBZ      r7,|L14.40|
000026  e056              B        |L14.214|
                  |L14.40|
;;;1604   		dir = dp->dir;					/* Ptr to the directory entry of current index */
000028  f2410014          MOV      r0,#0x1014
00002c  5905              LDR      r5,[r0,r4]
;;;1605   		c = dir[DIR_Name];
00002e  782e              LDRB     r6,[r5,#0]
;;;1606   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000030  b90e              CBNZ     r6,|L14.54|
000032  2704              MOVS     r7,#4
000034  e04f              B        |L14.214|
                  |L14.54|
;;;1607   		a = dir[DIR_Attr] & AM_MASK;
000036  7ae8              LDRB     r0,[r5,#0xb]
000038  f000083f          AND      r8,r0,#0x3f
;;;1608   #if _USE_LFN	/* LFN configuration */
;;;1609   		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
00003c  2ee5              CMP      r6,#0xe5
00003e  d009              BEQ      |L14.84|
000040  bf00              NOP      
000042  f0280020          BIC      r0,r8,#0x20
000046  2808              CMP      r0,#8
000048  d101              BNE      |L14.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L14.80|
                  |L14.78|
00004e  2000              MOVS     r0,#0
                  |L14.80|
000050  4550              CMP      r0,r10
000052  d002              BEQ      |L14.90|
                  |L14.84|
;;;1610   			ord = 0xFF;
000054  f04f09ff          MOV      r9,#0xff
000058  e031              B        |L14.190|
                  |L14.90|
;;;1611   		} else {
;;;1612   			if (a == AM_LFN) {			/* An LFN entry is found */
00005a  f1b80f0f          CMP      r8,#0xf
00005e  d120              BNE      |L14.162|
;;;1613   				if (c & LLEF) {			/* Is it start of LFN sequence? */
000060  f0060040          AND      r0,r6,#0x40
000064  b150              CBZ      r0,|L14.124|
;;;1614   					sum = dir[LDIR_Chksum];
000066  f895b00d          LDRB     r11,[r5,#0xd]
;;;1615   					c &= ~LLEF; ord = c;
00006a  f0260640          BIC      r6,r6,#0x40
00006e  46b1              MOV      r9,r6
;;;1616   					dp->lfn_idx = dp->index;
000070  f2410006          MOV      r0,#0x1006
000074  5b01              LDRH     r1,[r0,r4]
000076  f2410024          MOV      r0,#0x1024
00007a  5301              STRH     r1,[r0,r4]
                  |L14.124|
;;;1617   				}
;;;1618   				/* Check LFN validity and capture it */
;;;1619   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
00007c  454e              CMP      r6,r9
00007e  d10c              BNE      |L14.154|
000080  7b68              LDRB     r0,[r5,#0xd]
000082  4558              CMP      r0,r11
000084  d109              BNE      |L14.154|
000086  f44f5181          MOV      r1,#0x1020
00008a  5908              LDR      r0,[r1,r4]
00008c  4629              MOV      r1,r5
00008e  f7fffffe          BL       pick_lfn
000092  b110              CBZ      r0,|L14.154|
000094  f1a90001          SUB      r0,r9,#1
000098  e000              B        |L14.156|
                  |L14.154|
00009a  20ff              MOVS     r0,#0xff
                  |L14.156|
00009c  f00009ff          AND      r9,r0,#0xff
0000a0  e00d              B        |L14.190|
                  |L14.162|
;;;1620   			} else {					/* An SFN entry is found */
;;;1621   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
0000a2  f1b90f00          CMP      r9,#0
0000a6  d104              BNE      |L14.178|
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       sum_sfn
0000ae  4558              CMP      r0,r11
0000b0  d004              BEQ      |L14.188|
                  |L14.178|
;;;1622   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
0000b2  f64f71ff          MOV      r1,#0xffff
0000b6  f2410024          MOV      r0,#0x1024
0000ba  5301              STRH     r1,[r0,r4]
                  |L14.188|
;;;1623   				break;
0000bc  e00b              B        |L14.214|
                  |L14.190|
;;;1624   			}
;;;1625   		}
;;;1626   #else		/* Non LFN configuration */
;;;1627   		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1628   			break;
;;;1629   #endif
;;;1630   		res = dir_next(dp, 0);				/* Next entry */
0000be  2100              MOVS     r1,#0
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       dir_next
0000c6  4607              MOV      r7,r0
;;;1631   		if (res != FR_OK) break;
0000c8  b107              CBZ      r7,|L14.204|
0000ca  e004              B        |L14.214|
                  |L14.204|
0000cc  f2410010          MOV      r0,#0x1010            ;1601
0000d0  5900              LDR      r0,[r0,r4]            ;1601
0000d2  2800              CMP      r0,#0                 ;1601
0000d4  d19d              BNE      |L14.18|
                  |L14.214|
0000d6  bf00              NOP                            ;1603
;;;1632   	}
;;;1633   
;;;1634   	if (res != FR_OK) dp->sect = 0;
0000d8  b11f              CBZ      r7,|L14.226|
0000da  2100              MOVS     r1,#0
0000dc  f2410010          MOV      r0,#0x1010
0000e0  5101              STR      r1,[r0,r4]
                  |L14.226|
;;;1635   
;;;1636   	return res;
0000e2  4638              MOV      r0,r7
;;;1637   }
0000e4  e8bd9ff0          POP      {r4-r12,pc}
;;;1638   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1647   static
;;;1648   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1649   	DIR* dp				/* Target directory with object name to be created */
;;;1650   )
;;;1651   {
000004  4604              MOV      r4,r0
;;;1652   	FRESULT res;
;;;1653   #if _USE_LFN	/* LFN configuration */
;;;1654   	UINT n, nent;
;;;1655   	BYTE sn[12], *fn, sum;
;;;1656   	WCHAR *lfn;
;;;1657   
;;;1658   
;;;1659   	fn = dp->fn; lfn = dp->lfn;
000006  f2410018          MOV      r0,#0x1018
00000a  f8508004          LDR      r8,[r0,r4]
00000e  f44f5081          MOV      r0,#0x1020
000012  f8509004          LDR      r9,[r0,r4]
;;;1660   	mem_cpy(sn, fn, 12);
000016  220c              MOVS     r2,#0xc
000018  4641              MOV      r1,r8
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       mem_cpy
;;;1661   
;;;1662   	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
000020  f89d000b          LDRB     r0,[sp,#0xb]
000024  f0000020          AND      r0,r0,#0x20
000028  b110              CBZ      r0,|L15.48|
;;;1663   		return FR_INVALID_NAME;
00002a  2006              MOVS     r0,#6
                  |L15.44|
;;;1664   
;;;1665   	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1666   		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
;;;1667   		for (n = 1; n < 100; n++) {
;;;1668   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1669   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
;;;1670   			if (res != FR_OK) break;
;;;1671   		}
;;;1672   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1673   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1674   		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
;;;1675   	}
;;;1676   
;;;1677   	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1678   		for (n = 0; lfn[n]; n++) ;
;;;1679   		nent = (n + 25) / 13;
;;;1680   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1681   		nent = 1;
;;;1682   	}
;;;1683   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1684   
;;;1685   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1686   		res = dir_sdi(dp, dp->index - nent);
;;;1687   		if (res == FR_OK) {
;;;1688   			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
;;;1689   			do {					/* Store LFN entries in bottom first */
;;;1690   				res = move_window(dp->fs, dp->sect);
;;;1691   				if (res != FR_OK) break;
;;;1692   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1693   				dp->fs->wflag = 1;
;;;1694   				res = dir_next(dp, 0);	/* Next entry */
;;;1695   			} while (res == FR_OK && --nent);
;;;1696   		}
;;;1697   	}
;;;1698   #else	/* Non LFN configuration */
;;;1699   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
;;;1700   #endif
;;;1701   
;;;1702   	if (res == FR_OK) {				/* Set SFN entry */
;;;1703   		res = move_window(dp->fs, dp->sect);
;;;1704   		if (res == FR_OK) {
;;;1705   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
;;;1706   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
;;;1707   #if _USE_LFN
;;;1708   			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1709   #endif
;;;1710   			dp->fs->wflag = 1;
;;;1711   		}
;;;1712   	}
;;;1713   
;;;1714   	return res;
;;;1715   }
00002c  e8bd8ffe          POP      {r1-r11,pc}
                  |L15.48|
000030  f89d000b          LDRB     r0,[sp,#0xb]          ;1665
000034  f0000001          AND      r0,r0,#1              ;1665
000038  b340              CBZ      r0,|L15.140|
00003a  2000              MOVS     r0,#0                 ;1666
00003c  f888000b          STRB     r0,[r8,#0xb]          ;1666
000040  2100              MOVS     r1,#0                 ;1666
000042  f44f5081          MOV      r0,#0x1020            ;1666
000046  5101              STR      r1,[r0,r4]            ;1666
000048  2601              MOVS     r6,#1                 ;1667
00004a  e00c              B        |L15.102|
                  |L15.76|
00004c  4633              MOV      r3,r6                 ;1668
00004e  464a              MOV      r2,r9                 ;1668
000050  4669              MOV      r1,sp                 ;1668
000052  4640              MOV      r0,r8                 ;1668
000054  f7fffffe          BL       gen_numname
000058  4620              MOV      r0,r4                 ;1669
00005a  f7fffffe          BL       dir_find
00005e  4605              MOV      r5,r0                 ;1669
000060  b105              CBZ      r5,|L15.100|
000062  e002              B        |L15.106|
                  |L15.100|
000064  1c76              ADDS     r6,r6,#1              ;1667
                  |L15.102|
000066  2e64              CMP      r6,#0x64              ;1667
000068  d3f0              BCC      |L15.76|
                  |L15.106|
00006a  bf00              NOP                            ;1670
00006c  2e64              CMP      r6,#0x64              ;1672
00006e  d101              BNE      |L15.116|
000070  2007              MOVS     r0,#7                 ;1672
000072  e7db              B        |L15.44|
                  |L15.116|
000074  2d04              CMP      r5,#4                 ;1673
000076  d001              BEQ      |L15.124|
000078  4628              MOV      r0,r5                 ;1673
00007a  e7d7              B        |L15.44|
                  |L15.124|
00007c  f89d000b          LDRB     r0,[sp,#0xb]          ;1674
000080  f888000b          STRB     r0,[r8,#0xb]          ;1674
000084  f44f5081          MOV      r0,#0x1020            ;1674
000088  f8409004          STR      r9,[r0,r4]            ;1674
                  |L15.140|
00008c  f89d000b          LDRB     r0,[sp,#0xb]          ;1677
000090  f0000002          AND      r0,r0,#2              ;1677
000094  b160              CBZ      r0,|L15.176|
000096  2600              MOVS     r6,#0                 ;1678
000098  e000              B        |L15.156|
                  |L15.154|
00009a  1c76              ADDS     r6,r6,#1              ;1678
                  |L15.156|
00009c  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1678
0000a0  2800              CMP      r0,#0                 ;1678
0000a2  d1fa              BNE      |L15.154|
0000a4  f1060019          ADD      r0,r6,#0x19           ;1679
0000a8  210d              MOVS     r1,#0xd               ;1679
0000aa  fbb0f7f1          UDIV     r7,r0,r1              ;1679
0000ae  e000              B        |L15.178|
                  |L15.176|
0000b0  2701              MOVS     r7,#1                 ;1681
                  |L15.178|
0000b2  4639              MOV      r1,r7                 ;1683
0000b4  4620              MOV      r0,r4                 ;1683
0000b6  f7fffffe          BL       dir_alloc
0000ba  4605              MOV      r5,r0                 ;1683
0000bc  bbbd              CBNZ     r5,|L15.302|
0000be  1e78              SUBS     r0,r7,#1              ;1685
0000c0  1e07              SUBS     r7,r0,#0              ;1685
0000c2  d034              BEQ      |L15.302|
0000c4  f2410006          MOV      r0,#0x1006            ;1686
0000c8  5b00              LDRH     r0,[r0,r4]            ;1686
0000ca  1bc1              SUBS     r1,r0,r7              ;1686
0000cc  4620              MOV      r0,r4                 ;1686
0000ce  f7fffffe          BL       dir_sdi
0000d2  4605              MOV      r5,r0                 ;1686
0000d4  bb5d              CBNZ     r5,|L15.302|
0000d6  f2410118          MOV      r1,#0x1018            ;1688
0000da  5908              LDR      r0,[r1,r4]            ;1688
0000dc  f7fffffe          BL       sum_sfn
0000e0  4682              MOV      r10,r0                ;1688
0000e2  bf00              NOP                            ;1689
                  |L15.228|
0000e4  f2410210          MOV      r2,#0x1010            ;1690
0000e8  5911              LDR      r1,[r2,r4]            ;1690
0000ea  f44f5280          MOV      r2,#0x1000            ;1690
0000ee  5910              LDR      r0,[r2,r4]            ;1690
0000f0  f7fffffe          BL       move_window
0000f4  4605              MOV      r5,r0                 ;1690
0000f6  b105              CBZ      r5,|L15.250|
0000f8  e018              B        |L15.300|
                  |L15.250|
0000fa  b2fa              UXTB     r2,r7                 ;1692
0000fc  f2410314          MOV      r3,#0x1014            ;1692
000100  5919              LDR      r1,[r3,r4]            ;1692
000102  f44f5381          MOV      r3,#0x1020            ;1692
000106  5918              LDR      r0,[r3,r4]            ;1692
000108  4653              MOV      r3,r10                ;1692
00010a  f7fffffe          BL       fit_lfn
00010e  2101              MOVS     r1,#1                 ;1693
000110  0308              LSLS     r0,r1,#12             ;1693
000112  5900              LDR      r0,[r0,r4]            ;1693
000114  f5005080          ADD      r0,r0,#0x1000         ;1693
000118  7101              STRB     r1,[r0,#4]            ;1693
00011a  2100              MOVS     r1,#0                 ;1694
00011c  4620              MOV      r0,r4                 ;1694
00011e  f7fffffe          BL       dir_next
000122  4605              MOV      r5,r0                 ;1694
000124  b915              CBNZ     r5,|L15.300|
000126  1e78              SUBS     r0,r7,#1              ;1695
000128  1e07              SUBS     r7,r0,#0              ;1695
00012a  d1db              BNE      |L15.228|
                  |L15.300|
00012c  bf00              NOP                            ;1691
                  |L15.302|
00012e  bb45              CBNZ     r5,|L15.386|
000130  f2410210          MOV      r2,#0x1010            ;1703
000134  5911              LDR      r1,[r2,r4]            ;1703
000136  f44f5280          MOV      r2,#0x1000            ;1703
00013a  5910              LDR      r0,[r2,r4]            ;1703
00013c  f7fffffe          BL       move_window
000140  4605              MOV      r5,r0                 ;1703
000142  b9f5              CBNZ     r5,|L15.386|
000144  f2410114          MOV      r1,#0x1014            ;1705
000148  5908              LDR      r0,[r1,r4]            ;1705
00014a  2220              MOVS     r2,#0x20              ;1705
00014c  2100              MOVS     r1,#0                 ;1705
00014e  f7fffffe          BL       mem_set
000152  f2410218          MOV      r2,#0x1018            ;1706
000156  5911              LDR      r1,[r2,r4]            ;1706
000158  1f12              SUBS     r2,r2,#4              ;1706
00015a  5910              LDR      r0,[r2,r4]            ;1706
00015c  220b              MOVS     r2,#0xb               ;1706
00015e  f7fffffe          BL       mem_cpy
000162  f2410018          MOV      r0,#0x1018            ;1708
000166  5900              LDR      r0,[r0,r4]            ;1708
000168  7ac0              LDRB     r0,[r0,#0xb]          ;1708
00016a  f0000118          AND      r1,r0,#0x18           ;1708
00016e  f2410014          MOV      r0,#0x1014            ;1708
000172  5900              LDR      r0,[r0,r4]            ;1708
000174  7301              STRB     r1,[r0,#0xc]          ;1708
000176  2101              MOVS     r1,#1                 ;1710
000178  0308              LSLS     r0,r1,#12             ;1710
00017a  5900              LDR      r0,[r0,r4]            ;1710
00017c  f5005080          ADD      r0,r0,#0x1000         ;1710
000180  7101              STRB     r1,[r0,#4]            ;1710
                  |L15.386|
000182  4628              MOV      r0,r5                 ;1714
000184  e752              B        |L15.44|
;;;1716   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1725   static
;;;1726   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1727   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1728   )
;;;1729   {
000002  4604              MOV      r4,r0
;;;1730   	FRESULT res;
;;;1731   #if _USE_LFN	/* LFN configuration */
;;;1732   	UINT i;
;;;1733   
;;;1734   	i = dp->index;	/* SFN index */
000004  f2410006          MOV      r0,#0x1006
000008  5b06              LDRH     r6,[r0,r4]
;;;1735   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
00000a  f2410024          MOV      r0,#0x1024
00000e  5b00              LDRH     r0,[r0,r4]
000010  f64f72ff          MOV      r2,#0xffff
000014  4290              CMP      r0,r2
000016  d101              BNE      |L16.28|
000018  4630              MOV      r0,r6
00001a  e002              B        |L16.34|
                  |L16.28|
00001c  f2410024          MOV      r0,#0x1024
000020  5b00              LDRH     r0,[r0,r4]
                  |L16.34|
000022  4601              MOV      r1,r0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dir_sdi
00002a  4605              MOV      r5,r0
;;;1736   	if (res == FR_OK) {
00002c  bb75              CBNZ     r5,|L16.140|
;;;1737   		do {
00002e  bf00              NOP      
                  |L16.48|
;;;1738   			res = move_window(dp->fs, dp->sect);
000030  f2410210          MOV      r2,#0x1010
000034  5911              LDR      r1,[r2,r4]
000036  f44f5280          MOV      r2,#0x1000
00003a  5910              LDR      r0,[r2,r4]
00003c  f7fffffe          BL       move_window
000040  4605              MOV      r5,r0
;;;1739   			if (res != FR_OK) break;
000042  b105              CBZ      r5,|L16.70|
000044  e01e              B        |L16.132|
                  |L16.70|
;;;1740   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
000046  f2410114          MOV      r1,#0x1014
00004a  5908              LDR      r0,[r1,r4]
00004c  2220              MOVS     r2,#0x20
00004e  2100              MOVS     r1,#0
000050  f7fffffe          BL       mem_set
;;;1741   			*dp->dir = DDEM;
000054  21e5              MOVS     r1,#0xe5
000056  f2410014          MOV      r0,#0x1014
00005a  5900              LDR      r0,[r0,r4]
00005c  7001              STRB     r1,[r0,#0]
;;;1742   			dp->fs->wflag = 1;
00005e  2101              MOVS     r1,#1
000060  0308              LSLS     r0,r1,#12
000062  5900              LDR      r0,[r0,r4]
000064  f5005080          ADD      r0,r0,#0x1000
000068  7101              STRB     r1,[r0,#4]
;;;1743   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
00006a  f2410006          MOV      r0,#0x1006
00006e  5b00              LDRH     r0,[r0,r4]
000070  42b0              CMP      r0,r6
000072  d300              BCC      |L16.118|
000074  e006              B        |L16.132|
                  |L16.118|
;;;1744   			res = dir_next(dp, 0);		/* Next entry */
000076  2100              MOVS     r1,#0
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       dir_next
00007e  4605              MOV      r5,r0
;;;1745   		} while (res == FR_OK);
000080  2d00              CMP      r5,#0
000082  d0d5              BEQ      |L16.48|
                  |L16.132|
000084  bf00              NOP                            ;1739
;;;1746   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000086  2d04              CMP      r5,#4
000088  d100              BNE      |L16.140|
00008a  2502              MOVS     r5,#2
                  |L16.140|
;;;1747   	}
;;;1748   
;;;1749   #else			/* Non LFN configuration */
;;;1750   	res = dir_sdi(dp, dp->index);
;;;1751   	if (res == FR_OK) {
;;;1752   		res = move_window(dp->fs, dp->sect);
;;;1753   		if (res == FR_OK) {
;;;1754   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
;;;1755   			*dp->dir = DDEM;
;;;1756   			dp->fs->wflag = 1;
;;;1757   		}
;;;1758   	}
;;;1759   #endif
;;;1760   
;;;1761   	return res;
00008c  4628              MOV      r0,r5
;;;1762   }
00008e  bd70              POP      {r4-r6,pc}
;;;1763   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1152   static
;;;1153   FRESULT dir_sdi (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1154   	DIR* dp,		/* Pointer to directory object */
;;;1155   	UINT idx		/* Index of directory table */
;;;1156   )
;;;1157   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1158   	DWORD clst, sect;
;;;1159   	UINT ic;
;;;1160   
;;;1161   
;;;1162   	dp->index = (WORD)idx;	/* Current index */
000008  f2410006          MOV      r0,#0x1006
00000c  5306              STRH     r6,[r0,r4]
;;;1163   	clst = dp->sclust;		/* Table start cluster (0:root) */
00000e  1c80              ADDS     r0,r0,#2
000010  5905              LDR      r5,[r0,r4]
;;;1164   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
000012  2d01              CMP      r5,#1
000014  d007              BEQ      |L17.38|
000016  f44f5080          MOV      r0,#0x1000
00001a  5900              LDR      r0,[r0,r4]
00001c  f5005080          ADD      r0,r0,#0x1000
000020  6980              LDR      r0,[r0,#0x18]
000022  42a8              CMP      r0,r5
000024  d802              BHI      |L17.44|
                  |L17.38|
;;;1165   		return FR_INT_ERR;
000026  2002              MOVS     r0,#2
                  |L17.40|
;;;1166   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1167   		clst = dp->fs->dirbase;
;;;1168   
;;;1169   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1170   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1171   			return FR_INT_ERR;
;;;1172   		sect = dp->fs->dirbase;
;;;1173   	}
;;;1174   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1175   		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
;;;1176   		while (idx >= ic) {	/* Follow cluster chain */
;;;1177   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1178   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1179   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1180   				return FR_INT_ERR;
;;;1181   			idx -= ic;
;;;1182   		}
;;;1183   		sect = clust2sect(dp->fs, clst);
;;;1184   	}
;;;1185   	dp->clust = clst;	/* Current cluster# */
;;;1186   	if (!sect) return FR_INT_ERR;
;;;1187   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
;;;1188   	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
;;;1189   
;;;1190   	return FR_OK;
;;;1191   }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L17.44|
00002c  b96d              CBNZ     r5,|L17.74|
00002e  f44f5080          MOV      r0,#0x1000            ;1166
000032  5900              LDR      r0,[r0,r4]            ;1166
000034  f5005080          ADD      r0,r0,#0x1000         ;1166
000038  7800              LDRB     r0,[r0,#0]            ;1166
00003a  2803              CMP      r0,#3                 ;1166
00003c  d105              BNE      |L17.74|
00003e  f44f5080          MOV      r0,#0x1000            ;1167
000042  5900              LDR      r0,[r0,r4]            ;1167
000044  f5005080          ADD      r0,r0,#0x1000         ;1167
000048  6a85              LDR      r5,[r0,#0x28]         ;1167
                  |L17.74|
00004a  b985              CBNZ     r5,|L17.110|
00004c  f44f5080          MOV      r0,#0x1000            ;1170
000050  5900              LDR      r0,[r0,r4]            ;1170
000052  f5005080          ADD      r0,r0,#0x1000         ;1170
000056  8900              LDRH     r0,[r0,#8]            ;1170
000058  42b0              CMP      r0,r6                 ;1170
00005a  d801              BHI      |L17.96|
00005c  2002              MOVS     r0,#2                 ;1171
00005e  e7e3              B        |L17.40|
                  |L17.96|
000060  f44f5080          MOV      r0,#0x1000            ;1172
000064  5900              LDR      r0,[r0,r4]            ;1172
000066  f5005080          ADD      r0,r0,#0x1000         ;1172
00006a  6a87              LDR      r7,[r0,#0x28]         ;1172
00006c  e02a              B        |L17.196|
                  |L17.110|
00006e  f44f5080          MOV      r0,#0x1000            ;1175
000072  5900              LDR      r0,[r0,r4]            ;1175
000074  f5005080          ADD      r0,r0,#0x1000         ;1175
000078  7880              LDRB     r0,[r0,#2]            ;1175
00007a  ea4f18c0          LSL      r8,r0,#7              ;1175
00007e  e018              B        |L17.178|
                  |L17.128|
000080  f44f5180          MOV      r1,#0x1000            ;1177
000084  5908              LDR      r0,[r1,r4]            ;1177
000086  4629              MOV      r1,r5                 ;1177
000088  f7fffffe          BL       get_fat
00008c  4605              MOV      r5,r0                 ;1177
00008e  1c68              ADDS     r0,r5,#1              ;1178
000090  b908              CBNZ     r0,|L17.150|
000092  2001              MOVS     r0,#1                 ;1178
000094  e7c8              B        |L17.40|
                  |L17.150|
000096  2d02              CMP      r5,#2                 ;1179
000098  d307              BCC      |L17.170|
00009a  f44f5080          MOV      r0,#0x1000            ;1179
00009e  5900              LDR      r0,[r0,r4]            ;1179
0000a0  f5005080          ADD      r0,r0,#0x1000         ;1179
0000a4  6980              LDR      r0,[r0,#0x18]         ;1179
0000a6  42a8              CMP      r0,r5                 ;1179
0000a8  d801              BHI      |L17.174|
                  |L17.170|
0000aa  2002              MOVS     r0,#2                 ;1180
0000ac  e7bc              B        |L17.40|
                  |L17.174|
0000ae  eba60608          SUB      r6,r6,r8              ;1181
                  |L17.178|
0000b2  4546              CMP      r6,r8                 ;1176
0000b4  d2e4              BCS      |L17.128|
0000b6  f44f5180          MOV      r1,#0x1000            ;1183
0000ba  5908              LDR      r0,[r1,r4]            ;1183
0000bc  4629              MOV      r1,r5                 ;1183
0000be  f7fffffe          BL       clust2sect
0000c2  4607              MOV      r7,r0                 ;1183
                  |L17.196|
0000c4  f241000c          MOV      r0,#0x100c            ;1185
0000c8  5105              STR      r5,[r0,r4]            ;1185
0000ca  b90f              CBNZ     r7,|L17.208|
0000cc  2002              MOVS     r0,#2                 ;1186
0000ce  e7ab              B        |L17.40|
                  |L17.208|
0000d0  eb0711d6          ADD      r1,r7,r6,LSR #7       ;1187
0000d4  f2410010          MOV      r0,#0x1010            ;1187
0000d8  5101              STR      r1,[r0,r4]            ;1187
0000da  f44f5080          MOV      r0,#0x1000            ;1188
0000de  5901              LDR      r1,[r0,r4]            ;1188
0000e0  f006007f          AND      r0,r6,#0x7f           ;1188
0000e4  eb011140          ADD      r1,r1,r0,LSL #5       ;1188
0000e8  f2410014          MOV      r0,#0x1014            ;1188
0000ec  5101              STR      r1,[r0,r4]            ;1188
0000ee  2000              MOVS     r0,#0                 ;1190
0000f0  e79a              B        |L17.40|
;;;1192   
                          ENDP


                          AREA ||i.enq_lock||, CODE, READONLY, ALIGN=2

                  enq_lock PROC
;;;687    static
;;;688    int enq_lock (void)	/* Check if an entry is available for a new object */
000000  2100              MOVS     r1,#0
;;;689    {
;;;690    	UINT i;
;;;691    
;;;692    	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
000002  e000              B        |L18.6|
                  |L18.4|
000004  1c49              ADDS     r1,r1,#1
                  |L18.6|
000006  2902              CMP      r1,#2
000008  d206              BCS      |L18.24|
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4a05              LDR      r2,|L18.36|
000010  f8520020          LDR      r0,[r2,r0,LSL #2]
000014  2800              CMP      r0,#0
000016  d1f5              BNE      |L18.4|
                  |L18.24|
;;;693    	return (i == _FS_LOCK) ? 0 : 1;
000018  2902              CMP      r1,#2
00001a  d001              BEQ      |L18.32|
00001c  2001              MOVS     r0,#1
                  |L18.30|
;;;694    }
00001e  4770              BX       lr
                  |L18.32|
000020  2000              MOVS     r0,#0                 ;693
000022  e7fc              B        |L18.30|
;;;695    
                          ENDP

                  |L18.36|
                          DCD      Files

                          AREA ||i.f_chdir||, CODE, READONLY, ALIGN=1

                  f_chdir PROC
;;;2985   
;;;2986   FRESULT f_chdir (
000000  b531              PUSH     {r0,r4,r5,lr}
;;;2987   	const TCHAR* path	/* Pointer to the directory path */
;;;2988   )
;;;2989   {
000002  f5ad5d84          SUB      sp,sp,#0x1080
;;;2990   	FRESULT res;
;;;2991   	DIR dj;
;;;2992   	DEFINE_NAMEBUF;
;;;2993   
;;;2994   
;;;2995   	/* Get logical drive number */
;;;2996   	res = find_volume(&dj.fs, &path, 0);
000006  2200              MOVS     r2,#0
000008  f50d5184          ADD      r1,sp,#0x1080
00000c  f1a1002c          SUB      r0,r1,#0x2c
000010  f7fffffe          BL       find_volume
000014  4604              MOV      r4,r0
;;;2997   	if (res == FR_OK) {
000016  bb84              CBNZ     r4,|L19.122|
;;;2998   		INIT_BUF(dj);
000018  a912              ADD      r1,sp,#0x48
00001a  f50d5080          ADD      r0,sp,#0x1000
00001e  66c1              STR      r1,[r0,#0x6c]
000020  a905              ADD      r1,sp,#0x14
000022  6741              STR      r1,[r0,#0x74]
;;;2999   		res = follow_path(&dj, path);		/* Follow the path */
000024  f8d01080          LDR      r1,[r0,#0x80]
000028  a815              ADD      r0,sp,#0x54
00002a  f7fffffe          BL       follow_path
00002e  4604              MOV      r4,r0
;;;3000   		FREE_BUF();
;;;3001   		if (res == FR_OK) {					/* Follow completed */
000030  bb04              CBNZ     r4,|L19.116|
;;;3002   			if (!dj.dir) {
000032  f50d5080          ADD      r0,sp,#0x1000
000036  6e80              LDR      r0,[r0,#0x68]
000038  b938              CBNZ     r0,|L19.74|
;;;3003   				dj.fs->cdir = dj.sclust;	/* Start directory itself */
00003a  f50d5080          ADD      r0,sp,#0x1000
00003e  6dc1              LDR      r1,[r0,#0x5c]
000040  6d40              LDR      r0,[r0,#0x54]
000042  f5005080          ADD      r0,r0,#0x1000
000046  6141              STR      r1,[r0,#0x14]
000048  e014              B        |L19.116|
                  |L19.74|
;;;3004   			} else {
;;;3005   				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
00004a  f50d5080          ADD      r0,sp,#0x1000
00004e  6e80              LDR      r0,[r0,#0x68]
000050  7ac0              LDRB     r0,[r0,#0xb]
000052  f0000010          AND      r0,r0,#0x10
000056  b160              CBZ      r0,|L19.114|
;;;3006   					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
000058  f50d5280          ADD      r2,sp,#0x1000
00005c  6e91              LDR      r1,[r2,#0x68]
00005e  6d50              LDR      r0,[r2,#0x54]
000060  f7fffffe          BL       ld_clust
000064  f50d5180          ADD      r1,sp,#0x1000
000068  6d49              LDR      r1,[r1,#0x54]
00006a  f5015180          ADD      r1,r1,#0x1000
00006e  6148              STR      r0,[r1,#0x14]
000070  e000              B        |L19.116|
                  |L19.114|
;;;3007   				else
;;;3008   					res = FR_NO_PATH;		/* Reached but a file */
000072  2405              MOVS     r4,#5
                  |L19.116|
;;;3009   			}
;;;3010   		}
;;;3011   		if (res == FR_NO_FILE) res = FR_NO_PATH;
000074  2c04              CMP      r4,#4
000076  d100              BNE      |L19.122|
000078  2405              MOVS     r4,#5
                  |L19.122|
;;;3012   	}
;;;3013   
;;;3014   	LEAVE_FF(dj.fs, res);
00007a  4620              MOV      r0,r4
;;;3015   }
00007c  b021              ADD      sp,sp,#0x84
00007e  f50d5d80          ADD      sp,sp,#0x1000
000082  bd30              POP      {r4,r5,pc}
;;;3016   
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;3742   
;;;3743   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3744   	const TCHAR* path,	/* Pointer to the file path */
;;;3745   	BYTE attr,			/* Attribute bits */
;;;3746   	BYTE mask			/* Attribute mask to change */
;;;3747   )
;;;3748   {
000002  f5ad5d84          SUB      sp,sp,#0x1080
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;3749   	FRESULT res;
;;;3750   	DIR dj;
;;;3751   	BYTE *dir;
;;;3752   	DEFINE_NAMEBUF;
;;;3753   
;;;3754   
;;;3755   	/* Get logical drive number */
;;;3756   	res = find_volume(&dj.fs, &path, 1);
00000a  2201              MOVS     r2,#1
00000c  f50d5184          ADD      r1,sp,#0x1080
000010  f1a1002c          SUB      r0,r1,#0x2c
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0
;;;3757   	if (res == FR_OK) {
00001a  bb75              CBNZ     r5,|L20.122|
;;;3758   		INIT_BUF(dj);
00001c  a912              ADD      r1,sp,#0x48
00001e  f50d5080          ADD      r0,sp,#0x1000
000022  66c1              STR      r1,[r0,#0x6c]
000024  a905              ADD      r1,sp,#0x14
000026  6741              STR      r1,[r0,#0x74]
;;;3759   		res = follow_path(&dj, path);		/* Follow the file path */
000028  f8d01080          LDR      r1,[r0,#0x80]
00002c  a815              ADD      r0,sp,#0x54
00002e  f7fffffe          BL       follow_path
000032  4605              MOV      r5,r0
;;;3760   		FREE_BUF();
;;;3761   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000034  b93d              CBNZ     r5,|L20.70|
000036  f50d5080          ADD      r0,sp,#0x1000
00003a  6ec0              LDR      r0,[r0,#0x6c]
00003c  7ac0              LDRB     r0,[r0,#0xb]
00003e  f0000020          AND      r0,r0,#0x20
000042  b100              CBZ      r0,|L20.70|
;;;3762   			res = FR_INVALID_NAME;
000044  2506              MOVS     r5,#6
                  |L20.70|
;;;3763   		if (res == FR_OK) {
000046  b9c5              CBNZ     r5,|L20.122|
;;;3764   			dir = dj.dir;
000048  f50d5080          ADD      r0,sp,#0x1000
00004c  6e86              LDR      r6,[r0,#0x68]
;;;3765   			if (!dir) {						/* Is it a root directory? */
00004e  b90e              CBNZ     r6,|L20.84|
;;;3766   				res = FR_INVALID_NAME;
000050  2506              MOVS     r5,#6
000052  e012              B        |L20.122|
                  |L20.84|
;;;3767   			} else {						/* File or sub directory */
;;;3768   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000054  f0040427          AND      r4,r4,#0x27
;;;3769   				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
000058  ea070004          AND      r0,r7,r4
00005c  7af1              LDRB     r1,[r6,#0xb]
00005e  43a1              BICS     r1,r1,r4
000060  4308              ORRS     r0,r0,r1
000062  72f0              STRB     r0,[r6,#0xb]
;;;3770   				dj.fs->wflag = 1;
000064  2201              MOVS     r2,#1
000066  f50d5180          ADD      r1,sp,#0x1000
00006a  6d48              LDR      r0,[r1,#0x54]
00006c  f5005080          ADD      r0,r0,#0x1000
000070  7102              STRB     r2,[r0,#4]
;;;3771   				res = sync_fs(dj.fs);
000072  6d48              LDR      r0,[r1,#0x54]
000074  f7fffffe          BL       sync_fs
000078  4605              MOV      r5,r0
                  |L20.122|
;;;3772   			}
;;;3773   		}
;;;3774   	}
;;;3775   
;;;3776   	LEAVE_FF(dj.fs, res);
00007a  4628              MOV      r0,r5
;;;3777   }
00007c  b023              ADD      sp,sp,#0x8c
00007e  f50d5d80          ADD      sp,sp,#0x1000
000082  bdf0              POP      {r4-r7,pc}
;;;3778   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2929   
;;;2930   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2931   	FIL *fp		/* Pointer to the file object to be closed */
;;;2932   )
;;;2933   {
000002  4605              MOV      r5,r0
;;;2934   	FRESULT res;
;;;2935   
;;;2936   
;;;2937   #if !_FS_READONLY
;;;2938   	res = f_sync(fp);					/* Flush cached data */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_sync
00000a  4604              MOV      r4,r0
;;;2939   	if (res == FR_OK)
00000c  b97c              CBNZ     r4,|L21.46|
;;;2940   #endif
;;;2941   	{
;;;2942   		res = validate(fp);				/* Lock volume */
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       validate
000014  4604              MOV      r4,r0
;;;2943   		if (res == FR_OK) {
000016  b954              CBNZ     r4,|L21.46|
;;;2944   #if _FS_REENTRANT
;;;2945   			FATFS *fs = fp->fs;
;;;2946   #endif
;;;2947   #if _FS_LOCK
;;;2948   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
000018  f2410128          MOV      r1,#0x1028
00001c  5948              LDR      r0,[r1,r5]
00001e  f7fffffe          BL       dec_lock
000022  4604              MOV      r4,r0
;;;2949   			if (res == FR_OK)
000024  b91c              CBNZ     r4,|L21.46|
;;;2950   #endif
;;;2951   				fp->fs = 0;				/* Invalidate file object */
000026  2100              MOVS     r1,#0
000028  f44f5080          MOV      r0,#0x1000
00002c  5141              STR      r1,[r0,r5]
                  |L21.46|
;;;2952   #if _FS_REENTRANT
;;;2953   			unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;2954   #endif
;;;2955   		}
;;;2956   	}
;;;2957   	return res;
00002e  4620              MOV      r0,r4
;;;2958   }
000030  bd70              POP      {r4-r6,pc}
;;;2959   
                          ENDP


                          AREA ||i.f_closedir||, CODE, READONLY, ALIGN=1

                  f_closedir PROC
;;;3315   
;;;3316   FRESULT f_closedir (
000000  b570              PUSH     {r4-r6,lr}
;;;3317   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3318   )
;;;3319   {
000002  4604              MOV      r4,r0
;;;3320   	FRESULT res;
;;;3321   
;;;3322   
;;;3323   	res = validate(dp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3324   	if (res == FR_OK) {
00000c  b975              CBNZ     r5,|L22.44|
;;;3325   #if _FS_REENTRANT
;;;3326   		FATFS *fs = dp->fs;
;;;3327   #endif
;;;3328   #if _FS_LOCK
;;;3329   		if (dp->lockid)				/* Decrement sub-directory open counter */
00000e  f241001c          MOV      r0,#0x101c
000012  5900              LDR      r0,[r0,r4]
000014  b128              CBZ      r0,|L22.34|
;;;3330   			res = dec_lock(dp->lockid);
000016  f241011c          MOV      r1,#0x101c
00001a  5908              LDR      r0,[r1,r4]
00001c  f7fffffe          BL       dec_lock
000020  4605              MOV      r5,r0
                  |L22.34|
;;;3331   		if (res == FR_OK)
000022  b91d              CBNZ     r5,|L22.44|
;;;3332   #endif
;;;3333   			dp->fs = 0;				/* Invalidate directory object */
000024  2100              MOVS     r1,#0
000026  f44f5080          MOV      r0,#0x1000
00002a  5101              STR      r1,[r0,r4]
                  |L22.44|
;;;3334   #if _FS_REENTRANT
;;;3335   		unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;3336   #endif
;;;3337   	}
;;;3338   	return res;
00002c  4628              MOV      r0,r5
;;;3339   }
00002e  bd70              POP      {r4-r6,pc}
;;;3340   
                          ENDP


                          AREA ||i.f_findfirst||, CODE, READONLY, ALIGN=1

                  f_findfirst PROC
;;;3415   
;;;3416   FRESULT f_findfirst (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3417   	DIR* dp,				/* Pointer to the blank directory object */
;;;3418   	FILINFO* fno,			/* Pointer to the file information structure */
;;;3419   	const TCHAR* path,		/* Pointer to the directory to open */
;;;3420   	const TCHAR* pattern	/* Pointer to the matching pattern */
;;;3421   )
;;;3422   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;3423   	FRESULT res;
;;;3424   
;;;3425   
;;;3426   	dp->pat = pattern;		/* Save pointer to pattern string */
00000c  f2410028          MOV      r0,#0x1028
000010  5106              STR      r6,[r0,r4]
;;;3427   	res = f_opendir(dp, path);		/* Open the target directory */
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       f_opendir
00001a  4607              MOV      r7,r0
;;;3428   	if (res == FR_OK)
00001c  b927              CBNZ     r7,|L23.40|
;;;3429   		res = f_findnext(dp, fno);	/* Find the first item */
00001e  4641              MOV      r1,r8
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       f_findnext
000026  4607              MOV      r7,r0
                  |L23.40|
;;;3430   	return res;
000028  4638              MOV      r0,r7
;;;3431   }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;3432   
                          ENDP


                          AREA ||i.f_findnext||, CODE, READONLY, ALIGN=1

                  f_findnext PROC
;;;3389   
;;;3390   FRESULT f_findnext (
000000  b570              PUSH     {r4-r6,lr}
;;;3391   	DIR* dp,		/* Pointer to the open directory object */
;;;3392   	FILINFO* fno	/* Pointer to the file information structure */
;;;3393   )
;;;3394   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3395   	FRESULT res;
;;;3396   
;;;3397   
;;;3398   	for (;;) {
000006  bf00              NOP      
                  |L24.8|
;;;3399   		res = f_readdir(dp, fno);		/* Get a directory item */
000008  4621              MOV      r1,r4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       f_readdir
000010  4606              MOV      r6,r0
;;;3400   		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
000012  b916              CBNZ     r6,|L24.26|
000014  b10c              CBZ      r4,|L24.26|
000016  7a60              LDRB     r0,[r4,#9]
000018  b900              CBNZ     r0,|L24.28|
                  |L24.26|
00001a  e017              B        |L24.76|
                  |L24.28|
;;;3401   #if _USE_LFN
;;;3402   		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
00001c  69a0              LDR      r0,[r4,#0x18]
00001e  b148              CBZ      r0,|L24.52|
000020  f2410228          MOV      r2,#0x1028
000024  5950              LDR      r0,[r2,r5]
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  69a1              LDR      r1,[r4,#0x18]
00002c  f7fffffe          BL       pattern_matching
000030  b100              CBZ      r0,|L24.52|
000032  e00b              B        |L24.76|
                  |L24.52|
;;;3403   #endif
;;;3404   		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
000034  f2410128          MOV      r1,#0x1028
000038  5948              LDR      r0,[r1,r5]
00003a  2300              MOVS     r3,#0
00003c  461a              MOV      r2,r3
00003e  f1040109          ADD      r1,r4,#9
000042  f7fffffe          BL       pattern_matching
000046  2800              CMP      r0,#0
000048  d0de              BEQ      |L24.8|
00004a  bf00              NOP      
                  |L24.76|
00004c  bf00              NOP                            ;3400
;;;3405   	}
;;;3406   	return res;
00004e  4630              MOV      r0,r6
;;;3407   
;;;3408   }
000050  bd70              POP      {r4-r6,pc}
;;;3409   
                          ENDP


                          AREA ||i.f_getcwd||, CODE, READONLY, ALIGN=1

                  f_getcwd PROC
;;;3018   #if _FS_RPATH >= 2
;;;3019   FRESULT f_getcwd (
000000  e92d47f3          PUSH     {r0,r1,r4-r10,lr}
;;;3020   	TCHAR* buff,	/* Pointer to the directory path */
;;;3021   	UINT len		/* Size of path */
;;;3022   )
;;;3023   {
000004  f5ad5d86          SUB      sp,sp,#0x10c0
000008  4688              MOV      r8,r1
;;;3024   	FRESULT res;
;;;3025   	DIR dj;
;;;3026   	UINT i, n;
;;;3027   	DWORD ccl;
;;;3028   	TCHAR *tp;
;;;3029   	FILINFO fno;
;;;3030   	DEFINE_NAMEBUF;
;;;3031   
;;;3032   
;;;3033   	*buff = 0;
00000a  2100              MOVS     r1,#0
00000c  f50d5080          ADD      r0,sp,#0x1000
000010  f8d000c0          LDR      r0,[r0,#0xc0]
000014  7001              STRB     r1,[r0,#0]
;;;3034   	/* Get logical drive number */
;;;3035   	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
000016  2200              MOVS     r2,#0
000018  f50d5186          ADD      r1,sp,#0x10c0
00001c  f1a1002c          SUB      r0,r1,#0x2c
000020  f7fffffe          BL       find_volume
000024  4604              MOV      r4,r0
;;;3036   	if (res == FR_OK) {
000026  2c00              CMP      r4,#0
000028  d175              BNE      |L25.278|
;;;3037   		INIT_BUF(dj);
00002a  a91a              ADD      r1,sp,#0x68
00002c  f50d5080          ADD      r0,sp,#0x1000
000030  f8c010ac          STR      r1,[r0,#0xac]
000034  a90d              ADD      r1,sp,#0x34
000036  f8c010b4          STR      r1,[r0,#0xb4]
;;;3038   		i = len;			/* Bottom of buffer (directory stack base) */
00003a  4645              MOV      r5,r8
;;;3039   		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
00003c  f8d00094          LDR      r0,[r0,#0x94]
000040  f5005080          ADD      r0,r0,#0x1000
000044  6941              LDR      r1,[r0,#0x14]
000046  f50d5080          ADD      r0,sp,#0x1000
00004a  f8c0109c          STR      r1,[r0,#0x9c]
;;;3040   		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
00004e  e078              B        |L25.322|
                  |L25.80|
;;;3041   			res = dir_sdi(&dj, 1);			/* Get parent directory */
000050  2101              MOVS     r1,#1
000052  a825              ADD      r0,sp,#0x94
000054  f7fffffe          BL       dir_sdi
000058  4604              MOV      r4,r0
;;;3042   			if (res != FR_OK) break;
00005a  b104              CBZ      r4,|L25.94|
00005c  e079              B        |L25.338|
                  |L25.94|
;;;3043   			res = dir_read(&dj, 0);
00005e  2100              MOVS     r1,#0
000060  a825              ADD      r0,sp,#0x94
000062  f7fffffe          BL       dir_read
000066  4604              MOV      r4,r0
;;;3044   			if (res != FR_OK) break;
000068  b104              CBZ      r4,|L25.108|
00006a  e072              B        |L25.338|
                  |L25.108|
;;;3045   			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
00006c  f50d5280          ADD      r2,sp,#0x1000
000070  f8d210a8          LDR      r1,[r2,#0xa8]
000074  f8d20094          LDR      r0,[r2,#0x94]
000078  f7fffffe          BL       ld_clust
00007c  4601              MOV      r1,r0
00007e  f50d5080          ADD      r0,sp,#0x1000
000082  f8c0109c          STR      r1,[r0,#0x9c]
;;;3046   			res = dir_sdi(&dj, 0);
000086  2100              MOVS     r1,#0
000088  a825              ADD      r0,sp,#0x94
00008a  f7fffffe          BL       dir_sdi
00008e  4604              MOV      r4,r0
;;;3047   			if (res != FR_OK) break;
000090  b104              CBZ      r4,|L25.148|
000092  e05e              B        |L25.338|
                  |L25.148|
;;;3048   			do {							/* Find the entry links to the child directory */
000094  bf00              NOP      
                  |L25.150|
;;;3049   				res = dir_read(&dj, 0);
000096  2100              MOVS     r1,#0
000098  a825              ADD      r0,sp,#0x94
00009a  f7fffffe          BL       dir_read
00009e  4604              MOV      r4,r0
;;;3050   				if (res != FR_OK) break;
0000a0  b104              CBZ      r4,|L25.164|
0000a2  e011              B        |L25.200|
                  |L25.164|
;;;3051   				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
0000a4  f50d5280          ADD      r2,sp,#0x1000
0000a8  f8d210a8          LDR      r1,[r2,#0xa8]
0000ac  f8d20094          LDR      r0,[r2,#0x94]
0000b0  f7fffffe          BL       ld_clust
0000b4  4548              CMP      r0,r9
0000b6  d100              BNE      |L25.186|
0000b8  e006              B        |L25.200|
                  |L25.186|
;;;3052   				res = dir_next(&dj, 0);	
0000ba  2100              MOVS     r1,#0
0000bc  a825              ADD      r0,sp,#0x94
0000be  f7fffffe          BL       dir_next
0000c2  4604              MOV      r4,r0
;;;3053   			} while (res == FR_OK);
0000c4  2c00              CMP      r4,#0
0000c6  d0e6              BEQ      |L25.150|
                  |L25.200|
0000c8  bf00              NOP                            ;3050
;;;3054   			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
0000ca  2c04              CMP      r4,#4
0000cc  d100              BNE      |L25.208|
0000ce  2402              MOVS     r4,#2
                  |L25.208|
;;;3055   			if (res != FR_OK) break;
0000d0  b104              CBZ      r4,|L25.212|
0000d2  e03e              B        |L25.338|
                  |L25.212|
;;;3056   #if _USE_LFN
;;;3057   			fno.lfname = buff;
0000d4  f50d5080          ADD      r0,sp,#0x1000
0000d8  f8d010c0          LDR      r1,[r0,#0xc0]
0000dc  9123              STR      r1,[sp,#0x8c]
;;;3058   			fno.lfsize = i;
0000de  9524              STR      r5,[sp,#0x90]
;;;3059   #endif
;;;3060   			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
0000e0  a91d              ADD      r1,sp,#0x74
0000e2  a825              ADD      r0,sp,#0x94
0000e4  f7fffffe          BL       get_fileinfo
;;;3061   			tp = fno.fname;
0000e8  f10d067d          ADD      r6,sp,#0x7d
;;;3062   #if _USE_LFN
;;;3063   			if (*buff) tp = buff;
0000ec  f50d5080          ADD      r0,sp,#0x1000
0000f0  f8d000c0          LDR      r0,[r0,#0xc0]
0000f4  7800              LDRB     r0,[r0,#0]
0000f6  b118              CBZ      r0,|L25.256|
0000f8  f50d5080          ADD      r0,sp,#0x1000
0000fc  f8d060c0          LDR      r6,[r0,#0xc0]
                  |L25.256|
;;;3064   #endif
;;;3065   			for (n = 0; tp[n]; n++) ;
000100  2700              MOVS     r7,#0
000102  e000              B        |L25.262|
                  |L25.260|
000104  1c7f              ADDS     r7,r7,#1
                  |L25.262|
000106  5df0              LDRB     r0,[r6,r7]
000108  2800              CMP      r0,#0
00010a  d1fb              BNE      |L25.260|
;;;3066   			if (i < n + 3) {
00010c  1cf8              ADDS     r0,r7,#3
00010e  4285              CMP      r5,r0
000110  d202              BCS      |L25.280|
;;;3067   				res = FR_NOT_ENOUGH_CORE; break;
000112  2411              MOVS     r4,#0x11
000114  e01d              B        |L25.338|
                  |L25.278|
000116  e036              B        |L25.390|
                  |L25.280|
;;;3068   			}
;;;3069   			while (n) buff[--i] = tp[--n];
000118  e009              B        |L25.302|
                  |L25.282|
00011a  1e78              SUBS     r0,r7,#1
00011c  4607              MOV      r7,r0
00011e  5c32              LDRB     r2,[r6,r0]
000120  1e68              SUBS     r0,r5,#1
000122  4605              MOV      r5,r0
000124  f50d5180          ADD      r1,sp,#0x1000
000128  f8d110c0          LDR      r1,[r1,#0xc0]
00012c  540a              STRB     r2,[r1,r0]
                  |L25.302|
00012e  2f00              CMP      r7,#0
000130  d1f3              BNE      |L25.282|
;;;3070   			buff[--i] = '/';
000132  222f              MOVS     r2,#0x2f
000134  1e68              SUBS     r0,r5,#1
000136  4605              MOV      r5,r0
000138  f50d5180          ADD      r1,sp,#0x1000
00013c  f8d110c0          LDR      r1,[r1,#0xc0]
000140  540a              STRB     r2,[r1,r0]
                  |L25.322|
000142  f50d5080          ADD      r0,sp,#0x1000         ;3040
000146  f8d0909c          LDR      r9,[r0,#0x9c]         ;3040
00014a  f1b90f00          CMP      r9,#0                 ;3040
00014e  f47faf7f          BNE      |L25.80|
                  |L25.338|
000152  bf00              NOP                            ;3042
;;;3071   		}
;;;3072   		tp = buff;
000154  f50d5080          ADD      r0,sp,#0x1000
000158  f8d060c0          LDR      r6,[r0,#0xc0]
;;;3073   		if (res == FR_OK) {
00015c  b98c              CBNZ     r4,|L25.386|
;;;3074   #if _VOLUMES >= 2
;;;3075   			*tp++ = '0' + CurrVol;			/* Put drive number */
;;;3076   			*tp++ = ':';
;;;3077   #endif
;;;3078   			if (i == len) {					/* Root-directory */
00015e  4545              CMP      r5,r8
000160  d103              BNE      |L25.362|
;;;3079   				*tp++ = '/';
000162  202f              MOVS     r0,#0x2f
000164  f8060b01          STRB     r0,[r6],#1
000168  e00b              B        |L25.386|
                  |L25.362|
;;;3080   			} else {						/* Sub-directroy */
;;;3081   				do		/* Add stacked path str */
00016a  bf00              NOP      
                  |L25.364|
;;;3082   					*tp++ = buff[i++];
00016c  4629              MOV      r1,r5
00016e  1c6d              ADDS     r5,r5,#1
000170  f50d5080          ADD      r0,sp,#0x1000
000174  f8d000c0          LDR      r0,[r0,#0xc0]
000178  5c41              LDRB     r1,[r0,r1]
00017a  f8061b01          STRB     r1,[r6],#1
;;;3083   				while (i < len);
00017e  4545              CMP      r5,r8
000180  d3f4              BCC      |L25.364|
                  |L25.386|
;;;3084   			}
;;;3085   		}
;;;3086   		*tp = 0;
000182  2000              MOVS     r0,#0
000184  7030              STRB     r0,[r6,#0]
                  |L25.390|
;;;3087   		FREE_BUF();
;;;3088   	}
;;;3089   
;;;3090   	LEAVE_FF(dj.fs, res);
000186  4620              MOV      r0,r4
;;;3091   }
000188  b032              ADD      sp,sp,#0xc8
00018a  f50d5d80          ADD      sp,sp,#0x1000
00018e  e8bd87f0          POP      {r4-r10,pc}
;;;3092   #endif /* _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3476   
;;;3477   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3478   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3479   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3480   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3481   )
;;;3482   {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
;;;3483   	FRESULT res;
;;;3484   	FATFS *fs;
;;;3485   	DWORD n, clst, sect, stat;
;;;3486   	UINT i;
;;;3487   	BYTE fat, *p;
;;;3488   
;;;3489   
;;;3490   	/* Get logical drive number */
;;;3491   	res = find_volume(fatfs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a902              ADD      r1,sp,#8
00000c  9804              LDR      r0,[sp,#0x10]
00000e  f7fffffe          BL       find_volume
000012  9001              STR      r0,[sp,#4]
;;;3492   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3493   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d10d              BNE      |L26.58|
;;;3494   		/* If free_clust is valid, return it without full cluster scan */
;;;3495   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  f2410010          MOV      r0,#0x1010
000022  5901              LDR      r1,[r0,r4]
000024  f2410018          MOV      r0,#0x1018
000028  5900              LDR      r0,[r0,r4]
00002a  1e80              SUBS     r0,r0,#2
00002c  4281              CMP      r1,r0
00002e  d805              BHI      |L26.60|
;;;3496   			*nclst = fs->free_clust;
000030  f2410010          MOV      r0,#0x1010
000034  5900              LDR      r0,[r0,r4]
000036  f8ca0000          STR      r0,[r10,#0]
                  |L26.58|
00003a  e071              B        |L26.288|
                  |L26.60|
;;;3497   		} else {
;;;3498   			/* Get number of free clusters */
;;;3499   			fat = fs->fs_type;
00003c  f44f5080          MOV      r0,#0x1000
000040  f810b004          LDRB     r11,[r0,r4]
;;;3500   			n = 0;
000044  2600              MOVS     r6,#0
;;;3501   			if (fat == FS_FAT12) {
000046  f1bb0f01          CMP      r11,#1
00004a  d11e              BNE      |L26.138|
;;;3502   				clst = 2;
00004c  2702              MOVS     r7,#2
;;;3503   				do {
00004e  bf00              NOP      
                  |L26.80|
;;;3504   					stat = get_fat(fs, clst);
000050  4639              MOV      r1,r7
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       get_fat
000058  4680              MOV      r8,r0
;;;3505   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00005a  f1080001          ADD      r0,r8,#1
00005e  b910              CBNZ     r0,|L26.102|
000060  2001              MOVS     r0,#1
000062  9001              STR      r0,[sp,#4]
000064  e010              B        |L26.136|
                  |L26.102|
;;;3506   					if (stat == 1) { res = FR_INT_ERR; break; }
000066  f1b80f01          CMP      r8,#1
00006a  d102              BNE      |L26.114|
00006c  2002              MOVS     r0,#2
00006e  9001              STR      r0,[sp,#4]
000070  e00a              B        |L26.136|
                  |L26.114|
;;;3507   					if (stat == 0) n++;
000072  f1b80f00          CMP      r8,#0
000076  d100              BNE      |L26.122|
000078  1c76              ADDS     r6,r6,#1
                  |L26.122|
;;;3508   				} while (++clst < fs->n_fatent);
00007a  1c78              ADDS     r0,r7,#1
00007c  4607              MOV      r7,r0
00007e  f2410118          MOV      r1,#0x1018
000082  5909              LDR      r1,[r1,r4]
000084  4288              CMP      r0,r1
000086  d3e3              BCC      |L26.80|
                  |L26.136|
000088  e03d              B        |L26.262|
                  |L26.138|
;;;3509   			} else {
;;;3510   				clst = fs->n_fatent;
00008a  f2410018          MOV      r0,#0x1018
00008e  5907              LDR      r7,[r0,r4]
;;;3511   				sect = fs->fatbase;
000090  f2410024          MOV      r0,#0x1024
000094  5900              LDR      r0,[r0,r4]
000096  9000              STR      r0,[sp,#0]
;;;3512   				i = 0; p = 0;
000098  f04f0900          MOV      r9,#0
00009c  2500              MOVS     r5,#0
;;;3513   				do {
00009e  bf00              NOP      
                  |L26.160|
;;;3514   					if (!i) {
0000a0  f1b90f00          CMP      r9,#0
0000a4  d10d              BNE      |L26.194|
;;;3515   						res = move_window(fs, sect++);
0000a6  9800              LDR      r0,[sp,#0]
0000a8  1c42              ADDS     r2,r0,#1
0000aa  4601              MOV      r1,r0
0000ac  4620              MOV      r0,r4
0000ae  9200              STR      r2,[sp,#0]
0000b0  f7fffffe          BL       move_window
0000b4  9001              STR      r0,[sp,#4]
;;;3516   						if (res != FR_OK) break;
0000b6  9801              LDR      r0,[sp,#4]
0000b8  b100              CBZ      r0,|L26.188|
0000ba  e023              B        |L26.260|
                  |L26.188|
;;;3517   						p = fs->win.d8;
0000bc  4625              MOV      r5,r4
;;;3518   						i = SS(fs);
0000be  f44f5980          MOV      r9,#0x1000
                  |L26.194|
;;;3519   					}
;;;3520   					if (fat == FS_FAT16) {
0000c2  f1bb0f02          CMP      r11,#2
0000c6  d109              BNE      |L26.220|
;;;3521   						if (LD_WORD(p) == 0) n++;
0000c8  7828              LDRB     r0,[r5,#0]
0000ca  7869              LDRB     r1,[r5,#1]
0000cc  ea402001          ORR      r0,r0,r1,LSL #8
0000d0  b900              CBNZ     r0,|L26.212|
0000d2  1c76              ADDS     r6,r6,#1
                  |L26.212|
;;;3522   						p += 2; i -= 2;
0000d4  1cad              ADDS     r5,r5,#2
0000d6  f1a90902          SUB      r9,r9,#2
0000da  e010              B        |L26.254|
                  |L26.220|
;;;3523   					} else {
;;;3524   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000dc  78e8              LDRB     r0,[r5,#3]
0000de  0600              LSLS     r0,r0,#24
0000e0  78a9              LDRB     r1,[r5,#2]
0000e2  ea404001          ORR      r0,r0,r1,LSL #16
0000e6  7869              LDRB     r1,[r5,#1]
0000e8  ea402001          ORR      r0,r0,r1,LSL #8
0000ec  7829              LDRB     r1,[r5,#0]
0000ee  4308              ORRS     r0,r0,r1
0000f0  f0204070          BIC      r0,r0,#0xf0000000
0000f4  b900              CBNZ     r0,|L26.248|
0000f6  1c76              ADDS     r6,r6,#1
                  |L26.248|
;;;3525   						p += 4; i -= 4;
0000f8  1d2d              ADDS     r5,r5,#4
0000fa  f1a90904          SUB      r9,r9,#4
                  |L26.254|
;;;3526   					}
;;;3527   				} while (--clst);
0000fe  1e78              SUBS     r0,r7,#1
000100  1e07              SUBS     r7,r0,#0
000102  d1cd              BNE      |L26.160|
                  |L26.260|
000104  bf00              NOP                            ;3516
                  |L26.262|
;;;3528   			}
;;;3529   			fs->free_clust = n;
000106  f2410010          MOV      r0,#0x1010
00010a  5106              STR      r6,[r0,r4]
;;;3530   			fs->fsi_flag |= 1;
00010c  f2410005          MOV      r0,#0x1005
000110  5d00              LDRB     r0,[r0,r4]
000112  f0400101          ORR      r1,r0,#1
000116  f2410005          MOV      r0,#0x1005
00011a  5501              STRB     r1,[r0,r4]
;;;3531   			*nclst = n;
00011c  f8ca6000          STR      r6,[r10,#0]
                  |L26.288|
;;;3532   		}
;;;3533   	}
;;;3534   	LEAVE_FF(fs, res);
000120  9801              LDR      r0,[sp,#4]
;;;3535   }
000122  b005              ADD      sp,sp,#0x14
000124  e8bd8ff0          POP      {r4-r11,pc}
;;;3536   
                          ENDP


                          AREA ||i.f_getlabel||, CODE, READONLY, ALIGN=1

                  f_getlabel PROC
;;;3911   
;;;3912   FRESULT f_getlabel (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;3913   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3914   	TCHAR* label,		/* Pointer to a buffer to return the volume label */
;;;3915   	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
;;;3916   )
;;;3917   {
000004  f5ad5d82          SUB      sp,sp,#0x1040
000008  460d              MOV      r5,r1
00000a  4690              MOV      r8,r2
;;;3918   	FRESULT res;
;;;3919   	DIR dj;
;;;3920   	UINT i, j;
;;;3921   #if _USE_LFN && _LFN_UNICODE
;;;3922   	WCHAR w;
;;;3923   #endif
;;;3924   
;;;3925   
;;;3926   	/* Get logical drive number */
;;;3927   	res = find_volume(&dj.fs, &path, 0);
00000c  2200              MOVS     r2,#0
00000e  f50d5182          ADD      r1,sp,#0x1040
000012  f1a1002c          SUB      r0,r1,#0x2c
000016  f7fffffe          BL       find_volume
00001a  4604              MOV      r4,r0
;;;3928   
;;;3929   	/* Get volume label */
;;;3930   	if (res == FR_OK && label) {
00001c  bb3c              CBNZ     r4,|L27.110|
00001e  b335              CBZ      r5,|L27.110|
;;;3931   		dj.sclust = 0;					/* Open root directory */
000020  2100              MOVS     r1,#0
000022  f50d5080          ADD      r0,sp,#0x1000
000026  61c1              STR      r1,[r0,#0x1c]
;;;3932   		res = dir_sdi(&dj, 0);
000028  a805              ADD      r0,sp,#0x14
00002a  f7fffffe          BL       dir_sdi
00002e  4604              MOV      r4,r0
;;;3933   		if (res == FR_OK) {
000030  b9ec              CBNZ     r4,|L27.110|
;;;3934   			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
000032  2101              MOVS     r1,#1
000034  a805              ADD      r0,sp,#0x14
000036  f7fffffe          BL       dir_read
00003a  4604              MOV      r4,r0
;;;3935   			if (res == FR_OK) {			/* A volume label is exist */
00003c  b994              CBNZ     r4,|L27.100|
;;;3936   #if _USE_LFN && _LFN_UNICODE
;;;3937   				i = j = 0;
;;;3938   				do {
;;;3939   					w = (i < 11) ? dj.dir[i++] : ' ';
;;;3940   					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
;;;3941   						w = w << 8 | dj.dir[i++];
;;;3942   					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
;;;3943   				} while (j < 11);
;;;3944   #else
;;;3945   				mem_cpy(label, dj.dir, 11);
00003e  f50d5080          ADD      r0,sp,#0x1000
000042  220b              MOVS     r2,#0xb
000044  6a81              LDR      r1,[r0,#0x28]
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       mem_cpy
;;;3946   #endif
;;;3947   				j = 11;
00004c  270b              MOVS     r7,#0xb
;;;3948   				do {
00004e  bf00              NOP      
                  |L27.80|
;;;3949   					label[j] = 0;
000050  2000              MOVS     r0,#0
000052  55e8              STRB     r0,[r5,r7]
;;;3950   					if (!j) break;
000054  b907              CBNZ     r7,|L27.88|
000056  e004              B        |L27.98|
                  |L27.88|
;;;3951   				} while (label[--j] == ' ');
000058  1e78              SUBS     r0,r7,#1
00005a  4607              MOV      r7,r0
00005c  5c28              LDRB     r0,[r5,r0]
00005e  2820              CMP      r0,#0x20
000060  d0f6              BEQ      |L27.80|
                  |L27.98|
000062  bf00              NOP                            ;3950
                  |L27.100|
;;;3952   			}
;;;3953   			if (res == FR_NO_FILE) {	/* No label, return nul string */
000064  2c04              CMP      r4,#4
000066  d102              BNE      |L27.110|
;;;3954   				label[0] = 0;
000068  2000              MOVS     r0,#0
00006a  7028              STRB     r0,[r5,#0]
;;;3955   				res = FR_OK;
00006c  2400              MOVS     r4,#0
                  |L27.110|
;;;3956   			}
;;;3957   		}
;;;3958   	}
;;;3959   
;;;3960   	/* Get volume serial number */
;;;3961   	if (res == FR_OK && vsn) {
00006e  bbb4              CBNZ     r4,|L27.222|
000070  f1b80f00          CMP      r8,#0
000074  d033              BEQ      |L27.222|
;;;3962   		res = move_window(dj.fs, dj.fs->volbase);
000076  f50d5280          ADD      r2,sp,#0x1000
00007a  6952              LDR      r2,[r2,#0x14]
00007c  f5025280          ADD      r2,r2,#0x1000
000080  6a11              LDR      r1,[r2,#0x20]
000082  f50d5280          ADD      r2,sp,#0x1000
000086  6950              LDR      r0,[r2,#0x14]
000088  f7fffffe          BL       move_window
00008c  4604              MOV      r4,r0
;;;3963   		if (res == FR_OK) {
00008e  bb34              CBNZ     r4,|L27.222|
;;;3964   			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
000090  f50d5080          ADD      r0,sp,#0x1000
000094  6940              LDR      r0,[r0,#0x14]
000096  f5005080          ADD      r0,r0,#0x1000
00009a  7800              LDRB     r0,[r0,#0]
00009c  2803              CMP      r0,#3
00009e  d101              BNE      |L27.164|
0000a0  2043              MOVS     r0,#0x43
0000a2  e000              B        |L27.166|
                  |L27.164|
0000a4  2027              MOVS     r0,#0x27
                  |L27.166|
0000a6  4606              MOV      r6,r0
;;;3965   			*vsn = LD_DWORD(&dj.fs->win.d8[i]);
0000a8  f50d5080          ADD      r0,sp,#0x1000
0000ac  6941              LDR      r1,[r0,#0x14]
0000ae  1988              ADDS     r0,r1,r6
0000b0  78c0              LDRB     r0,[r0,#3]
0000b2  0601              LSLS     r1,r0,#24
0000b4  f50d5080          ADD      r0,sp,#0x1000
0000b8  6942              LDR      r2,[r0,#0x14]
0000ba  1990              ADDS     r0,r2,r6
0000bc  7880              LDRB     r0,[r0,#2]
0000be  ea414100          ORR      r1,r1,r0,LSL #16
0000c2  f50d5080          ADD      r0,sp,#0x1000
0000c6  6942              LDR      r2,[r0,#0x14]
0000c8  1990              ADDS     r0,r2,r6
0000ca  7840              LDRB     r0,[r0,#1]
0000cc  ea412100          ORR      r1,r1,r0,LSL #8
0000d0  f50d5080          ADD      r0,sp,#0x1000
0000d4  6940              LDR      r0,[r0,#0x14]
0000d6  5d80              LDRB     r0,[r0,r6]
0000d8  4301              ORRS     r1,r1,r0
0000da  f8c81000          STR      r1,[r8,#0]
                  |L27.222|
;;;3966   		}
;;;3967   	}
;;;3968   
;;;3969   	LEAVE_FF(dj.fs, res);
0000de  4620              MOV      r0,r4
;;;3970   }
0000e0  b013              ADD      sp,sp,#0x4c
0000e2  f50d5d80          ADD      sp,sp,#0x1000
0000e6  e8bd83f0          POP      {r4-r9,pc}
;;;3971   
                          ENDP


                          AREA ||i.f_gets||, CODE, READONLY, ALIGN=1

                  f_gets PROC
;;;4456   
;;;4457   TCHAR* f_gets (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;4458   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;4459   	int len,		/* Size of string buffer (characters) */
;;;4460   	FIL* fp			/* Pointer to the file object */
;;;4461   )
;;;4462   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;4463   	int n = 0;
00000a  2400              MOVS     r4,#0
;;;4464   	TCHAR c, *p = buff;
00000c  463e              MOV      r6,r7
;;;4465   	BYTE s[2];
;;;4466   	UINT rc;
;;;4467   
;;;4468   
;;;4469   	while (n < len - 1) {	/* Read characters until buffer gets filled */
00000e  e014              B        |L28.58|
                  |L28.16|
;;;4470   #if _USE_LFN && _LFN_UNICODE
;;;4471   #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
;;;4472   		f_read(fp, s, 1, &rc);
;;;4473   		if (rc != 1) break;
;;;4474   		c = s[0];
;;;4475   		if (c >= 0x80) {
;;;4476   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;4477   			if (c < 0xE0) {			/* Two-byte sequence */
;;;4478   				f_read(fp, s, 1, &rc);
;;;4479   				if (rc != 1) break;
;;;4480   				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
;;;4481   				if (c < 0x80) c = '?';
;;;4482   			} else {
;;;4483   				if (c < 0xF0) {		/* Three-byte sequence */
;;;4484   					f_read(fp, s, 2, &rc);
;;;4485   					if (rc != 2) break;
;;;4486   					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
;;;4487   					if (c < 0x800) c = '?';
;;;4488   				} else {			/* Reject four-byte sequence */
;;;4489   					c = '?';
;;;4490   				}
;;;4491   			}
;;;4492   		}
;;;4493   #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
;;;4494   		f_read(fp, s, 2, &rc);
;;;4495   		if (rc != 2) break;
;;;4496   		c = s[1] + (s[0] << 8);
;;;4497   #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
;;;4498   		f_read(fp, s, 2, &rc);
;;;4499   		if (rc != 2) break;
;;;4500   		c = s[0] + (s[1] << 8);
;;;4501   #else						/* Read a character in ANSI/OEM */
;;;4502   		f_read(fp, s, 1, &rc);
;;;4503   		if (rc != 1) break;
;;;4504   		c = s[0];
;;;4505   		if (IsDBCS1(c)) {
;;;4506   			f_read(fp, s, 1, &rc);
;;;4507   			if (rc != 1) break;
;;;4508   			c = (c << 8) + s[0];
;;;4509   		}
;;;4510   		c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;4511   		if (!c) c = '?';
;;;4512   #endif
;;;4513   #else						/* Read a character without conversion */
;;;4514   		f_read(fp, s, 1, &rc);
000010  466b              MOV      r3,sp
000012  2201              MOVS     r2,#1
000014  a901              ADD      r1,sp,#4
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       f_read
;;;4515   		if (rc != 1) break;
00001c  9800              LDR      r0,[sp,#0]
00001e  2801              CMP      r0,#1
000020  d000              BEQ      |L28.36|
000022  e00e              B        |L28.66|
                  |L28.36|
;;;4516   		c = s[0];
000024  f89d0004          LDRB     r0,[sp,#4]
000028  b245              SXTB     r5,r0
;;;4517   #endif
;;;4518   		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
00002a  bf00              NOP      
;;;4519   		*p++ = c;
00002c  f8065b01          STRB     r5,[r6],#1
;;;4520   		n++;
000030  1c64              ADDS     r4,r4,#1
;;;4521   		if (c == '\n') break;		/* Break on EOL */
000032  2d0a              CMP      r5,#0xa
000034  d100              BNE      |L28.56|
000036  e004              B        |L28.66|
                  |L28.56|
000038  bf00              NOP                            ;4518
                  |L28.58|
00003a  f1a80001          SUB      r0,r8,#1              ;4469
00003e  42a0              CMP      r0,r4                 ;4469
000040  dce6              BGT      |L28.16|
                  |L28.66|
000042  bf00              NOP                            ;4515
;;;4522   	}
;;;4523   	*p = 0;
000044  2000              MOVS     r0,#0
000046  7030              STRB     r0,[r6,#0]
;;;4524   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
000048  b114              CBZ      r4,|L28.80|
00004a  4638              MOV      r0,r7
                  |L28.76|
;;;4525   }
00004c  e8bd87fc          POP      {r2-r10,pc}
                  |L28.80|
000050  2000              MOVS     r0,#0                 ;4524
000052  e7fb              B        |L28.76|
;;;4526   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;3101   
;;;3102   FRESULT f_lseek (
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;3103   	FIL* fp,		/* Pointer to the file object */
;;;3104   	DWORD ofs		/* File pointer from top of file */
;;;3105   )
;;;3106   {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;3107   	FRESULT res;
;;;3108   	DWORD clst, bcs, nsect, ifptr;
;;;3109   #if _USE_FASTSEEK
;;;3110   	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;3111   #endif
;;;3112   
;;;3113   
;;;3114   	res = validate(fp);					/* Check validity of the object */
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       validate
000010  9006              STR      r0,[sp,#0x18]
;;;3115   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000012  9806              LDR      r0,[sp,#0x18]
000014  b118              CBZ      r0,|L29.30|
000016  9806              LDR      r0,[sp,#0x18]
                  |L29.24|
;;;3116   	if (fp->err)						/* Check error */
;;;3117   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3118   
;;;3119   #if _USE_FASTSEEK
;;;3120   	if (fp->cltbl) {	/* Fast seek */
;;;3121   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3122   			tbl = fp->cltbl;
;;;3123   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3124   			cl = fp->sclust;			/* Top of the chain */
;;;3125   			if (cl) {
;;;3126   				do {
;;;3127   					/* Get a fragment */
;;;3128   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3129   					do {
;;;3130   						pcl = cl; ncl++;
;;;3131   						cl = get_fat(fp->fs, cl);
;;;3132   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3133   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3134   					} while (cl == pcl + 1);
;;;3135   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3136   						*tbl++ = ncl; *tbl++ = tcl;
;;;3137   					}
;;;3138   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3139   			}
;;;3140   			*fp->cltbl = ulen;	/* Number of items used */
;;;3141   			if (ulen <= tlen)
;;;3142   				*tbl = 0;		/* Terminate table */
;;;3143   			else
;;;3144   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3145   
;;;3146   		} else {						/* Fast seek */
;;;3147   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3148   				ofs = fp->fsize;
;;;3149   			fp->fptr = ofs;				/* Set file pointer */
;;;3150   			if (ofs) {
;;;3151   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3152   				dsc = clust2sect(fp->fs, fp->clust);
;;;3153   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3154   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3155   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3156   #if !_FS_TINY
;;;3157   #if !_FS_READONLY
;;;3158   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3159   						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
;;;3160   							ABORT(fp->fs, FR_DISK_ERR);
;;;3161   						fp->flag &= ~FA__DIRTY;
;;;3162   					}
;;;3163   #endif
;;;3164   					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
;;;3165   						ABORT(fp->fs, FR_DISK_ERR);
;;;3166   #endif
;;;3167   					fp->dsect = dsc;
;;;3168   				}
;;;3169   			}
;;;3170   		}
;;;3171   	} else
;;;3172   #endif
;;;3173   
;;;3174   	/* Normal Seek */
;;;3175   	{
;;;3176   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3177   #if !_FS_READONLY
;;;3178   			 && !(fp->flag & FA_WRITE)
;;;3179   #endif
;;;3180   			) ofs = fp->fsize;
;;;3181   
;;;3182   		ifptr = fp->fptr;
;;;3183   		fp->fptr = nsect = 0;
;;;3184   		if (ofs) {
;;;3185   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3186   			if (ifptr > 0 &&
;;;3187   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3188   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3189   				ofs -= fp->fptr;
;;;3190   				clst = fp->clust;
;;;3191   			} else {									/* When seek to back cluster, */
;;;3192   				clst = fp->sclust;						/* start from the first cluster */
;;;3193   #if !_FS_READONLY
;;;3194   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3195   					clst = create_chain(fp->fs, 0);
;;;3196   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3197   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3198   					fp->sclust = clst;
;;;3199   				}
;;;3200   #endif
;;;3201   				fp->clust = clst;
;;;3202   			}
;;;3203   			if (clst != 0) {
;;;3204   				while (ofs > bcs) {						/* Cluster following loop */
;;;3205   #if !_FS_READONLY
;;;3206   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3207   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3208   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3209   							ofs = bcs; break;
;;;3210   						}
;;;3211   					} else
;;;3212   #endif
;;;3213   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3214   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3215   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3216   					fp->clust = clst;
;;;3217   					fp->fptr += bcs;
;;;3218   					ofs -= bcs;
;;;3219   				}
;;;3220   				fp->fptr += ofs;
;;;3221   				if (ofs % SS(fp->fs)) {
;;;3222   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3223   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3224   					nsect += ofs / SS(fp->fs);
;;;3225   				}
;;;3226   			}
;;;3227   		}
;;;3228   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3229   #if !_FS_TINY
;;;3230   #if !_FS_READONLY
;;;3231   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3232   				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
;;;3233   					ABORT(fp->fs, FR_DISK_ERR);
;;;3234   				fp->flag &= ~FA__DIRTY;
;;;3235   			}
;;;3236   #endif
;;;3237   			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3238   				ABORT(fp->fs, FR_DISK_ERR);
;;;3239   #endif
;;;3240   			fp->dsect = nsect;
;;;3241   		}
;;;3242   #if !_FS_READONLY
;;;3243   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3244   			fp->fsize = fp->fptr;
;;;3245   			fp->flag |= FA__WRITTEN;
;;;3246   		}
;;;3247   #endif
;;;3248   	}
;;;3249   
;;;3250   	LEAVE_FF(fp->fs, res);
;;;3251   }
000018  b007              ADD      sp,sp,#0x1c
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L29.30|
00001e  f2410007          MOV      r0,#0x1007            ;3116
000022  5d00              LDRB     r0,[r0,r4]            ;3116
000024  b118              CBZ      r0,|L29.46|
000026  f2410007          MOV      r0,#0x1007            ;3117
00002a  5d00              LDRB     r0,[r0,r4]            ;3117
00002c  e7f4              B        |L29.24|
                  |L29.46|
00002e  f2410024          MOV      r0,#0x1024            ;3120
000032  5900              LDR      r0,[r0,r4]            ;3120
000034  2800              CMP      r0,#0                 ;3120
000036  d07d              BEQ      |L29.308|
000038  1c68              ADDS     r0,r5,#1              ;3121
00003a  2800              CMP      r0,#0                 ;3121
00003c  d156              BNE      |L29.236|
00003e  f2410024          MOV      r0,#0x1024            ;3122
000042  f850a004          LDR      r10,[r0,r4]           ;3122
000046  f85a0b04          LDR      r0,[r10],#4           ;3123
00004a  9001              STR      r0,[sp,#4]            ;3123
00004c  2002              MOVS     r0,#2                 ;3123
00004e  9000              STR      r0,[sp,#0]            ;3123
000050  f2410010          MOV      r0,#0x1010            ;3124
000054  5907              LDR      r7,[r0,r4]            ;3124
000056  2f00              CMP      r7,#0                 ;3125
000058  d038              BEQ      |L29.204|
00005a  bf00              NOP                            ;3126
                  |L29.92|
00005c  9702              STR      r7,[sp,#8]            ;3128
00005e  2000              MOVS     r0,#0                 ;3128
000060  9003              STR      r0,[sp,#0xc]          ;3128
000062  9800              LDR      r0,[sp,#0]            ;3128
000064  1c80              ADDS     r0,r0,#2              ;3128
000066  9000              STR      r0,[sp,#0]            ;3128
000068  bf00              NOP                            ;3129
                  |L29.106|
00006a  9704              STR      r7,[sp,#0x10]         ;3130
00006c  9803              LDR      r0,[sp,#0xc]          ;3130
00006e  1c40              ADDS     r0,r0,#1              ;3130
000070  9003              STR      r0,[sp,#0xc]          ;3130
000072  f44f5180          MOV      r1,#0x1000            ;3131
000076  5908              LDR      r0,[r1,r4]            ;3131
000078  4639              MOV      r1,r7                 ;3131
00007a  f7fffffe          BL       get_fat
00007e  4607              MOV      r7,r0                 ;3131
000080  2f01              CMP      r7,#1                 ;3132
000082  d805              BHI      |L29.144|
000084  2102              MOVS     r1,#2                 ;3132
000086  f2410007          MOV      r0,#0x1007            ;3132
00008a  5501              STRB     r1,[r0,r4]            ;3132
00008c  2002              MOVS     r0,#2                 ;3132
00008e  e7c3              B        |L29.24|
                  |L29.144|
000090  1c78              ADDS     r0,r7,#1              ;3133
000092  b928              CBNZ     r0,|L29.160|
000094  2101              MOVS     r1,#1                 ;3133
000096  f2410007          MOV      r0,#0x1007            ;3133
00009a  5501              STRB     r1,[r0,r4]            ;3133
00009c  2001              MOVS     r0,#1                 ;3133
00009e  e7bb              B        |L29.24|
                  |L29.160|
0000a0  9804              LDR      r0,[sp,#0x10]         ;3134
0000a2  1c40              ADDS     r0,r0,#1              ;3134
0000a4  4287              CMP      r7,r0                 ;3134
0000a6  d0e0              BEQ      |L29.106|
0000a8  e9dd0100          LDRD     r0,r1,[sp,#0]         ;3135
0000ac  4288              CMP      r0,r1                 ;3135
0000ae  d805              BHI      |L29.188|
0000b0  9803              LDR      r0,[sp,#0xc]          ;3136
0000b2  f84a0b04          STR      r0,[r10],#4           ;3136
0000b6  9802              LDR      r0,[sp,#8]            ;3136
0000b8  f84a0b04          STR      r0,[r10],#4           ;3136
                  |L29.188|
0000bc  f44f5080          MOV      r0,#0x1000            ;3138
0000c0  5900              LDR      r0,[r0,r4]            ;3138
0000c2  f5005080          ADD      r0,r0,#0x1000         ;3138
0000c6  6980              LDR      r0,[r0,#0x18]         ;3138
0000c8  42b8              CMP      r0,r7                 ;3138
0000ca  d8c7              BHI      |L29.92|
                  |L29.204|
0000cc  f2410124          MOV      r1,#0x1024            ;3140
0000d0  5909              LDR      r1,[r1,r4]            ;3140
0000d2  9800              LDR      r0,[sp,#0]            ;3140
0000d4  6008              STR      r0,[r1,#0]            ;3140
0000d6  e9dd0100          LDRD     r0,r1,[sp,#0]         ;3141
0000da  4288              CMP      r0,r1                 ;3141
0000dc  d803              BHI      |L29.230|
0000de  2000              MOVS     r0,#0                 ;3142
0000e0  f8ca0000          STR      r0,[r10,#0]           ;3142
                  |L29.228|
0000e4  e18b              B        |L29.1022|
                  |L29.230|
0000e6  2011              MOVS     r0,#0x11              ;3144
0000e8  9006              STR      r0,[sp,#0x18]         ;3144
0000ea  e188              B        |L29.1022|
                  |L29.236|
0000ec  f241000c          MOV      r0,#0x100c            ;3147
0000f0  5900              LDR      r0,[r0,r4]            ;3147
0000f2  42a8              CMP      r0,r5                 ;3147
0000f4  d202              BCS      |L29.252|
0000f6  f241000c          MOV      r0,#0x100c            ;3148
0000fa  5905              LDR      r5,[r0,r4]            ;3148
                  |L29.252|
0000fc  f2410008          MOV      r0,#0x1008            ;3149
000100  5105              STR      r5,[r0,r4]            ;3149
000102  2d00              CMP      r5,#0                 ;3150
000104  d0ee              BEQ      |L29.228|
000106  1e69              SUBS     r1,r5,#1              ;3151
000108  4620              MOV      r0,r4                 ;3151
00010a  f7fffffe          BL       clmt_clust
00010e  f2410114          MOV      r1,#0x1014            ;3151
000112  5108              STR      r0,[r1,r4]            ;3151
000114  460a              MOV      r2,r1                 ;3152
000116  5911              LDR      r1,[r2,r4]            ;3152
000118  f44f5280          MOV      r2,#0x1000            ;3152
00011c  5910              LDR      r0,[r2,r4]            ;3152
00011e  f7fffffe          BL       clust2sect
000122  4681              MOV      r9,r0                 ;3152
000124  f1b90f00          CMP      r9,#0                 ;3153
000128  d107              BNE      |L29.314|
00012a  2102              MOVS     r1,#2                 ;3153
00012c  f2410007          MOV      r0,#0x1007            ;3153
000130  5501              STRB     r1,[r0,r4]            ;3153
000132  e000              B        |L29.310|
                  |L29.308|
000134  e051              B        |L29.474|
                  |L29.310|
000136  2002              MOVS     r0,#2                 ;3153
000138  e76e              B        |L29.24|
                  |L29.314|
00013a  f44f5080          MOV      r0,#0x1000            ;3154
00013e  5900              LDR      r0,[r0,r4]            ;3154
000140  f5005080          ADD      r0,r0,#0x1000         ;3154
000144  7880              LDRB     r0,[r0,#2]            ;3154
000146  1e40              SUBS     r0,r0,#1              ;3154
000148  1e69              SUBS     r1,r5,#1              ;3154
00014a  ea003011          AND      r0,r0,r1,LSR #12      ;3154
00014e  4481              ADD      r9,r9,r0              ;3154
000150  f2410008          MOV      r0,#0x1008            ;3155
000154  5b00              LDRH     r0,[r0,r4]            ;3155
000156  f3c0000b          UBFX     r0,r0,#0,#12          ;3155
00015a  2800              CMP      r0,#0                 ;3155
00015c  d0c2              BEQ      |L29.228|
00015e  f2410018          MOV      r0,#0x1018            ;3155
000162  5900              LDR      r0,[r0,r4]            ;3155
000164  4548              CMP      r0,r9                 ;3155
000166  d0bd              BEQ      |L29.228|
000168  f2410006          MOV      r0,#0x1006            ;3158
00016c  5d00              LDRB     r0,[r0,r4]            ;3158
00016e  f0000040          AND      r0,r0,#0x40           ;3158
000172  b1d8              CBZ      r0,|L29.428|
000174  f2410118          MOV      r1,#0x1018            ;3159
000178  590a              LDR      r2,[r1,r4]            ;3159
00017a  f44f5180          MOV      r1,#0x1000            ;3159
00017e  5909              LDR      r1,[r1,r4]            ;3159
000180  f5015180          ADD      r1,r1,#0x1000         ;3159
000184  7848              LDRB     r0,[r1,#1]            ;3159
000186  2301              MOVS     r3,#1                 ;3159
000188  4621              MOV      r1,r4                 ;3159
00018a  f7fffffe          BL       disk_write
00018e  b128              CBZ      r0,|L29.412|
000190  2101              MOVS     r1,#1                 ;3160
000192  f2410007          MOV      r0,#0x1007            ;3160
000196  5501              STRB     r1,[r0,r4]            ;3160
000198  2001              MOVS     r0,#1                 ;3160
00019a  e73d              B        |L29.24|
                  |L29.412|
00019c  f2410006          MOV      r0,#0x1006            ;3161
0001a0  5d00              LDRB     r0,[r0,r4]            ;3161
0001a2  f0200140          BIC      r1,r0,#0x40           ;3161
0001a6  f2410006          MOV      r0,#0x1006            ;3161
0001aa  5501              STRB     r1,[r0,r4]            ;3161
                  |L29.428|
0001ac  f44f5180          MOV      r1,#0x1000            ;3164
0001b0  5909              LDR      r1,[r1,r4]            ;3164
0001b2  f5015180          ADD      r1,r1,#0x1000         ;3164
0001b6  7848              LDRB     r0,[r1,#1]            ;3164
0001b8  2301              MOVS     r3,#1                 ;3164
0001ba  464a              MOV      r2,r9                 ;3164
0001bc  4621              MOV      r1,r4                 ;3164
0001be  f7fffffe          BL       disk_read
0001c2  b128              CBZ      r0,|L29.464|
0001c4  2101              MOVS     r1,#1                 ;3165
0001c6  f2410007          MOV      r0,#0x1007            ;3165
0001ca  5501              STRB     r1,[r0,r4]            ;3165
0001cc  2001              MOVS     r0,#1                 ;3165
0001ce  e723              B        |L29.24|
                  |L29.464|
0001d0  f2410018          MOV      r0,#0x1018            ;3167
0001d4  f8409004          STR      r9,[r0,r4]            ;3167
0001d8  e111              B        |L29.1022|
                  |L29.474|
0001da  f241000c          MOV      r0,#0x100c            ;3176
0001de  5900              LDR      r0,[r0,r4]            ;3176
0001e0  42a8              CMP      r0,r5                 ;3176
0001e2  d208              BCS      |L29.502|
0001e4  f2410006          MOV      r0,#0x1006            ;3178
0001e8  5d00              LDRB     r0,[r0,r4]            ;3178
0001ea  f0000002          AND      r0,r0,#2              ;3178
0001ee  b910              CBNZ     r0,|L29.502|
0001f0  f241000c          MOV      r0,#0x100c            ;3180
0001f4  5905              LDR      r5,[r0,r4]            ;3180
                  |L29.502|
0001f6  f2410008          MOV      r0,#0x1008            ;3182
0001fa  5900              LDR      r0,[r0,r4]            ;3182
0001fc  9005              STR      r0,[sp,#0x14]         ;3182
0001fe  f04f0b00          MOV      r11,#0                ;3183
000202  f2410008          MOV      r0,#0x1008            ;3183
000206  f840b004          STR      r11,[r0,r4]           ;3183
00020a  2d00              CMP      r5,#0                 ;3184
00020c  d073              BEQ      |L29.758|
00020e  f44f5080          MOV      r0,#0x1000            ;3185
000212  5900              LDR      r0,[r0,r4]            ;3185
000214  f5005080          ADD      r0,r0,#0x1000         ;3185
000218  7880              LDRB     r0,[r0,#2]            ;3185
00021a  ea4f3800          LSL      r8,r0,#12             ;3185
00021e  9805              LDR      r0,[sp,#0x14]         ;3186
000220  b1b8              CBZ      r0,|L29.594|
000222  1e68              SUBS     r0,r5,#1              ;3187
000224  fbb0f1f8          UDIV     r1,r0,r8              ;3187
000228  9805              LDR      r0,[sp,#0x14]         ;3187
00022a  1e40              SUBS     r0,r0,#1              ;3187
00022c  fbb0f0f8          UDIV     r0,r0,r8              ;3187
000230  4281              CMP      r1,r0                 ;3187
000232  d30e              BCC      |L29.594|
000234  9805              LDR      r0,[sp,#0x14]         ;3188
000236  1e40              SUBS     r0,r0,#1              ;3188
000238  f1a80101          SUB      r1,r8,#1              ;3188
00023c  4388              BICS     r0,r0,r1              ;3188
00023e  f2410108          MOV      r1,#0x1008            ;3188
000242  5108              STR      r0,[r1,r4]            ;3188
000244  4608              MOV      r0,r1                 ;3189
000246  5900              LDR      r0,[r0,r4]            ;3189
000248  1a2d              SUBS     r5,r5,r0              ;3189
00024a  f2410014          MOV      r0,#0x1014            ;3190
00024e  5906              LDR      r6,[r0,r4]            ;3190
000250  e020              B        |L29.660|
                  |L29.594|
000252  f2410010          MOV      r0,#0x1010            ;3192
000256  5906              LDR      r6,[r0,r4]            ;3192
000258  b9ce              CBNZ     r6,|L29.654|
00025a  f44f5180          MOV      r1,#0x1000            ;3195
00025e  5908              LDR      r0,[r1,r4]            ;3195
000260  2100              MOVS     r1,#0                 ;3195
000262  f7fffffe          BL       create_chain
000266  4606              MOV      r6,r0                 ;3195
000268  2e01              CMP      r6,#1                 ;3196
00026a  d105              BNE      |L29.632|
00026c  2102              MOVS     r1,#2                 ;3196
00026e  f2410007          MOV      r0,#0x1007            ;3196
000272  5501              STRB     r1,[r0,r4]            ;3196
000274  2002              MOVS     r0,#2                 ;3196
000276  e6cf              B        |L29.24|
                  |L29.632|
000278  1c70              ADDS     r0,r6,#1              ;3197
00027a  b928              CBNZ     r0,|L29.648|
00027c  2101              MOVS     r1,#1                 ;3197
00027e  f2410007          MOV      r0,#0x1007            ;3197
000282  5501              STRB     r1,[r0,r4]            ;3197
000284  2001              MOVS     r0,#1                 ;3197
000286  e6c7              B        |L29.24|
                  |L29.648|
000288  f2410010          MOV      r0,#0x1010            ;3198
00028c  5106              STR      r6,[r0,r4]            ;3198
                  |L29.654|
00028e  f2410014          MOV      r0,#0x1014            ;3201
000292  5106              STR      r6,[r0,r4]            ;3201
                  |L29.660|
000294  b37e              CBZ      r6,|L29.758|
000296  e03c              B        |L29.786|
                  |L29.664|
000298  f2410006          MOV      r0,#0x1006            ;3206
00029c  5d00              LDRB     r0,[r0,r4]            ;3206
00029e  f0000002          AND      r0,r0,#2              ;3206
0002a2  b148              CBZ      r0,|L29.696|
0002a4  f44f5180          MOV      r1,#0x1000            ;3207
0002a8  5908              LDR      r0,[r1,r4]            ;3207
0002aa  4631              MOV      r1,r6                 ;3207
0002ac  f7fffffe          BL       create_chain
0002b0  4606              MOV      r6,r0                 ;3207
0002b2  b946              CBNZ     r6,|L29.710|
0002b4  4645              MOV      r5,r8                 ;3209
0002b6  e02e              B        |L29.790|
                  |L29.696|
0002b8  f44f5180          MOV      r1,#0x1000            ;3213
0002bc  5908              LDR      r0,[r1,r4]            ;3213
0002be  4631              MOV      r1,r6                 ;3213
0002c0  f7fffffe          BL       get_fat
0002c4  4606              MOV      r6,r0                 ;3213
                  |L29.710|
0002c6  1c70              ADDS     r0,r6,#1              ;3214
0002c8  b928              CBNZ     r0,|L29.726|
0002ca  2101              MOVS     r1,#1                 ;3214
0002cc  f2410007          MOV      r0,#0x1007            ;3214
0002d0  5501              STRB     r1,[r0,r4]            ;3214
0002d2  2001              MOVS     r0,#1                 ;3214
0002d4  e6a0              B        |L29.24|
                  |L29.726|
0002d6  2e01              CMP      r6,#1                 ;3215
0002d8  d907              BLS      |L29.746|
0002da  f44f5080          MOV      r0,#0x1000            ;3215
0002de  5900              LDR      r0,[r0,r4]            ;3215
0002e0  f5005080          ADD      r0,r0,#0x1000         ;3215
0002e4  6980              LDR      r0,[r0,#0x18]         ;3215
0002e6  42b0              CMP      r0,r6                 ;3215
0002e8  d806              BHI      |L29.760|
                  |L29.746|
0002ea  2102              MOVS     r1,#2                 ;3215
0002ec  f2410007          MOV      r0,#0x1007            ;3215
0002f0  5501              STRB     r1,[r0,r4]            ;3215
0002f2  2002              MOVS     r0,#2                 ;3215
0002f4  e690              B        |L29.24|
                  |L29.758|
0002f6  e02b              B        |L29.848|
                  |L29.760|
0002f8  f2410014          MOV      r0,#0x1014            ;3216
0002fc  5106              STR      r6,[r0,r4]            ;3216
0002fe  f2410008          MOV      r0,#0x1008            ;3217
000302  5900              LDR      r0,[r0,r4]            ;3217
000304  eb000108          ADD      r1,r0,r8              ;3217
000308  f2410008          MOV      r0,#0x1008            ;3217
00030c  5101              STR      r1,[r0,r4]            ;3217
00030e  eba50508          SUB      r5,r5,r8              ;3218
                  |L29.786|
000312  4545              CMP      r5,r8                 ;3204
000314  d8c0              BHI      |L29.664|
                  |L29.790|
000316  bf00              NOP                            ;3209
000318  f2410008          MOV      r0,#0x1008            ;3220
00031c  5900              LDR      r0,[r0,r4]            ;3220
00031e  1941              ADDS     r1,r0,r5              ;3220
000320  f2410008          MOV      r0,#0x1008            ;3220
000324  5101              STR      r1,[r0,r4]            ;3220
000326  f3c5000b          UBFX     r0,r5,#0,#12          ;3221
00032a  b188              CBZ      r0,|L29.848|
00032c  f44f5180          MOV      r1,#0x1000            ;3222
000330  5908              LDR      r0,[r1,r4]            ;3222
000332  4631              MOV      r1,r6                 ;3222
000334  f7fffffe          BL       clust2sect
000338  4683              MOV      r11,r0                ;3222
00033a  f1bb0f00          CMP      r11,#0                ;3223
00033e  d105              BNE      |L29.844|
000340  2102              MOVS     r1,#2                 ;3223
000342  f2410007          MOV      r0,#0x1007            ;3223
000346  5501              STRB     r1,[r0,r4]            ;3223
000348  2002              MOVS     r0,#2                 ;3223
00034a  e665              B        |L29.24|
                  |L29.844|
00034c  eb0b3b15          ADD      r11,r11,r5,LSR #12    ;3224
                  |L29.848|
000350  f2410008          MOV      r0,#0x1008            ;3228
000354  5b00              LDRH     r0,[r0,r4]            ;3228
000356  f3c0000b          UBFX     r0,r0,#0,#12          ;3228
00035a  b3c0              CBZ      r0,|L29.974|
00035c  f2410018          MOV      r0,#0x1018            ;3228
000360  5900              LDR      r0,[r0,r4]            ;3228
000362  4558              CMP      r0,r11                ;3228
000364  d038              BEQ      |L29.984|
000366  f2410006          MOV      r0,#0x1006            ;3231
00036a  5d00              LDRB     r0,[r0,r4]            ;3231
00036c  f0000040          AND      r0,r0,#0x40           ;3231
000370  b1d8              CBZ      r0,|L29.938|
000372  f2410118          MOV      r1,#0x1018            ;3232
000376  590a              LDR      r2,[r1,r4]            ;3232
000378  f44f5180          MOV      r1,#0x1000            ;3232
00037c  5909              LDR      r1,[r1,r4]            ;3232
00037e  f5015180          ADD      r1,r1,#0x1000         ;3232
000382  7848              LDRB     r0,[r1,#1]            ;3232
000384  2301              MOVS     r3,#1                 ;3232
000386  4621              MOV      r1,r4                 ;3232
000388  f7fffffe          BL       disk_write
00038c  b128              CBZ      r0,|L29.922|
00038e  2101              MOVS     r1,#1                 ;3233
000390  f2410007          MOV      r0,#0x1007            ;3233
000394  5501              STRB     r1,[r0,r4]            ;3233
000396  2001              MOVS     r0,#1                 ;3233
000398  e63e              B        |L29.24|
                  |L29.922|
00039a  f2410006          MOV      r0,#0x1006            ;3234
00039e  5d00              LDRB     r0,[r0,r4]            ;3234
0003a0  f0200140          BIC      r1,r0,#0x40           ;3234
0003a4  f2410006          MOV      r0,#0x1006            ;3234
0003a8  5501              STRB     r1,[r0,r4]            ;3234
                  |L29.938|
0003aa  f44f5180          MOV      r1,#0x1000            ;3237
0003ae  5909              LDR      r1,[r1,r4]            ;3237
0003b0  f5015180          ADD      r1,r1,#0x1000         ;3237
0003b4  7848              LDRB     r0,[r1,#1]            ;3237
0003b6  2301              MOVS     r3,#1                 ;3237
0003b8  465a              MOV      r2,r11                ;3237
0003ba  4621              MOV      r1,r4                 ;3237
0003bc  f7fffffe          BL       disk_read
0003c0  b130              CBZ      r0,|L29.976|
0003c2  2101              MOVS     r1,#1                 ;3238
0003c4  f2410007          MOV      r0,#0x1007            ;3238
0003c8  5501              STRB     r1,[r0,r4]            ;3238
0003ca  2001              MOVS     r0,#1                 ;3238
0003cc  e624              B        |L29.24|
                  |L29.974|
0003ce  e003              B        |L29.984|
                  |L29.976|
0003d0  f2410018          MOV      r0,#0x1018            ;3240
0003d4  f840b004          STR      r11,[r0,r4]           ;3240
                  |L29.984|
0003d8  f2410008          MOV      r0,#0x1008            ;3243
0003dc  5901              LDR      r1,[r0,r4]            ;3243
0003de  1d00              ADDS     r0,r0,#4              ;3243
0003e0  5900              LDR      r0,[r0,r4]            ;3243
0003e2  4281              CMP      r1,r0                 ;3243
0003e4  d90b              BLS      |L29.1022|
0003e6  f2410008          MOV      r0,#0x1008            ;3244
0003ea  5901              LDR      r1,[r0,r4]            ;3244
0003ec  1d00              ADDS     r0,r0,#4              ;3244
0003ee  5101              STR      r1,[r0,r4]            ;3244
0003f0  1f80              SUBS     r0,r0,#6              ;3245
0003f2  5d00              LDRB     r0,[r0,r4]            ;3245
0003f4  f0400120          ORR      r1,r0,#0x20           ;3245
0003f8  f2410006          MOV      r0,#0x1006            ;3245
0003fc  5501              STRB     r1,[r0,r4]            ;3245
                  |L29.1022|
0003fe  9806              LDR      r0,[sp,#0x18]         ;3250
000400  e60a              B        |L29.24|
;;;3252   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;3668   
;;;3669   FRESULT f_mkdir (
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;3670   	const TCHAR* path		/* Pointer to the directory path */
;;;3671   )
;;;3672   {
000004  f5ad5d84          SUB      sp,sp,#0x1080
;;;3673   	FRESULT res;
;;;3674   	DIR dj;
;;;3675   	BYTE *dir, n;
;;;3676   	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
000008  f7fffffe          BL       get_fattime
00000c  4606              MOV      r6,r0
;;;3677   	DEFINE_NAMEBUF;
;;;3678   
;;;3679   
;;;3680   	/* Get logical drive number */
;;;3681   	res = find_volume(&dj.fs, &path, 1);
00000e  2201              MOVS     r2,#1
000010  f50d5184          ADD      r1,sp,#0x1080
000014  f1a1002c          SUB      r0,r1,#0x2c
000018  f7fffffe          BL       find_volume
00001c  4605              MOV      r5,r0
;;;3682   	if (res == FR_OK) {
00001e  2d00              CMP      r5,#0
                  |L30.32|
000020  d17d              BNE      |L30.286|
;;;3683   		INIT_BUF(dj);
000022  a912              ADD      r1,sp,#0x48
000024  f50d5080          ADD      r0,sp,#0x1000
000028  66c1              STR      r1,[r0,#0x6c]
00002a  a905              ADD      r1,sp,#0x14
00002c  6741              STR      r1,[r0,#0x74]
;;;3684   		res = follow_path(&dj, path);			/* Follow the file path */
00002e  f8d01080          LDR      r1,[r0,#0x80]
000032  a815              ADD      r0,sp,#0x54
000034  f7fffffe          BL       follow_path
000038  4605              MOV      r5,r0
;;;3685   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
00003a  b905              CBNZ     r5,|L30.62|
00003c  2508              MOVS     r5,#8
                  |L30.62|
;;;3686   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
00003e  2d04              CMP      r5,#4
000040  d107              BNE      |L30.82|
000042  f50d5080          ADD      r0,sp,#0x1000
000046  6ec0              LDR      r0,[r0,#0x6c]
000048  7ac0              LDRB     r0,[r0,#0xb]
00004a  f0000020          AND      r0,r0,#0x20
00004e  b100              CBZ      r0,|L30.82|
;;;3687   			res = FR_INVALID_NAME;
000050  2506              MOVS     r5,#6
                  |L30.82|
;;;3688   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000052  2d04              CMP      r5,#4
000054  d1e4              BNE      |L30.32|
;;;3689   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
000056  f50d5180          ADD      r1,sp,#0x1000
00005a  6d48              LDR      r0,[r1,#0x54]
00005c  2100              MOVS     r1,#0
00005e  f7fffffe          BL       create_chain
000062  4607              MOV      r7,r0
;;;3690   			res = FR_OK;
000064  2500              MOVS     r5,#0
;;;3691   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000066  b907              CBNZ     r7,|L30.106|
000068  2507              MOVS     r5,#7
                  |L30.106|
;;;3692   			if (dcl == 1) res = FR_INT_ERR;
00006a  2f01              CMP      r7,#1
00006c  d100              BNE      |L30.112|
00006e  2502              MOVS     r5,#2
                  |L30.112|
;;;3693   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
000070  1c78              ADDS     r0,r7,#1
000072  b900              CBNZ     r0,|L30.118|
000074  2501              MOVS     r5,#1
                  |L30.118|
;;;3694   			if (res == FR_OK)					/* Flush FAT */
000076  b92d              CBNZ     r5,|L30.132|
;;;3695   				res = sync_window(dj.fs);
000078  f50d5180          ADD      r1,sp,#0x1000
00007c  6d48              LDR      r0,[r1,#0x54]
00007e  f7fffffe          BL       sync_window
000082  4605              MOV      r5,r0
                  |L30.132|
;;;3696   			if (res == FR_OK) {					/* Initialize the new directory table */
000084  2d00              CMP      r5,#0
000086  d174              BNE      |L30.370|
;;;3697   				dsc = clust2sect(dj.fs, dcl);
000088  f50d5180          ADD      r1,sp,#0x1000
00008c  6d48              LDR      r0,[r1,#0x54]
00008e  4639              MOV      r1,r7
000090  f7fffffe          BL       clust2sect
000094  4681              MOV      r9,r0
;;;3698   				dir = dj.fs->win.d8;
000096  f50d5080          ADD      r0,sp,#0x1000
00009a  6d44              LDR      r4,[r0,#0x54]
;;;3699   				mem_set(dir, 0, SS(dj.fs));
00009c  f44f5280          MOV      r2,#0x1000
0000a0  2100              MOVS     r1,#0
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       mem_set
;;;3700   				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
0000a8  220b              MOVS     r2,#0xb
0000aa  2120              MOVS     r1,#0x20
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       mem_set
;;;3701   				dir[DIR_Name] = '.';
0000b2  202e              MOVS     r0,#0x2e
0000b4  7020              STRB     r0,[r4,#0]
;;;3702   				dir[DIR_Attr] = AM_DIR;
0000b6  2010              MOVS     r0,#0x10
0000b8  72e0              STRB     r0,[r4,#0xb]
;;;3703   				ST_DWORD(dir + DIR_WrtTime, tm);
0000ba  75a6              STRB     r6,[r4,#0x16]
0000bc  0a31              LSRS     r1,r6,#8
0000be  75e1              STRB     r1,[r4,#0x17]
0000c0  0c31              LSRS     r1,r6,#16
0000c2  7621              STRB     r1,[r4,#0x18]
0000c4  0e31              LSRS     r1,r6,#24
0000c6  7661              STRB     r1,[r4,#0x19]
;;;3704   				st_clust(dir, dcl);
0000c8  4639              MOV      r1,r7
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       st_clust
;;;3705   				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
0000d0  2220              MOVS     r2,#0x20
0000d2  4621              MOV      r1,r4
0000d4  f1040020          ADD      r0,r4,#0x20
0000d8  f7fffffe          BL       mem_cpy
;;;3706   				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
0000dc  202e              MOVS     r0,#0x2e
0000de  f8840021          STRB     r0,[r4,#0x21]
0000e2  f50d5080          ADD      r0,sp,#0x1000
0000e6  f8d0a05c          LDR      r10,[r0,#0x5c]
;;;3707   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000ea  6d40              LDR      r0,[r0,#0x54]
0000ec  f5005080          ADD      r0,r0,#0x1000
0000f0  7800              LDRB     r0,[r0,#0]
0000f2  2803              CMP      r0,#3
0000f4  d108              BNE      |L30.264|
0000f6  f50d5080          ADD      r0,sp,#0x1000
0000fa  6d40              LDR      r0,[r0,#0x54]
0000fc  f5005080          ADD      r0,r0,#0x1000
000100  6a80              LDR      r0,[r0,#0x28]
000102  4550              CMP      r0,r10
000104  d100              BNE      |L30.264|
;;;3708   					pcl = 0;
000106  46aa              MOV      r10,r5
                  |L30.264|
;;;3709   				st_clust(dir + SZ_DIRE, pcl);
000108  4651              MOV      r1,r10
00010a  f1040020          ADD      r0,r4,#0x20
00010e  f7fffffe          BL       st_clust
;;;3710   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
000112  f50d5080          ADD      r0,sp,#0x1000
000116  6d40              LDR      r0,[r0,#0x54]
000118  f5005080          ADD      r0,r0,#0x1000
00011c  e000              B        |L30.288|
                  |L30.286|
00011e  e050              B        |L30.450|
                  |L30.288|
000120  f8908002          LDRB     r8,[r0,#2]
000124  e021              B        |L30.362|
                  |L30.294|
;;;3711   					dj.fs->winsect = dsc++;
000126  f50d5080          ADD      r0,sp,#0x1000
00012a  6d40              LDR      r0,[r0,#0x54]
00012c  f5005080          ADD      r0,r0,#0x1000
000130  f8c09030          STR      r9,[r0,#0x30]
000134  f1090901          ADD      r9,r9,#1
;;;3712   					dj.fs->wflag = 1;
000138  2101              MOVS     r1,#1
00013a  f50d5080          ADD      r0,sp,#0x1000
00013e  6d40              LDR      r0,[r0,#0x54]
000140  f5005080          ADD      r0,r0,#0x1000
000144  7101              STRB     r1,[r0,#4]
;;;3713   					res = sync_window(dj.fs);
000146  f50d5180          ADD      r1,sp,#0x1000
00014a  6d48              LDR      r0,[r1,#0x54]
00014c  f7fffffe          BL       sync_window
000150  4605              MOV      r5,r0
;;;3714   					if (res != FR_OK) break;
000152  b105              CBZ      r5,|L30.342|
000154  e00c              B        |L30.368|
                  |L30.342|
;;;3715   					mem_set(dir, 0, SS(dj.fs));
000156  f44f5280          MOV      r2,#0x1000
00015a  2100              MOVS     r1,#0
00015c  4620              MOV      r0,r4
00015e  f7fffffe          BL       mem_set
000162  f1a80001          SUB      r0,r8,#1              ;3710
000166  f00008ff          AND      r8,r0,#0xff           ;3710
                  |L30.362|
00016a  f1b80f00          CMP      r8,#0                 ;3710
00016e  d1da              BNE      |L30.294|
                  |L30.368|
000170  bf00              NOP                            ;3714
                  |L30.370|
;;;3716   				}
;;;3717   			}
;;;3718   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
000172  b91d              CBNZ     r5,|L30.380|
000174  a815              ADD      r0,sp,#0x54
000176  f7fffffe          BL       dir_register
00017a  4605              MOV      r5,r0
                  |L30.380|
;;;3719   			if (res != FR_OK) {
00017c  b135              CBZ      r5,|L30.396|
;;;3720   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
00017e  f50d5180          ADD      r1,sp,#0x1000
000182  6d48              LDR      r0,[r1,#0x54]
000184  4639              MOV      r1,r7
000186  f7fffffe          BL       remove_chain
00018a  e01a              B        |L30.450|
                  |L30.396|
;;;3721   			} else {
;;;3722   				dir = dj.dir;
00018c  f50d5080          ADD      r0,sp,#0x1000
000190  6e84              LDR      r4,[r0,#0x68]
;;;3723   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000192  2010              MOVS     r0,#0x10
000194  72e0              STRB     r0,[r4,#0xb]
;;;3724   				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
000196  75a6              STRB     r6,[r4,#0x16]
000198  0a31              LSRS     r1,r6,#8
00019a  75e1              STRB     r1,[r4,#0x17]
00019c  0c31              LSRS     r1,r6,#16
00019e  7621              STRB     r1,[r4,#0x18]
0001a0  0e31              LSRS     r1,r6,#24
0001a2  7661              STRB     r1,[r4,#0x19]
;;;3725   				st_clust(dir, dcl);					/* Table start cluster */
0001a4  4639              MOV      r1,r7
0001a6  4620              MOV      r0,r4
0001a8  f7fffffe          BL       st_clust
;;;3726   				dj.fs->wflag = 1;
0001ac  2201              MOVS     r2,#1
0001ae  f50d5180          ADD      r1,sp,#0x1000
0001b2  6d48              LDR      r0,[r1,#0x54]
0001b4  f5005080          ADD      r0,r0,#0x1000
0001b8  7102              STRB     r2,[r0,#4]
;;;3727   				res = sync_fs(dj.fs);
0001ba  6d48              LDR      r0,[r1,#0x54]
0001bc  f7fffffe          BL       sync_fs
0001c0  4605              MOV      r5,r0
                  |L30.450|
;;;3728   			}
;;;3729   		}
;;;3730   		FREE_BUF();
;;;3731   	}
;;;3732   
;;;3733   	LEAVE_FF(dj.fs, res);
0001c2  4628              MOV      r0,r5
;;;3734   }
0001c4  b021              ADD      sp,sp,#0x84
0001c6  f50d5d80          ADD      sp,sp,#0x1000
0001ca  e8bd8ff0          POP      {r4-r11,pc}
;;;3735   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;4137   
;;;4138   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;4139   	const TCHAR* path,	/* Logical drive number */
;;;4140   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;4141   	UINT au				/* Size of allocation unit in unit of byte or sector */
;;;4142   )
;;;4143   {
000004  b092              SUB      sp,sp,#0x48
000006  4691              MOV      r9,r2
;;;4144   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;4145   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;4146   	int vol;
;;;4147   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;4148   	DWORD n_clst, vs, n, wsect;
;;;4149   	UINT i;
;;;4150   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;4151   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;4152   	FATFS *fs;
;;;4153   	DSTATUS stat;
;;;4154   #if _USE_TRIM
;;;4155   	DWORD eb[2];
;;;4156   #endif
;;;4157   
;;;4158   
;;;4159   	/* Check mounted drive and clear work area */
;;;4160   	if (sfd > 1) return FR_INVALID_PARAMETER;
000008  9813              LDR      r0,[sp,#0x4c]
00000a  2801              CMP      r0,#1
00000c  dd03              BLE      |L31.22|
00000e  2013              MOVS     r0,#0x13
                  |L31.16|
;;;4161   	vol = get_ldnumber(&path);
;;;4162   	if (vol < 0) return FR_INVALID_DRIVE;
;;;4163   	fs = FatFs[vol];
;;;4164   	if (!fs) return FR_NOT_ENABLED;
;;;4165   	fs->fs_type = 0;
;;;4166   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4167   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4168   
;;;4169   	/* Get disk statics */
;;;4170   	stat = disk_initialize(pdrv);
;;;4171   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4172   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4173   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4174   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4175   		return FR_DISK_ERR;
;;;4176   #endif
;;;4177   	if (_MULTI_PARTITION && part) {
;;;4178   		/* Get partition information from partition table in the MBR */
;;;4179   		if (disk_read(pdrv, fs->win.d8, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;4180   		if (LD_WORD(fs->win.d8 + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4181   		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
;;;4182   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4183   		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
;;;4184   		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
;;;4185   	} else {
;;;4186   		/* Create a partition in this function */
;;;4187   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4188   			return FR_DISK_ERR;
;;;4189   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4190   		n_vol -= b_vol;				/* Volume size */
;;;4191   	}
;;;4192   
;;;4193   	if (au & (au - 1)) au = 0;
;;;4194   	if (!au) {						/* AU auto selection */
;;;4195   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4196   		for (i = 0; vs < vst[i]; i++) ;
;;;4197   		au = cst[i];
;;;4198   	}
;;;4199   	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
;;;4200   	if (!au) au = 1;
;;;4201   	if (au > 128) au = 128;
;;;4202   
;;;4203   	/* Pre-compute number of clusters and FAT sub-type */
;;;4204   	n_clst = n_vol / au;
;;;4205   	fmt = FS_FAT12;
;;;4206   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4207   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4208   
;;;4209   	/* Determine offset and size of FAT structure */
;;;4210   	if (fmt == FS_FAT32) {
;;;4211   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4212   		n_rsv = 32;
;;;4213   		n_dir = 0;
;;;4214   	} else {
;;;4215   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4216   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4217   		n_rsv = 1;
;;;4218   		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
;;;4219   	}
;;;4220   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4221   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4222   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4223   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4224   
;;;4225   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4226   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4227   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4228   	n = (n - b_data) / N_FATS;
;;;4229   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4230   		n_rsv += n;
;;;4231   		b_fat += n;
;;;4232   	} else {					/* FAT12/16: Expand FAT size */
;;;4233   		n_fat += n;
;;;4234   	}
;;;4235   
;;;4236   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4237   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4238   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4239   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4240   		return FR_MKFS_ABORTED;
;;;4241   
;;;4242   	/* Determine system ID in the partition table */
;;;4243   	if (fmt == FS_FAT32) {
;;;4244   		sys = 0x0C;		/* FAT32X */
;;;4245   	} else {
;;;4246   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4247   			sys = 0x01;	/* FAT12(<65536) */
;;;4248   		} else {
;;;4249   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4250   		}
;;;4251   	}
;;;4252   
;;;4253   	if (_MULTI_PARTITION && part) {
;;;4254   		/* Update system ID in the partition table */
;;;4255   		tbl = &fs->win.d8[MBR_Table + (part - 1) * SZ_PTE];
;;;4256   		tbl[4] = sys;
;;;4257   		if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to teh MBR */
;;;4258   			return FR_DISK_ERR;
;;;4259   		md = 0xF8;
;;;4260   	} else {
;;;4261   		if (sfd) {	/* No partition table (SFD) */
;;;4262   			md = 0xF0;
;;;4263   		} else {	/* Create partition table (FDISK) */
;;;4264   			mem_set(fs->win.d8, 0, SS(fs));
;;;4265   			tbl = fs->win.d8 + MBR_Table;	/* Create partition table for single partition in the drive */
;;;4266   			tbl[1] = 1;						/* Partition start head */
;;;4267   			tbl[2] = 1;						/* Partition start sector */
;;;4268   			tbl[3] = 0;						/* Partition start cylinder */
;;;4269   			tbl[4] = sys;					/* System type */
;;;4270   			tbl[5] = 254;					/* Partition end head */
;;;4271   			n = (b_vol + n_vol) / 63 / 255;
;;;4272   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4273   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4274   			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
;;;4275   			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
;;;4276   			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);	/* MBR signature */
;;;4277   			if (disk_write(pdrv, fs->win.d8, 0, 1) != RES_OK)	/* Write it to the MBR */
;;;4278   				return FR_DISK_ERR;
;;;4279   			md = 0xF8;
;;;4280   		}
;;;4281   	}
;;;4282   
;;;4283   	/* Create BPB in the VBR */
;;;4284   	tbl = fs->win.d8;							/* Clear sector */
;;;4285   	mem_set(tbl, 0, SS(fs));
;;;4286   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4287   	i = SS(fs);								/* Sector size */
;;;4288   	ST_WORD(tbl + BPB_BytsPerSec, i);
;;;4289   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4290   	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
;;;4291   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4292   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4293   	ST_WORD(tbl + BPB_RootEntCnt, i);
;;;4294   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4295   		ST_WORD(tbl + BPB_TotSec16, n_vol);
;;;4296   	} else {
;;;4297   		ST_DWORD(tbl + BPB_TotSec32, n_vol);
;;;4298   	}
;;;4299   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4300   	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
;;;4301   	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
;;;4302   	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4303   	n = GET_FATTIME();						/* Use current time as VSN */
;;;4304   	if (fmt == FS_FAT32) {
;;;4305   		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
;;;4306   		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4307   		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
;;;4308   		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
;;;4309   		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
;;;4310   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4311   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4312   		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4313   	} else {
;;;4314   		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
;;;4315   		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4316   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4317   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4318   		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4319   	}
;;;4320   	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4321   	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
;;;4322   		return FR_DISK_ERR;
;;;4323   	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
;;;4324   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4325   
;;;4326   	/* Initialize FAT area */
;;;4327   	wsect = b_fat;
;;;4328   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4329   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4330   		n = md;								/* Media descriptor byte */
;;;4331   		if (fmt != FS_FAT32) {
;;;4332   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4333   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
;;;4334   		} else {
;;;4335   			n |= 0xFFFFFF00;
;;;4336   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
;;;4337   			ST_DWORD(tbl + 4, 0xFFFFFFFF);
;;;4338   			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4339   		}
;;;4340   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4341   			return FR_DISK_ERR;
;;;4342   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4343   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4344   			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4345   				return FR_DISK_ERR;
;;;4346   		}
;;;4347   	}
;;;4348   
;;;4349   	/* Initialize root directory */
;;;4350   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4351   	do {
;;;4352   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4353   			return FR_DISK_ERR;
;;;4354   	} while (--i);
;;;4355   
;;;4356   #if _USE_TRIM	/* Erase data area if needed */
;;;4357   	{
;;;4358   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4359   		disk_ioctl(pdrv, CTRL_TRIM, eb);
;;;4360   	}
;;;4361   #endif
;;;4362   
;;;4363   	/* Create FSINFO if needed */
;;;4364   	if (fmt == FS_FAT32) {
;;;4365   		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
;;;4366   		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
;;;4367   		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4368   		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
;;;4369   		ST_WORD(tbl + BS_55AA, 0xAA55);
;;;4370   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
;;;4371   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
;;;4372   	}
;;;4373   
;;;4374   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4375   }
000010  b015              ADD      sp,sp,#0x54
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L31.22|
000016  a812              ADD      r0,sp,#0x48           ;4161
000018  f7fffffe          BL       get_ldnumber
00001c  9011              STR      r0,[sp,#0x44]         ;4161
00001e  9811              LDR      r0,[sp,#0x44]         ;4162
000020  2800              CMP      r0,#0                 ;4162
000022  da01              BGE      |L31.40|
000024  200b              MOVS     r0,#0xb               ;4162
000026  e7f3              B        |L31.16|
                  |L31.40|
000028  49fe              LDR      r1,|L31.1060|
00002a  9811              LDR      r0,[sp,#0x44]         ;4163
00002c  f8516020          LDR      r6,[r1,r0,LSL #2]     ;4163
000030  b90e              CBNZ     r6,|L31.54|
000032  200c              MOVS     r0,#0xc               ;4164
000034  e7ec              B        |L31.16|
                  |L31.54|
000036  2100              MOVS     r1,#0                 ;4165
000038  f44f5080          MOV      r0,#0x1000            ;4165
00003c  5581              STRB     r1,[r0,r6]            ;4165
00003e  9811              LDR      r0,[sp,#0x44]         ;4166
000040  b2c0              UXTB     r0,r0                 ;4166
000042  900e              STR      r0,[sp,#0x38]         ;4166
000044  2000              MOVS     r0,#0                 ;4167
000046  900d              STR      r0,[sp,#0x34]         ;4167
000048  980e              LDR      r0,[sp,#0x38]         ;4170
00004a  f7fffffe          BL       disk_initialize
00004e  9003              STR      r0,[sp,#0xc]          ;4170
000050  9803              LDR      r0,[sp,#0xc]          ;4171
000052  f0000001          AND      r0,r0,#1              ;4171
000056  b108              CBZ      r0,|L31.92|
000058  2003              MOVS     r0,#3                 ;4171
00005a  e7d9              B        |L31.16|
                  |L31.92|
00005c  9803              LDR      r0,[sp,#0xc]          ;4172
00005e  f0000004          AND      r0,r0,#4              ;4172
000062  b108              CBZ      r0,|L31.104|
000064  200a              MOVS     r0,#0xa               ;4172
000066  e7d3              B        |L31.16|
                  |L31.104|
000068  bf00              NOP                            ;4177
00006a  aa06              ADD      r2,sp,#0x18           ;4187
00006c  2101              MOVS     r1,#1                 ;4187
00006e  980e              LDR      r0,[sp,#0x38]         ;4187
000070  f7fffffe          BL       disk_ioctl
000074  b910              CBNZ     r0,|L31.124|
000076  9806              LDR      r0,[sp,#0x18]         ;4187
000078  2880              CMP      r0,#0x80              ;4187
00007a  d201              BCS      |L31.128|
                  |L31.124|
00007c  2001              MOVS     r0,#1                 ;4188
00007e  e7c7              B        |L31.16|
                  |L31.128|
000080  9813              LDR      r0,[sp,#0x4c]         ;4189
000082  b108              CBZ      r0,|L31.136|
000084  2000              MOVS     r0,#0                 ;4189
000086  e000              B        |L31.138|
                  |L31.136|
000088  203f              MOVS     r0,#0x3f              ;4189
                  |L31.138|
00008a  4682              MOV      r10,r0                ;4189
00008c  9806              LDR      r0,[sp,#0x18]         ;4190
00008e  eba0000a          SUB      r0,r0,r10             ;4190
000092  9006              STR      r0,[sp,#0x18]         ;4190
000094  f1a90001          SUB      r0,r9,#1              ;4193
000098  ea000009          AND      r0,r0,r9              ;4193
00009c  b108              CBZ      r0,|L31.162|
00009e  f04f0900          MOV      r9,#0                 ;4193
                  |L31.162|
0000a2  f1b90f00          CMP      r9,#0                 ;4194
0000a6  d112              BNE      |L31.206|
0000a8  21fa              MOVS     r1,#0xfa              ;4195
0000aa  9806              LDR      r0,[sp,#0x18]         ;4195
0000ac  fbb0f0f1          UDIV     r0,r0,r1              ;4195
0000b0  900c              STR      r0,[sp,#0x30]         ;4195
0000b2  f04f0b00          MOV      r11,#0                ;4196
0000b6  e001              B        |L31.188|
                  |L31.184|
0000b8  f10b0b01          ADD      r11,r11,#1            ;4196
                  |L31.188|
0000bc  48da              LDR      r0,|L31.1064|
0000be  f830101b          LDRH     r1,[r0,r11,LSL #1]    ;4196
0000c2  980c              LDR      r0,[sp,#0x30]         ;4196
0000c4  4281              CMP      r1,r0                 ;4196
0000c6  d8f7              BHI      |L31.184|
0000c8  48d8              LDR      r0,|L31.1068|
0000ca  f830901b          LDRH     r9,[r0,r11,LSL #1]    ;4197
                  |L31.206|
0000ce  f5b95f80          CMP      r9,#0x1000            ;4199
0000d2  d301              BCC      |L31.216|
0000d4  ea4f3919          LSR      r9,r9,#12             ;4199
                  |L31.216|
0000d8  f1b90f00          CMP      r9,#0                 ;4200
0000dc  d101              BNE      |L31.226|
0000de  f04f0901          MOV      r9,#1                 ;4200
                  |L31.226|
0000e2  f1b90f80          CMP      r9,#0x80              ;4201
0000e6  d901              BLS      |L31.236|
0000e8  f04f0980          MOV      r9,#0x80              ;4201
                  |L31.236|
0000ec  9806              LDR      r0,[sp,#0x18]         ;4204
0000ee  fbb0f7f9          UDIV     r7,r0,r9              ;4204
0000f2  2501              MOVS     r5,#1                 ;4205
0000f4  f64070f6          MOV      r0,#0xff6             ;4206
0000f8  4287              CMP      r7,r0                 ;4206
0000fa  d300              BCC      |L31.254|
0000fc  2502              MOVS     r5,#2                 ;4206
                  |L31.254|
0000fe  f64f70f6          MOV      r0,#0xfff6            ;4207
000102  4287              CMP      r7,r0                 ;4207
000104  d300              BCC      |L31.264|
000106  2503              MOVS     r5,#3                 ;4207
                  |L31.264|
000108  2d03              CMP      r5,#3                 ;4210
00010a  d10b              BNE      |L31.292|
00010c  2008              MOVS     r0,#8                 ;4211
00010e  eb000087          ADD      r0,r0,r7,LSL #2       ;4211
000112  f60070ff          ADD      r0,r0,#0xfff          ;4211
000116  ea4f3810          LSR      r8,r0,#12             ;4211
00011a  2020              MOVS     r0,#0x20              ;4212
00011c  9005              STR      r0,[sp,#0x14]         ;4212
00011e  2000              MOVS     r0,#0                 ;4213
000120  9004              STR      r0,[sp,#0x10]         ;4213
000122  e012              B        |L31.330|
                  |L31.292|
000124  2d01              CMP      r5,#1                 ;4215
000126  d105              BNE      |L31.308|
000128  eb070047          ADD      r0,r7,r7,LSL #1       ;4215
00012c  1c40              ADDS     r0,r0,#1              ;4215
00012e  0840              LSRS     r0,r0,#1              ;4215
000130  1cc0              ADDS     r0,r0,#3              ;4215
000132  e001              B        |L31.312|
                  |L31.308|
000134  0078              LSLS     r0,r7,#1              ;4215
000136  1d00              ADDS     r0,r0,#4              ;4215
                  |L31.312|
000138  4680              MOV      r8,r0                 ;4215
00013a  f60870ff          ADD      r0,r8,#0xfff          ;4216
00013e  ea4f3810          LSR      r8,r0,#12             ;4216
000142  2001              MOVS     r0,#1                 ;4217
000144  9005              STR      r0,[sp,#0x14]         ;4217
000146  2004              MOVS     r0,#4                 ;4218
000148  9004              STR      r0,[sp,#0x10]         ;4218
                  |L31.330|
00014a  9805              LDR      r0,[sp,#0x14]         ;4220
00014c  4450              ADD      r0,r0,r10             ;4220
00014e  9009              STR      r0,[sp,#0x24]         ;4220
000150  9809              LDR      r0,[sp,#0x24]         ;4221
000152  4440              ADD      r0,r0,r8              ;4221
000154  9008              STR      r0,[sp,#0x20]         ;4221
000156  9904              LDR      r1,[sp,#0x10]         ;4222
000158  9808              LDR      r0,[sp,#0x20]         ;4222
00015a  4408              ADD      r0,r0,r1              ;4222
00015c  9007              STR      r0,[sp,#0x1c]         ;4222
00015e  9807              LDR      r0,[sp,#0x1c]         ;4223
000160  4448              ADD      r0,r0,r9              ;4223
000162  eba0000a          SUB      r0,r0,r10             ;4223
000166  9906              LDR      r1,[sp,#0x18]         ;4223
000168  4288              CMP      r0,r1                 ;4223
00016a  d901              BLS      |L31.368|
00016c  200e              MOVS     r0,#0xe               ;4223
00016e  e74f              B        |L31.16|
                  |L31.368|
000170  aa0b              ADD      r2,sp,#0x2c           ;4226
000172  2103              MOVS     r1,#3                 ;4226
000174  980e              LDR      r0,[sp,#0x38]         ;4226
000176  f7fffffe          BL       disk_ioctl
00017a  b928              CBNZ     r0,|L31.392|
00017c  980b              LDR      r0,[sp,#0x2c]         ;4226
00017e  b118              CBZ      r0,|L31.392|
000180  980b              LDR      r0,[sp,#0x2c]         ;4226
000182  f5b04f00          CMP      r0,#0x8000            ;4226
000186  d901              BLS      |L31.396|
                  |L31.392|
000188  2001              MOVS     r0,#1                 ;4226
00018a  900b              STR      r0,[sp,#0x2c]         ;4226
                  |L31.396|
00018c  990b              LDR      r1,[sp,#0x2c]         ;4227
00018e  9807              LDR      r0,[sp,#0x1c]         ;4227
000190  4408              ADD      r0,r0,r1              ;4227
000192  1e40              SUBS     r0,r0,#1              ;4227
000194  1e49              SUBS     r1,r1,#1              ;4227
000196  4388              BICS     r0,r0,r1              ;4227
000198  900b              STR      r0,[sp,#0x2c]         ;4227
00019a  990b              LDR      r1,[sp,#0x2c]         ;4228
00019c  9807              LDR      r0,[sp,#0x1c]         ;4228
00019e  1a08              SUBS     r0,r1,r0              ;4228
0001a0  900b              STR      r0,[sp,#0x2c]         ;4228
0001a2  2d03              CMP      r5,#3                 ;4229
0001a4  d108              BNE      |L31.440|
0001a6  990b              LDR      r1,[sp,#0x2c]         ;4230
0001a8  9805              LDR      r0,[sp,#0x14]         ;4230
0001aa  4408              ADD      r0,r0,r1              ;4230
0001ac  9005              STR      r0,[sp,#0x14]         ;4230
0001ae  990b              LDR      r1,[sp,#0x2c]         ;4231
0001b0  9809              LDR      r0,[sp,#0x24]         ;4231
0001b2  4408              ADD      r0,r0,r1              ;4231
0001b4  9009              STR      r0,[sp,#0x24]         ;4231
0001b6  e001              B        |L31.444|
                  |L31.440|
0001b8  980b              LDR      r0,[sp,#0x2c]         ;4233
0001ba  4480              ADD      r8,r8,r0              ;4233
                  |L31.444|
0001bc  e9dd0105          LDRD     r0,r1,[sp,#0x14]      ;4237
0001c0  1a08              SUBS     r0,r1,r0              ;4237
0001c2  eba00108          SUB      r1,r0,r8              ;4237
0001c6  9804              LDR      r0,[sp,#0x10]         ;4237
0001c8  1a08              SUBS     r0,r1,r0              ;4237
0001ca  fbb0f7f9          UDIV     r7,r0,r9              ;4237
0001ce  2d02              CMP      r5,#2                 ;4238
0001d0  d103              BNE      |L31.474|
0001d2  f64070f6          MOV      r0,#0xff6             ;4238
0001d6  4287              CMP      r7,r0                 ;4238
0001d8  d305              BCC      |L31.486|
                  |L31.474|
0001da  2d03              CMP      r5,#3                 ;4239
0001dc  d105              BNE      |L31.490|
0001de  f64f70f6          MOV      r0,#0xfff6            ;4239
0001e2  4287              CMP      r7,r0                 ;4239
0001e4  d201              BCS      |L31.490|
                  |L31.486|
0001e6  200e              MOVS     r0,#0xe               ;4240
0001e8  e712              B        |L31.16|
                  |L31.490|
0001ea  2d03              CMP      r5,#3                 ;4243
0001ec  d102              BNE      |L31.500|
0001ee  200c              MOVS     r0,#0xc               ;4244
0001f0  900f              STR      r0,[sp,#0x3c]         ;4244
0001f2  e010              B        |L31.534|
                  |L31.500|
0001f4  2d01              CMP      r5,#1                 ;4246
0001f6  d106              BNE      |L31.518|
0001f8  9806              LDR      r0,[sp,#0x18]         ;4246
0001fa  f5b03f80          CMP      r0,#0x10000           ;4246
0001fe  d202              BCS      |L31.518|
000200  2001              MOVS     r0,#1                 ;4247
000202  900f              STR      r0,[sp,#0x3c]         ;4247
000204  e007              B        |L31.534|
                  |L31.518|
000206  9806              LDR      r0,[sp,#0x18]         ;4249
000208  f5b03f80          CMP      r0,#0x10000           ;4249
00020c  d201              BCS      |L31.530|
00020e  2004              MOVS     r0,#4                 ;4249
000210  e000              B        |L31.532|
                  |L31.530|
000212  2006              MOVS     r0,#6                 ;4249
                  |L31.532|
000214  900f              STR      r0,[sp,#0x3c]         ;4249
                  |L31.534|
000216  bf00              NOP                            ;4253
000218  9813              LDR      r0,[sp,#0x4c]         ;4261
00021a  b110              CBZ      r0,|L31.546|
00021c  20f0              MOVS     r0,#0xf0              ;4262
00021e  9010              STR      r0,[sp,#0x40]         ;4262
000220  e043              B        |L31.682|
                  |L31.546|
000222  f44f5280          MOV      r2,#0x1000            ;4264
000226  2100              MOVS     r1,#0                 ;4264
000228  4630              MOV      r0,r6                 ;4264
00022a  f7fffffe          BL       mem_set
00022e  f50674df          ADD      r4,r6,#0x1be          ;4265
000232  2001              MOVS     r0,#1                 ;4266
000234  7060              STRB     r0,[r4,#1]            ;4266
000236  70a0              STRB     r0,[r4,#2]            ;4267
000238  2000              MOVS     r0,#0                 ;4268
00023a  70e0              STRB     r0,[r4,#3]            ;4268
00023c  980f              LDR      r0,[sp,#0x3c]         ;4269
00023e  7120              STRB     r0,[r4,#4]            ;4269
000240  20fe              MOVS     r0,#0xfe              ;4270
000242  7160              STRB     r0,[r4,#5]            ;4270
000244  9806              LDR      r0,[sp,#0x18]         ;4271
000246  4450              ADD      r0,r0,r10             ;4271
000248  213f              MOVS     r1,#0x3f              ;4271
00024a  fbb0f0f1          UDIV     r0,r0,r1              ;4271
00024e  21ff              MOVS     r1,#0xff              ;4271
000250  fbb0f0f1          UDIV     r0,r0,r1              ;4271
000254  900b              STR      r0,[sp,#0x2c]         ;4271
000256  213f              MOVS     r1,#0x3f              ;4272
000258  980b              LDR      r0,[sp,#0x2c]         ;4272
00025a  ea410090          ORR      r0,r1,r0,LSR #2       ;4272
00025e  71a0              STRB     r0,[r4,#6]            ;4272
000260  980b              LDR      r0,[sp,#0x2c]         ;4273
000262  71e0              STRB     r0,[r4,#7]            ;4273
000264  203f              MOVS     r0,#0x3f              ;4274
000266  7220              STRB     r0,[r4,#8]            ;4274
000268  2100              MOVS     r1,#0                 ;4274
00026a  7261              STRB     r1,[r4,#9]            ;4274
00026c  72a1              STRB     r1,[r4,#0xa]          ;4274
00026e  72e1              STRB     r1,[r4,#0xb]          ;4274
000270  9806              LDR      r0,[sp,#0x18]         ;4275
000272  7320              STRB     r0,[r4,#0xc]          ;4275
000274  9806              LDR      r0,[sp,#0x18]         ;4275
000276  0a01              LSRS     r1,r0,#8              ;4275
000278  7361              STRB     r1,[r4,#0xd]          ;4275
00027a  9806              LDR      r0,[sp,#0x18]         ;4275
00027c  0c01              LSRS     r1,r0,#16             ;4275
00027e  73a1              STRB     r1,[r4,#0xe]          ;4275
000280  9806              LDR      r0,[sp,#0x18]         ;4275
000282  0e01              LSRS     r1,r0,#24             ;4275
000284  73e1              STRB     r1,[r4,#0xf]          ;4275
000286  2055              MOVS     r0,#0x55              ;4276
000288  f88601fe          STRB     r0,[r6,#0x1fe]        ;4276
00028c  21aa              MOVS     r1,#0xaa              ;4276
00028e  f24010ff          MOV      r0,#0x1ff             ;4276
000292  5581              STRB     r1,[r0,r6]            ;4276
000294  2301              MOVS     r3,#1                 ;4277
000296  2200              MOVS     r2,#0                 ;4277
000298  4631              MOV      r1,r6                 ;4277
00029a  980e              LDR      r0,[sp,#0x38]         ;4277
00029c  f7fffffe          BL       disk_write
0002a0  b108              CBZ      r0,|L31.678|
0002a2  2001              MOVS     r0,#1                 ;4278
0002a4  e6b4              B        |L31.16|
                  |L31.678|
0002a6  20f8              MOVS     r0,#0xf8              ;4279
0002a8  9010              STR      r0,[sp,#0x40]         ;4279
                  |L31.682|
0002aa  4634              MOV      r4,r6                 ;4284
0002ac  f44f5280          MOV      r2,#0x1000            ;4285
0002b0  2100              MOVS     r1,#0                 ;4285
0002b2  4620              MOV      r0,r4                 ;4285
0002b4  f7fffffe          BL       mem_set
0002b8  220b              MOVS     r2,#0xb               ;4286
0002ba  a15d              ADR      r1,|L31.1072|
0002bc  4620              MOV      r0,r4                 ;4286
0002be  f7fffffe          BL       mem_cpy
0002c2  f44f5b80          MOV      r11,#0x1000           ;4287
0002c6  f884b00b          STRB     r11,[r4,#0xb]         ;4288
0002ca  ea4f211b          LSR      r1,r11,#8             ;4288
0002ce  7321              STRB     r1,[r4,#0xc]          ;4288
0002d0  f884900d          STRB     r9,[r4,#0xd]          ;4289
0002d4  9805              LDR      r0,[sp,#0x14]         ;4290
0002d6  73a0              STRB     r0,[r4,#0xe]          ;4290
0002d8  9805              LDR      r0,[sp,#0x14]         ;4290
0002da  0a01              LSRS     r1,r0,#8              ;4290
0002dc  73e1              STRB     r1,[r4,#0xf]          ;4290
0002de  2001              MOVS     r0,#1                 ;4291
0002e0  7420              STRB     r0,[r4,#0x10]         ;4291
0002e2  2d03              CMP      r5,#3                 ;4292
0002e4  d101              BNE      |L31.746|
0002e6  2000              MOVS     r0,#0                 ;4292
0002e8  e001              B        |L31.750|
                  |L31.746|
0002ea  f44f7000          MOV      r0,#0x200             ;4292
                  |L31.750|
0002ee  4683              MOV      r11,r0                ;4292
0002f0  f884b011          STRB     r11,[r4,#0x11]        ;4293
0002f4  ea4f211b          LSR      r1,r11,#8             ;4293
0002f8  74a1              STRB     r1,[r4,#0x12]         ;4293
0002fa  9806              LDR      r0,[sp,#0x18]         ;4294
0002fc  f5b03f80          CMP      r0,#0x10000           ;4294
000300  d205              BCS      |L31.782|
000302  9806              LDR      r0,[sp,#0x18]         ;4295
000304  74e0              STRB     r0,[r4,#0x13]         ;4295
000306  9806              LDR      r0,[sp,#0x18]         ;4295
000308  0a01              LSRS     r1,r0,#8              ;4295
00030a  7521              STRB     r1,[r4,#0x14]         ;4295
00030c  e010              B        |L31.816|
                  |L31.782|
00030e  9806              LDR      r0,[sp,#0x18]         ;4297
000310  f8840020          STRB     r0,[r4,#0x20]         ;4297
000314  9806              LDR      r0,[sp,#0x18]         ;4297
000316  f3c02107          UBFX     r1,r0,#8,#8           ;4297
00031a  2021              MOVS     r0,#0x21              ;4297
00031c  5501              STRB     r1,[r0,r4]            ;4297
00031e  9806              LDR      r0,[sp,#0x18]         ;4297
000320  f3c04107          UBFX     r1,r0,#16,#8          ;4297
000324  2022              MOVS     r0,#0x22              ;4297
000326  5501              STRB     r1,[r0,r4]            ;4297
000328  9806              LDR      r0,[sp,#0x18]         ;4297
00032a  0e01              LSRS     r1,r0,#24             ;4297
00032c  2023              MOVS     r0,#0x23              ;4297
00032e  5501              STRB     r1,[r0,r4]            ;4297
                  |L31.816|
000330  9810              LDR      r0,[sp,#0x40]         ;4299
000332  7560              STRB     r0,[r4,#0x15]         ;4299
000334  203f              MOVS     r0,#0x3f              ;4300
000336  7620              STRB     r0,[r4,#0x18]         ;4300
000338  2100              MOVS     r1,#0                 ;4300
00033a  7661              STRB     r1,[r4,#0x19]         ;4300
00033c  20ff              MOVS     r0,#0xff              ;4301
00033e  76a0              STRB     r0,[r4,#0x1a]         ;4301
000340  76e1              STRB     r1,[r4,#0x1b]         ;4301
000342  f884a01c          STRB     r10,[r4,#0x1c]        ;4302
000346  ea4f211a          LSR      r1,r10,#8             ;4302
00034a  7761              STRB     r1,[r4,#0x1d]         ;4302
00034c  ea4f411a          LSR      r1,r10,#16            ;4302
000350  77a1              STRB     r1,[r4,#0x1e]         ;4302
000352  ea4f611a          LSR      r1,r10,#24            ;4302
000356  77e1              STRB     r1,[r4,#0x1f]         ;4302
000358  f7fffffe          BL       get_fattime
00035c  900b              STR      r0,[sp,#0x2c]         ;4303
00035e  2d03              CMP      r5,#3                 ;4304
000360  d13f              BNE      |L31.994|
000362  980b              LDR      r0,[sp,#0x2c]         ;4305
000364  f8840043          STRB     r0,[r4,#0x43]         ;4305
000368  980b              LDR      r0,[sp,#0x2c]         ;4305
00036a  f3c02107          UBFX     r1,r0,#8,#8           ;4305
00036e  2044              MOVS     r0,#0x44              ;4305
000370  5501              STRB     r1,[r0,r4]            ;4305
000372  980b              LDR      r0,[sp,#0x2c]         ;4305
000374  f3c04107          UBFX     r1,r0,#16,#8          ;4305
000378  2045              MOVS     r0,#0x45              ;4305
00037a  5501              STRB     r1,[r0,r4]            ;4305
00037c  980b              LDR      r0,[sp,#0x2c]         ;4305
00037e  0e01              LSRS     r1,r0,#24             ;4305
000380  2046              MOVS     r0,#0x46              ;4305
000382  5501              STRB     r1,[r0,r4]            ;4305
000384  f8848024          STRB     r8,[r4,#0x24]         ;4306
000388  f3c82107          UBFX     r1,r8,#8,#8           ;4306
00038c  2025              MOVS     r0,#0x25              ;4306
00038e  5501              STRB     r1,[r0,r4]            ;4306
000390  f3c84107          UBFX     r1,r8,#16,#8          ;4306
000394  2026              MOVS     r0,#0x26              ;4306
000396  5501              STRB     r1,[r0,r4]            ;4306
000398  ea4f6118          LSR      r1,r8,#24             ;4306
00039c  2027              MOVS     r0,#0x27              ;4306
00039e  5501              STRB     r1,[r0,r4]            ;4306
0003a0  2002              MOVS     r0,#2                 ;4307
0003a2  f884002c          STRB     r0,[r4,#0x2c]         ;4307
0003a6  2100              MOVS     r1,#0                 ;4307
0003a8  202d              MOVS     r0,#0x2d              ;4307
0003aa  5501              STRB     r1,[r0,r4]            ;4307
0003ac  202e              MOVS     r0,#0x2e              ;4307
0003ae  5501              STRB     r1,[r0,r4]            ;4307
0003b0  202f              MOVS     r0,#0x2f              ;4307
0003b2  5501              STRB     r1,[r0,r4]            ;4307
0003b4  2001              MOVS     r0,#1                 ;4308
0003b6  f8840030          STRB     r0,[r4,#0x30]         ;4308
0003ba  2031              MOVS     r0,#0x31              ;4308
0003bc  5501              STRB     r1,[r0,r4]            ;4308
0003be  2006              MOVS     r0,#6                 ;4309
0003c0  f8840032          STRB     r0,[r4,#0x32]         ;4309
0003c4  2033              MOVS     r0,#0x33              ;4309
0003c6  5501              STRB     r1,[r0,r4]            ;4309
0003c8  2080              MOVS     r0,#0x80              ;4310
0003ca  f8840040          STRB     r0,[r4,#0x40]         ;4310
0003ce  2029              MOVS     r0,#0x29              ;4311
0003d0  f8840042          STRB     r0,[r4,#0x42]         ;4311
0003d4  2213              MOVS     r2,#0x13              ;4312
0003d6  a119              ADR      r1,|L31.1084|
0003d8  f1040047          ADD      r0,r4,#0x47           ;4312
0003dc  f7fffffe          BL       mem_cpy
0003e0  e042              B        |L31.1128|
                  |L31.994|
0003e2  980b              LDR      r0,[sp,#0x2c]         ;4314
0003e4  f8840027          STRB     r0,[r4,#0x27]         ;4314
0003e8  980b              LDR      r0,[sp,#0x2c]         ;4314
0003ea  f3c02107          UBFX     r1,r0,#8,#8           ;4314
0003ee  2028              MOVS     r0,#0x28              ;4314
0003f0  5501              STRB     r1,[r0,r4]            ;4314
0003f2  980b              LDR      r0,[sp,#0x2c]         ;4314
0003f4  f3c04107          UBFX     r1,r0,#16,#8          ;4314
0003f8  2029              MOVS     r0,#0x29              ;4314
0003fa  5501              STRB     r1,[r0,r4]            ;4314
0003fc  980b              LDR      r0,[sp,#0x2c]         ;4314
0003fe  0e01              LSRS     r1,r0,#24             ;4314
000400  202a              MOVS     r0,#0x2a              ;4314
000402  5501              STRB     r1,[r0,r4]            ;4314
000404  f8848016          STRB     r8,[r4,#0x16]         ;4315
000408  ea4f2118          LSR      r1,r8,#8              ;4315
00040c  75e1              STRB     r1,[r4,#0x17]         ;4315
00040e  2080              MOVS     r0,#0x80              ;4316
000410  f8840024          STRB     r0,[r4,#0x24]         ;4316
000414  2029              MOVS     r0,#0x29              ;4317
000416  f8840026          STRB     r0,[r4,#0x26]         ;4317
00041a  2213              MOVS     r2,#0x13              ;4318
00041c  a10c              ADR      r1,|L31.1104|
00041e  f104002b          ADD      r0,r4,#0x2b           ;4318
000422  e01f              B        |L31.1124|
                  |L31.1060|
                          DCD      FatFs
                  |L31.1064|
                          DCD      vst
                  |L31.1068|
                          DCD      ||cst||
                  |L31.1072|
000430  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
000434  53444f53
000438  352e3000
                  |L31.1084|
00043c  4e4f204e          DCB      "NO NAME    FAT32   ",0
000440  414d4520
000444  20202046
000448  41543332
00044c  20202000
                  |L31.1104|
000450  4e4f204e          DCB      "NO NAME    FAT     ",0
000454  414d4520
000458  20202046
00045c  41542020
000460  20202000
                  |L31.1124|
000464  f7fffffe          BL       mem_cpy
                  |L31.1128|
000468  2055              MOVS     r0,#0x55              ;4320
00046a  f88401fe          STRB     r0,[r4,#0x1fe]        ;4320
00046e  21aa              MOVS     r1,#0xaa              ;4320
000470  f24010ff          MOV      r0,#0x1ff             ;4320
000474  5501              STRB     r1,[r0,r4]            ;4320
000476  2301              MOVS     r3,#1                 ;4321
000478  4652              MOV      r2,r10                ;4321
00047a  4621              MOV      r1,r4                 ;4321
00047c  980e              LDR      r0,[sp,#0x38]         ;4321
00047e  f7fffffe          BL       disk_write
000482  b108              CBZ      r0,|L31.1160|
000484  2001              MOVS     r0,#1                 ;4322
000486  e5c3              B        |L31.16|
                  |L31.1160|
000488  2d03              CMP      r5,#3                 ;4323
00048a  d106              BNE      |L31.1178|
00048c  2301              MOVS     r3,#1                 ;4324
00048e  f10a0206          ADD      r2,r10,#6             ;4324
000492  4621              MOV      r1,r4                 ;4324
000494  980e              LDR      r0,[sp,#0x38]         ;4324
000496  f7fffffe          BL       disk_write
                  |L31.1178|
00049a  9809              LDR      r0,[sp,#0x24]         ;4327
00049c  900a              STR      r0,[sp,#0x28]         ;4327
00049e  f04f0b00          MOV      r11,#0                ;4328
0004a2  e061              B        |L31.1384|
                  |L31.1188|
0004a4  f44f5280          MOV      r2,#0x1000            ;4329
0004a8  2100              MOVS     r1,#0                 ;4329
0004aa  4620              MOV      r0,r4                 ;4329
0004ac  f7fffffe          BL       mem_set
0004b0  9810              LDR      r0,[sp,#0x40]         ;4330
0004b2  900b              STR      r0,[sp,#0x2c]         ;4330
0004b4  2d03              CMP      r5,#3                 ;4331
0004b6  d014              BEQ      |L31.1250|
0004b8  2d01              CMP      r5,#1                 ;4332
0004ba  d101              BNE      |L31.1216|
0004bc  486a              LDR      r0,|L31.1640|
0004be  e001              B        |L31.1220|
                  |L31.1216|
0004c0  f06f00ff          MVN      r0,#0xff              ;4332
                  |L31.1220|
0004c4  990b              LDR      r1,[sp,#0x2c]         ;4332
0004c6  4308              ORRS     r0,r0,r1              ;4332
0004c8  900b              STR      r0,[sp,#0x2c]         ;4332
0004ca  980b              LDR      r0,[sp,#0x2c]         ;4333
0004cc  7020              STRB     r0,[r4,#0]            ;4333
0004ce  980b              LDR      r0,[sp,#0x2c]         ;4333
0004d0  0a00              LSRS     r0,r0,#8              ;4333
0004d2  7060              STRB     r0,[r4,#1]            ;4333
0004d4  980b              LDR      r0,[sp,#0x2c]         ;4333
0004d6  0c00              LSRS     r0,r0,#16             ;4333
0004d8  70a0              STRB     r0,[r4,#2]            ;4333
0004da  980b              LDR      r0,[sp,#0x2c]         ;4333
0004dc  0e00              LSRS     r0,r0,#24             ;4333
0004de  70e0              STRB     r0,[r4,#3]            ;4333
0004e0  e019              B        |L31.1302|
                  |L31.1250|
0004e2  980b              LDR      r0,[sp,#0x2c]         ;4335
0004e4  f06000ff          ORN      r0,r0,#0xff           ;4335
0004e8  900b              STR      r0,[sp,#0x2c]         ;4335
0004ea  980b              LDR      r0,[sp,#0x2c]         ;4336
0004ec  7020              STRB     r0,[r4,#0]            ;4336
0004ee  980b              LDR      r0,[sp,#0x2c]         ;4336
0004f0  0a00              LSRS     r0,r0,#8              ;4336
0004f2  7060              STRB     r0,[r4,#1]            ;4336
0004f4  980b              LDR      r0,[sp,#0x2c]         ;4336
0004f6  0c00              LSRS     r0,r0,#16             ;4336
0004f8  70a0              STRB     r0,[r4,#2]            ;4336
0004fa  980b              LDR      r0,[sp,#0x2c]         ;4336
0004fc  0e00              LSRS     r0,r0,#24             ;4336
0004fe  70e0              STRB     r0,[r4,#3]            ;4336
000500  20ff              MOVS     r0,#0xff              ;4337
000502  7120              STRB     r0,[r4,#4]            ;4337
000504  21ff              MOVS     r1,#0xff              ;4337
000506  7161              STRB     r1,[r4,#5]            ;4337
000508  71a1              STRB     r1,[r4,#6]            ;4337
00050a  71e1              STRB     r1,[r4,#7]            ;4337
00050c  7220              STRB     r0,[r4,#8]            ;4338
00050e  7261              STRB     r1,[r4,#9]            ;4338
000510  72a1              STRB     r1,[r4,#0xa]          ;4338
000512  210f              MOVS     r1,#0xf               ;4338
000514  72e1              STRB     r1,[r4,#0xb]          ;4338
                  |L31.1302|
000516  980a              LDR      r0,[sp,#0x28]         ;4340
000518  1c41              ADDS     r1,r0,#1              ;4340
00051a  4602              MOV      r2,r0                 ;4340
00051c  2301              MOVS     r3,#1                 ;4340
00051e  910a              STR      r1,[sp,#0x28]         ;4340
000520  4621              MOV      r1,r4                 ;4340
000522  980e              LDR      r0,[sp,#0x38]         ;4340
000524  f7fffffe          BL       disk_write
000528  b108              CBZ      r0,|L31.1326|
00052a  2001              MOVS     r0,#1                 ;4341
00052c  e570              B        |L31.16|
                  |L31.1326|
00052e  f44f5280          MOV      r2,#0x1000            ;4342
000532  2100              MOVS     r1,#0                 ;4342
000534  4620              MOV      r0,r4                 ;4342
000536  f7fffffe          BL       mem_set
00053a  2001              MOVS     r0,#1                 ;4343
00053c  900b              STR      r0,[sp,#0x2c]         ;4343
00053e  e00e              B        |L31.1374|
                  |L31.1344|
000540  980a              LDR      r0,[sp,#0x28]         ;4344
000542  1c41              ADDS     r1,r0,#1              ;4344
000544  4602              MOV      r2,r0                 ;4344
000546  2301              MOVS     r3,#1                 ;4344
000548  910a              STR      r1,[sp,#0x28]         ;4344
00054a  4621              MOV      r1,r4                 ;4344
00054c  980e              LDR      r0,[sp,#0x38]         ;4344
00054e  f7fffffe          BL       disk_write
000552  b108              CBZ      r0,|L31.1368|
000554  2001              MOVS     r0,#1                 ;4345
000556  e55b              B        |L31.16|
                  |L31.1368|
000558  980b              LDR      r0,[sp,#0x2c]         ;4343
00055a  1c40              ADDS     r0,r0,#1              ;4343
00055c  900b              STR      r0,[sp,#0x2c]         ;4343
                  |L31.1374|
00055e  980b              LDR      r0,[sp,#0x2c]         ;4343
000560  4540              CMP      r0,r8                 ;4343
000562  d3ed              BCC      |L31.1344|
000564  f10b0b01          ADD      r11,r11,#1            ;4328
                  |L31.1384|
000568  f1bb0f00          CMP      r11,#0                ;4328
00056c  d09a              BEQ      |L31.1188|
00056e  2d03              CMP      r5,#3                 ;4350
000570  d101              BNE      |L31.1398|
000572  4648              MOV      r0,r9                 ;4350
000574  e000              B        |L31.1400|
                  |L31.1398|
000576  9804              LDR      r0,[sp,#0x10]         ;4350
                  |L31.1400|
000578  4683              MOV      r11,r0                ;4350
00057a  bf00              NOP                            ;4351
                  |L31.1404|
00057c  980a              LDR      r0,[sp,#0x28]         ;4352
00057e  1c41              ADDS     r1,r0,#1              ;4352
000580  4602              MOV      r2,r0                 ;4352
000582  2301              MOVS     r3,#1                 ;4352
000584  910a              STR      r1,[sp,#0x28]         ;4352
000586  4621              MOV      r1,r4                 ;4352
000588  980e              LDR      r0,[sp,#0x38]         ;4352
00058a  f7fffffe          BL       disk_write
00058e  b108              CBZ      r0,|L31.1428|
000590  2001              MOVS     r0,#1                 ;4353
000592  e53d              B        |L31.16|
                  |L31.1428|
000594  f1ab0001          SUB      r0,r11,#1             ;4354
000598  f1b00b00          SUBS     r11,r0,#0             ;4354
00059c  d1ee              BNE      |L31.1404|
00059e  980a              LDR      r0,[sp,#0x28]         ;4358
0005a0  9001              STR      r0,[sp,#4]            ;4358
0005a2  2d03              CMP      r5,#3                 ;4358
0005a4  d101              BNE      |L31.1450|
0005a6  2001              MOVS     r0,#1                 ;4358
0005a8  e000              B        |L31.1452|
                  |L31.1450|
0005aa  2000              MOVS     r0,#0                 ;4358
                  |L31.1452|
0005ac  1a39              SUBS     r1,r7,r0              ;4358
0005ae  980a              LDR      r0,[sp,#0x28]         ;4358
0005b0  fb010009          MLA      r0,r1,r9,r0           ;4358
0005b4  1e40              SUBS     r0,r0,#1              ;4358
0005b6  9002              STR      r0,[sp,#8]            ;4358
0005b8  aa01              ADD      r2,sp,#4              ;4359
0005ba  2104              MOVS     r1,#4                 ;4359
0005bc  980e              LDR      r0,[sp,#0x38]         ;4359
0005be  f7fffffe          BL       disk_ioctl
0005c2  2d03              CMP      r5,#3                 ;4364
0005c4  d146              BNE      |L31.1620|
0005c6  2052              MOVS     r0,#0x52              ;4365
0005c8  7020              STRB     r0,[r4,#0]            ;4365
0005ca  7060              STRB     r0,[r4,#1]            ;4365
0005cc  2061              MOVS     r0,#0x61              ;4365
0005ce  70a0              STRB     r0,[r4,#2]            ;4365
0005d0  2041              MOVS     r0,#0x41              ;4365
0005d2  70e0              STRB     r0,[r4,#3]            ;4365
0005d4  2072              MOVS     r0,#0x72              ;4366
0005d6  f88401e4          STRB     r0,[r4,#0x1e4]        ;4366
0005da  2172              MOVS     r1,#0x72              ;4366
0005dc  f24010e5          MOV      r0,#0x1e5             ;4366
0005e0  5501              STRB     r1,[r0,r4]            ;4366
0005e2  2141              MOVS     r1,#0x41              ;4366
0005e4  1c40              ADDS     r0,r0,#1              ;4366
0005e6  5501              STRB     r1,[r0,r4]            ;4366
0005e8  2161              MOVS     r1,#0x61              ;4366
0005ea  1c40              ADDS     r0,r0,#1              ;4366
0005ec  5501              STRB     r1,[r0,r4]            ;4366
0005ee  1e78              SUBS     r0,r7,#1              ;4367
0005f0  f88401e8          STRB     r0,[r4,#0x1e8]        ;4367
0005f4  f3c02107          UBFX     r1,r0,#8,#8           ;4367
0005f8  f24010e9          MOV      r0,#0x1e9             ;4367
0005fc  5501              STRB     r1,[r0,r4]            ;4367
0005fe  1e78              SUBS     r0,r7,#1              ;4367
000600  f3c04107          UBFX     r1,r0,#16,#8          ;4367
000604  f44f70f5          MOV      r0,#0x1ea             ;4367
000608  5501              STRB     r1,[r0,r4]            ;4367
00060a  1e78              SUBS     r0,r7,#1              ;4367
00060c  0e01              LSRS     r1,r0,#24             ;4367
00060e  f24010eb          MOV      r0,#0x1eb             ;4367
000612  5501              STRB     r1,[r0,r4]            ;4367
000614  2002              MOVS     r0,#2                 ;4368
000616  f88401ec          STRB     r0,[r4,#0x1ec]        ;4368
00061a  2100              MOVS     r1,#0                 ;4368
00061c  f24010ed          MOV      r0,#0x1ed             ;4368
000620  5501              STRB     r1,[r0,r4]            ;4368
000622  1c40              ADDS     r0,r0,#1              ;4368
000624  5501              STRB     r1,[r0,r4]            ;4368
000626  1c40              ADDS     r0,r0,#1              ;4368
000628  5501              STRB     r1,[r0,r4]            ;4368
00062a  2055              MOVS     r0,#0x55              ;4369
00062c  f88401fe          STRB     r0,[r4,#0x1fe]        ;4369
000630  21aa              MOVS     r1,#0xaa              ;4369
000632  f24010ff          MOV      r0,#0x1ff             ;4369
000636  5501              STRB     r1,[r0,r4]            ;4369
000638  2301              MOVS     r3,#1                 ;4370
00063a  f10a0201          ADD      r2,r10,#1             ;4370
00063e  4621              MOV      r1,r4                 ;4370
000640  980e              LDR      r0,[sp,#0x38]         ;4370
000642  f7fffffe          BL       disk_write
000646  2301              MOVS     r3,#1                 ;4371
000648  f10a0207          ADD      r2,r10,#7             ;4371
00064c  4621              MOV      r1,r4                 ;4371
00064e  980e              LDR      r0,[sp,#0x38]         ;4371
000650  f7fffffe          BL       disk_write
                  |L31.1620|
000654  2200              MOVS     r2,#0                 ;4374
000656  4611              MOV      r1,r2                 ;4374
000658  980e              LDR      r0,[sp,#0x38]         ;4374
00065a  f7fffffe          BL       disk_ioctl
00065e  b108              CBZ      r0,|L31.1636|
000660  2001              MOVS     r0,#1                 ;4374
000662  e4d5              B        |L31.16|
                  |L31.1636|
000664  2000              MOVS     r0,#0                 ;4374
000666  e4d3              B        |L31.16|
;;;4376   
                          ENDP

                  |L31.1640|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2474   
;;;2475   FRESULT f_mount (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2476   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2477   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2478   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2479   )
;;;2480   {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
;;;2481   	FATFS *cfs;
;;;2482   	int vol;
;;;2483   	FRESULT res;
;;;2484   	const TCHAR *rp = path;
000006  9803              LDR      r0,[sp,#0xc]
000008  9001              STR      r0,[sp,#4]
;;;2485   
;;;2486   
;;;2487   	vol = get_ldnumber(&rp);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       get_ldnumber
000010  4605              MOV      r5,r0
;;;2488   	if (vol < 0) return FR_INVALID_DRIVE;
000012  2d00              CMP      r5,#0
000014  da02              BGE      |L32.28|
000016  200b              MOVS     r0,#0xb
                  |L32.24|
;;;2489   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2490   
;;;2491   	if (cfs) {
;;;2492   #if _FS_LOCK
;;;2493   		clear_lock(cfs);
;;;2494   #endif
;;;2495   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2496   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2497   #endif
;;;2498   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2499   	}
;;;2500   
;;;2501   	if (fs) {
;;;2502   		fs->fs_type = 0;				/* Clear new fs object */
;;;2503   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2504   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2505   #endif
;;;2506   	}
;;;2507   	FatFs[vol] = fs;					/* Register new fs object */
;;;2508   
;;;2509   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2510   
;;;2511   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2512   	LEAVE_FF(fs, res);
;;;2513   }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L32.28|
00001c  4811              LDR      r0,|L32.100|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]     ;2489
000022  b134              CBZ      r4,|L32.50|
000024  4620              MOV      r0,r4                 ;2493
000026  f7fffffe          BL       clear_lock
00002a  2100              MOVS     r1,#0                 ;2498
00002c  f44f5080          MOV      r0,#0x1000            ;2498
000030  5501              STRB     r1,[r0,r4]            ;2498
                  |L32.50|
000032  9802              LDR      r0,[sp,#8]            ;2501
000034  b120              CBZ      r0,|L32.64|
000036  2100              MOVS     r1,#0                 ;2502
000038  9802              LDR      r0,[sp,#8]            ;2502
00003a  f5005080          ADD      r0,r0,#0x1000         ;2502
00003e  7001              STRB     r1,[r0,#0]            ;2502
                  |L32.64|
000040  4908              LDR      r1,|L32.100|
000042  9802              LDR      r0,[sp,#8]            ;2507
000044  f8410025          STR      r0,[r1,r5,LSL #2]     ;2507
000048  9802              LDR      r0,[sp,#8]            ;2509
00004a  b108              CBZ      r0,|L32.80|
00004c  2e01              CMP      r6,#1                 ;2509
00004e  d001              BEQ      |L32.84|
                  |L32.80|
000050  2000              MOVS     r0,#0                 ;2509
000052  e7e1              B        |L32.24|
                  |L32.84|
000054  2200              MOVS     r2,#0                 ;2511
000056  a903              ADD      r1,sp,#0xc            ;2511
000058  a802              ADD      r0,sp,#8              ;2511
00005a  f7fffffe          BL       find_volume
00005e  4607              MOV      r7,r0                 ;2511
000060  4638              MOV      r0,r7                 ;2512
000062  e7d9              B        |L32.24|
;;;2514   
                          ENDP

                  |L32.100|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;2521   
;;;2522   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2523   	FIL* fp,			/* Pointer to the blank file object */
;;;2524   	const TCHAR* path,	/* Pointer to the file name */
;;;2525   	BYTE mode			/* Access mode and file open mode flags */
;;;2526   )
;;;2527   {
000004  f5ad5d84          SUB      sp,sp,#0x1080
000008  4605              MOV      r5,r0
00000a  4616              MOV      r6,r2
;;;2528   	FRESULT res;
;;;2529   	DIR dj;
;;;2530   	BYTE *dir;
;;;2531   	DEFINE_NAMEBUF;
;;;2532   #if !_FS_READONLY
;;;2533   	DWORD dw, cl;
;;;2534   #endif
;;;2535   
;;;2536   
;;;2537   	if (!fp) return FR_INVALID_OBJECT;
00000c  b92d              CBNZ     r5,|L33.26|
00000e  2009              MOVS     r0,#9
                  |L33.16|
;;;2538   	fp->fs = 0;			/* Clear file object */
;;;2539   
;;;2540   	/* Get logical drive number */
;;;2541   #if !_FS_READONLY
;;;2542   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2543   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2544   #else
;;;2545   	mode &= FA_READ;
;;;2546   	res = find_volume(&dj.fs, &path, 0);
;;;2547   #endif
;;;2548   	if (res == FR_OK) {
;;;2549   		INIT_BUF(dj);
;;;2550   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2551   		dir = dj.dir;
;;;2552   #if !_FS_READONLY	/* R/W configuration */
;;;2553   		if (res == FR_OK) {
;;;2554   			if (!dir)	/* Default directory itself */
;;;2555   				res = FR_INVALID_NAME;
;;;2556   #if _FS_LOCK
;;;2557   			else
;;;2558   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2559   #endif
;;;2560   		}
;;;2561   		/* Create or Open a file */
;;;2562   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2563   			if (res != FR_OK) {					/* No file, create new */
;;;2564   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2565   #if _FS_LOCK
;;;2566   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2567   #else
;;;2568   					res = dir_register(&dj);
;;;2569   #endif
;;;2570   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2571   				dir = dj.dir;					/* New entry */
;;;2572   			}
;;;2573   			else {								/* Any object is already existing */
;;;2574   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2575   					res = FR_DENIED;
;;;2576   				} else {
;;;2577   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2578   						res = FR_EXIST;
;;;2579   				}
;;;2580   			}
;;;2581   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2582   				dw = GET_FATTIME();				/* Created time */
;;;2583   				ST_DWORD(dir + DIR_CrtTime, dw);
;;;2584   				dir[DIR_Attr] = 0;				/* Reset attribute */
;;;2585   				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
;;;2586   				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
;;;2587   				st_clust(dir, 0);				/* cluster = 0 */
;;;2588   				dj.fs->wflag = 1;
;;;2589   				if (cl) {						/* Remove the cluster chain if exist */
;;;2590   					dw = dj.fs->winsect;
;;;2591   					res = remove_chain(dj.fs, cl);
;;;2592   					if (res == FR_OK) {
;;;2593   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2594   						res = move_window(dj.fs, dw);
;;;2595   					}
;;;2596   				}
;;;2597   			}
;;;2598   		}
;;;2599   		else {	/* Open an existing file */
;;;2600   			if (res == FR_OK) {					/* Follow succeeded */
;;;2601   				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
;;;2602   					res = FR_NO_FILE;
;;;2603   				} else {
;;;2604   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2605   						res = FR_DENIED;
;;;2606   				}
;;;2607   			}
;;;2608   		}
;;;2609   		if (res == FR_OK) {
;;;2610   			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
;;;2611   				mode |= FA__WRITTEN;
;;;2612   			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;2613   			fp->dir_ptr = dir;
;;;2614   #if _FS_LOCK
;;;2615   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2616   			if (!fp->lockid) res = FR_INT_ERR;
;;;2617   #endif
;;;2618   		}
;;;2619   
;;;2620   #else				/* R/O configuration */
;;;2621   		if (res == FR_OK) {					/* Follow succeeded */
;;;2622   			dir = dj.dir;
;;;2623   			if (!dir) {						/* Current directory itself */
;;;2624   				res = FR_INVALID_NAME;
;;;2625   			} else {
;;;2626   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2627   					res = FR_NO_FILE;
;;;2628   			}
;;;2629   		}
;;;2630   #endif
;;;2631   		FREE_BUF();
;;;2632   
;;;2633   		if (res == FR_OK) {
;;;2634   			fp->flag = mode;					/* File access mode */
;;;2635   			fp->err = 0;						/* Clear error flag */
;;;2636   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2637   			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
;;;2638   			fp->fptr = 0;						/* File pointer */
;;;2639   			fp->dsect = 0;
;;;2640   #if _USE_FASTSEEK
;;;2641   			fp->cltbl = 0;						/* Normal seek mode */
;;;2642   #endif
;;;2643   			fp->fs = dj.fs;	 					/* Validate file object */
;;;2644   			fp->id = fp->fs->id;
;;;2645   		}
;;;2646   	}
;;;2647   
;;;2648   	LEAVE_FF(dj.fs, res);
;;;2649   }
000010  b023              ADD      sp,sp,#0x8c
000012  f50d5d80          ADD      sp,sp,#0x1000
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L33.26|
00001a  2100              MOVS     r1,#0                 ;2538
00001c  f44f5080          MOV      r0,#0x1000            ;2538
000020  5141              STR      r1,[r0,r5]            ;2538
000022  f006061f          AND      r6,r6,#0x1f           ;2542
000026  f0260201          BIC      r2,r6,#1              ;2543
00002a  f2410184          MOV      r1,#0x1084            ;2543
00002e  4469              ADD      r1,r1,sp              ;2543
000030  f1a10030          SUB      r0,r1,#0x30           ;2543
000034  f7fffffe          BL       find_volume
000038  4607              MOV      r7,r0                 ;2543
00003a  2f00              CMP      r7,#0                 ;2548
00003c  d17e              BNE      |L33.316|
00003e  a912              ADD      r1,sp,#0x48           ;2549
000040  f50d5080          ADD      r0,sp,#0x1000         ;2549
000044  66c1              STR      r1,[r0,#0x6c]         ;2549
000046  a905              ADD      r1,sp,#0x14           ;2549
000048  6741              STR      r1,[r0,#0x74]         ;2549
00004a  f8d01084          LDR      r1,[r0,#0x84]         ;2550
00004e  a815              ADD      r0,sp,#0x54           ;2550
000050  f7fffffe          BL       follow_path
000054  4607              MOV      r7,r0                 ;2550
000056  f50d5080          ADD      r0,sp,#0x1000         ;2551
00005a  6e84              LDR      r4,[r0,#0x68]         ;2551
00005c  b96f              CBNZ     r7,|L33.122|
00005e  b90c              CBNZ     r4,|L33.100|
000060  2706              MOVS     r7,#6                 ;2555
000062  e00a              B        |L33.122|
                  |L33.100|
000064  f0260001          BIC      r0,r6,#1              ;2558
000068  b108              CBZ      r0,|L33.110|
00006a  2001              MOVS     r0,#1                 ;2558
00006c  e000              B        |L33.112|
                  |L33.110|
00006e  2000              MOVS     r0,#0                 ;2558
                  |L33.112|
000070  4601              MOV      r1,r0                 ;2558
000072  a815              ADD      r0,sp,#0x54           ;2558
000074  f7fffffe          BL       chk_lock
000078  4607              MOV      r7,r0                 ;2558
                  |L33.122|
00007a  f006001c          AND      r0,r6,#0x1c           ;2562
00007e  2800              CMP      r0,#0                 ;2562
000080  d06b              BEQ      |L33.346|
000082  b187              CBZ      r7,|L33.166|
000084  2f04              CMP      r7,#4                 ;2564
000086  d108              BNE      |L33.154|
000088  f7fffffe          BL       enq_lock
00008c  b118              CBZ      r0,|L33.150|
00008e  a815              ADD      r0,sp,#0x54           ;2566
000090  f7fffffe          BL       dir_register
000094  e000              B        |L33.152|
                  |L33.150|
000096  2012              MOVS     r0,#0x12              ;2566
                  |L33.152|
000098  4607              MOV      r7,r0                 ;2566
                  |L33.154|
00009a  f0460608          ORR      r6,r6,#8              ;2570
00009e  f50d5080          ADD      r0,sp,#0x1000         ;2571
0000a2  6e84              LDR      r4,[r0,#0x68]         ;2571
0000a4  e009              B        |L33.186|
                  |L33.166|
0000a6  7ae0              LDRB     r0,[r4,#0xb]          ;2574
0000a8  f0000011          AND      r0,r0,#0x11           ;2574
0000ac  b108              CBZ      r0,|L33.178|
0000ae  2707              MOVS     r7,#7                 ;2575
0000b0  e003              B        |L33.186|
                  |L33.178|
0000b2  f0060004          AND      r0,r6,#4              ;2577
0000b6  b100              CBZ      r0,|L33.186|
0000b8  2708              MOVS     r7,#8                 ;2578
                  |L33.186|
0000ba  2f00              CMP      r7,#0                 ;2581
0000bc  d15c              BNE      |L33.376|
0000be  f0060008          AND      r0,r6,#8              ;2581
0000c2  2800              CMP      r0,#0                 ;2581
0000c4  d058              BEQ      |L33.376|
0000c6  f7fffffe          BL       get_fattime
0000ca  4680              MOV      r8,r0                 ;2582
0000cc  f884800e          STRB     r8,[r4,#0xe]          ;2583
0000d0  ea4f2118          LSR      r1,r8,#8              ;2583
0000d4  73e1              STRB     r1,[r4,#0xf]          ;2583
0000d6  ea4f4118          LSR      r1,r8,#16             ;2583
0000da  7421              STRB     r1,[r4,#0x10]         ;2583
0000dc  ea4f6118          LSR      r1,r8,#24             ;2583
0000e0  7461              STRB     r1,[r4,#0x11]         ;2583
0000e2  2000              MOVS     r0,#0                 ;2584
0000e4  72e0              STRB     r0,[r4,#0xb]          ;2584
0000e6  7720              STRB     r0,[r4,#0x1c]         ;2585
0000e8  2100              MOVS     r1,#0                 ;2585
0000ea  7761              STRB     r1,[r4,#0x1d]         ;2585
0000ec  77a1              STRB     r1,[r4,#0x1e]         ;2585
0000ee  2200              MOVS     r2,#0                 ;2585
0000f0  77e2              STRB     r2,[r4,#0x1f]         ;2585
0000f2  f50d5180          ADD      r1,sp,#0x1000         ;2586
0000f6  6d48              LDR      r0,[r1,#0x54]         ;2586
0000f8  4621              MOV      r1,r4                 ;2586
0000fa  f7fffffe          BL       ld_clust
0000fe  4681              MOV      r9,r0                 ;2586
000100  2100              MOVS     r1,#0                 ;2587
000102  4620              MOV      r0,r4                 ;2587
000104  f7fffffe          BL       st_clust
000108  2101              MOVS     r1,#1                 ;2588
00010a  f50d5080          ADD      r0,sp,#0x1000         ;2588
00010e  6d40              LDR      r0,[r0,#0x54]         ;2588
000110  f5005080          ADD      r0,r0,#0x1000         ;2588
000114  7101              STRB     r1,[r0,#4]            ;2588
000116  f1b90f00          CMP      r9,#0                 ;2589
00011a  d02d              BEQ      |L33.376|
00011c  f50d5180          ADD      r1,sp,#0x1000         ;2590
000120  6d48              LDR      r0,[r1,#0x54]         ;2590
000122  f5005080          ADD      r0,r0,#0x1000         ;2590
000126  f8d08030          LDR      r8,[r0,#0x30]         ;2590
00012a  6d48              LDR      r0,[r1,#0x54]         ;2591
00012c  4649              MOV      r1,r9                 ;2591
00012e  f7fffffe          BL       remove_chain
000132  4607              MOV      r7,r0                 ;2591
000134  bb07              CBNZ     r7,|L33.376|
000136  f1a90001          SUB      r0,r9,#1              ;2593
00013a  e000              B        |L33.318|
                  |L33.316|
00013c  e072              B        |L33.548|
                  |L33.318|
00013e  f50d5180          ADD      r1,sp,#0x1000         ;2593
000142  6d49              LDR      r1,[r1,#0x54]         ;2593
000144  f5015180          ADD      r1,r1,#0x1000         ;2593
000148  60c8              STR      r0,[r1,#0xc]          ;2593
00014a  f50d5180          ADD      r1,sp,#0x1000         ;2594
00014e  6d48              LDR      r0,[r1,#0x54]         ;2594
000150  4641              MOV      r1,r8                 ;2594
000152  f7fffffe          BL       move_window
000156  4607              MOV      r7,r0                 ;2594
000158  e00e              B        |L33.376|
                  |L33.346|
00015a  b96f              CBNZ     r7,|L33.376|
00015c  7ae0              LDRB     r0,[r4,#0xb]          ;2601
00015e  f0000010          AND      r0,r0,#0x10           ;2601
000162  b108              CBZ      r0,|L33.360|
000164  2704              MOVS     r7,#4                 ;2602
000166  e007              B        |L33.376|
                  |L33.360|
000168  f0060002          AND      r0,r6,#2              ;2604
00016c  b120              CBZ      r0,|L33.376|
00016e  7ae0              LDRB     r0,[r4,#0xb]          ;2604
000170  f0000001          AND      r0,r0,#1              ;2604
000174  b100              CBZ      r0,|L33.376|
000176  2707              MOVS     r7,#7                 ;2605
                  |L33.376|
000178  bb07              CBNZ     r7,|L33.444|
00017a  f0060008          AND      r0,r6,#8              ;2610
00017e  b108              CBZ      r0,|L33.388|
000180  f0460620          ORR      r6,r6,#0x20           ;2611
                  |L33.388|
000184  f50d5080          ADD      r0,sp,#0x1000         ;2612
000188  6d40              LDR      r0,[r0,#0x54]         ;2612
00018a  f5005080          ADD      r0,r0,#0x1000         ;2612
00018e  6b01              LDR      r1,[r0,#0x30]         ;2612
000190  f241001c          MOV      r0,#0x101c            ;2612
000194  5141              STR      r1,[r0,r5]            ;2612
000196  1d00              ADDS     r0,r0,#4              ;2613
000198  5144              STR      r4,[r0,r5]            ;2613
00019a  f0260001          BIC      r0,r6,#1              ;2615
00019e  b108              CBZ      r0,|L33.420|
0001a0  2001              MOVS     r0,#1                 ;2615
0001a2  e000              B        |L33.422|
                  |L33.420|
0001a4  2000              MOVS     r0,#0                 ;2615
                  |L33.422|
0001a6  4601              MOV      r1,r0                 ;2615
0001a8  a815              ADD      r0,sp,#0x54           ;2615
0001aa  f7fffffe          BL       inc_lock
0001ae  f2410128          MOV      r1,#0x1028            ;2615
0001b2  5148              STR      r0,[r1,r5]            ;2615
0001b4  4608              MOV      r0,r1                 ;2616
0001b6  5940              LDR      r0,[r0,r5]            ;2616
0001b8  b900              CBNZ     r0,|L33.444|
0001ba  2702              MOVS     r7,#2                 ;2616
                  |L33.444|
0001bc  bb97              CBNZ     r7,|L33.548|
0001be  f2410006          MOV      r0,#0x1006            ;2634
0001c2  5546              STRB     r6,[r0,r5]            ;2634
0001c4  2200              MOVS     r2,#0                 ;2635
0001c6  1c40              ADDS     r0,r0,#1              ;2635
0001c8  5542              STRB     r2,[r0,r5]            ;2635
0001ca  f50d5180          ADD      r1,sp,#0x1000         ;2636
0001ce  6d48              LDR      r0,[r1,#0x54]         ;2636
0001d0  4621              MOV      r1,r4                 ;2636
0001d2  f7fffffe          BL       ld_clust
0001d6  f2410110          MOV      r1,#0x1010            ;2636
0001da  5148              STR      r0,[r1,r5]            ;2636
0001dc  7fe0              LDRB     r0,[r4,#0x1f]         ;2637
0001de  0601              LSLS     r1,r0,#24             ;2637
0001e0  7fa0              LDRB     r0,[r4,#0x1e]         ;2637
0001e2  ea414100          ORR      r1,r1,r0,LSL #16      ;2637
0001e6  7f60              LDRB     r0,[r4,#0x1d]         ;2637
0001e8  ea412000          ORR      r0,r1,r0,LSL #8       ;2637
0001ec  7f21              LDRB     r1,[r4,#0x1c]         ;2637
0001ee  4308              ORRS     r0,r0,r1              ;2637
0001f0  f241010c          MOV      r1,#0x100c            ;2637
0001f4  5148              STR      r0,[r1,r5]            ;2637
0001f6  2100              MOVS     r1,#0                 ;2638
0001f8  f2410008          MOV      r0,#0x1008            ;2638
0001fc  5141              STR      r1,[r0,r5]            ;2638
0001fe  f2410018          MOV      r0,#0x1018            ;2639
000202  5141              STR      r1,[r0,r5]            ;2639
000204  f2410024          MOV      r0,#0x1024            ;2641
000208  5141              STR      r1,[r0,r5]            ;2641
00020a  f50d5080          ADD      r0,sp,#0x1000         ;2643
00020e  6d41              LDR      r1,[r0,#0x54]         ;2643
000210  f44f5080          MOV      r0,#0x1000            ;2643
000214  5141              STR      r1,[r0,r5]            ;2643
000216  5940              LDR      r0,[r0,r5]            ;2644
000218  f5005080          ADD      r0,r0,#0x1000         ;2644
00021c  88c1              LDRH     r1,[r0,#6]            ;2644
00021e  f2410004          MOV      r0,#0x1004            ;2644
000222  5341              STRH     r1,[r0,r5]            ;2644
                  |L33.548|
000224  4638              MOV      r0,r7                 ;2648
000226  e6f3              B        |L33.16|
;;;2650   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;3259   
;;;3260   FRESULT f_opendir (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3261   	DIR* dp,			/* Pointer to directory object to create */
;;;3262   	const TCHAR* path	/* Pointer to the directory path */
;;;3263   )
;;;3264   {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
;;;3265   	FRESULT res;
;;;3266   	FATFS* fs;
;;;3267   	DEFINE_NAMEBUF;
;;;3268   
;;;3269   
;;;3270   	if (!dp) return FR_INVALID_OBJECT;
000006  b914              CBNZ     r4,|L34.14|
000008  2009              MOVS     r0,#9
                  |L34.10|
;;;3271   
;;;3272   	/* Get logical drive number */
;;;3273   	res = find_volume(&fs, &path, 0);
;;;3274   	if (res == FR_OK) {
;;;3275   		dp->fs = fs;
;;;3276   		INIT_BUF(*dp);
;;;3277   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3278   		FREE_BUF();
;;;3279   		if (res == FR_OK) {						/* Follow completed */
;;;3280   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3281   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3282   					dp->sclust = ld_clust(fs, dp->dir);
;;;3283   				else							/* The object is a file */
;;;3284   					res = FR_NO_PATH;
;;;3285   			}
;;;3286   			if (res == FR_OK) {
;;;3287   				dp->id = fs->id;
;;;3288   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3289   #if _FS_LOCK
;;;3290   				if (res == FR_OK) {
;;;3291   					if (dp->sclust) {
;;;3292   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3293   						if (!dp->lockid)
;;;3294   							res = FR_TOO_MANY_OPEN_FILES;
;;;3295   					} else {
;;;3296   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3297   					}
;;;3298   				}
;;;3299   #endif
;;;3300   			}
;;;3301   		}
;;;3302   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3303   	}
;;;3304   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3305   
;;;3306   	LEAVE_FF(fs, res);
;;;3307   }
00000a  b013              ADD      sp,sp,#0x4c
00000c  bd30              POP      {r4,r5,pc}
                  |L34.14|
00000e  2200              MOVS     r2,#0                 ;3273
000010  a912              ADD      r1,sp,#0x48           ;3273
000012  a810              ADD      r0,sp,#0x40           ;3273
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0                 ;3273
00001a  2d00              CMP      r5,#0                 ;3274
00001c  d14c              BNE      |L34.184|
00001e  f44f5080          MOV      r0,#0x1000            ;3275
000022  9910              LDR      r1,[sp,#0x40]         ;3275
000024  5101              STR      r1,[r0,r4]            ;3275
000026  a90d              ADD      r1,sp,#0x34           ;3276
000028  f2410018          MOV      r0,#0x1018            ;3276
00002c  5101              STR      r1,[r0,r4]            ;3276
00002e  f44f5081          MOV      r0,#0x1020            ;3276
000032  f840d004          STR      sp,[r0,r4]            ;3276
000036  4620              MOV      r0,r4                 ;3277
000038  9912              LDR      r1,[sp,#0x48]         ;3277
00003a  f7fffffe          BL       follow_path
00003e  4605              MOV      r5,r0                 ;3277
000040  bb95              CBNZ     r5,|L34.168|
000042  f2410014          MOV      r0,#0x1014            ;3280
000046  5900              LDR      r0,[r0,r4]            ;3280
000048  b188              CBZ      r0,|L34.110|
00004a  f2410014          MOV      r0,#0x1014            ;3281
00004e  5900              LDR      r0,[r0,r4]            ;3281
000050  7ac0              LDRB     r0,[r0,#0xb]          ;3281
000052  f0000010          AND      r0,r0,#0x10           ;3281
000056  b148              CBZ      r0,|L34.108|
000058  f2410014          MOV      r0,#0x1014            ;3282
00005c  5901              LDR      r1,[r0,r4]            ;3282
00005e  9810              LDR      r0,[sp,#0x40]         ;3282
000060  f7fffffe          BL       ld_clust
000064  f2410108          MOV      r1,#0x1008            ;3282
000068  5108              STR      r0,[r1,r4]            ;3282
00006a  e000              B        |L34.110|
                  |L34.108|
00006c  2505              MOVS     r5,#5                 ;3284
                  |L34.110|
00006e  b9dd              CBNZ     r5,|L34.168|
000070  9810              LDR      r0,[sp,#0x40]         ;3287
000072  f5005080          ADD      r0,r0,#0x1000         ;3287
000076  88c1              LDRH     r1,[r0,#6]            ;3287
000078  f2410004          MOV      r0,#0x1004            ;3287
00007c  5301              STRH     r1,[r0,r4]            ;3287
00007e  2100              MOVS     r1,#0                 ;3288
000080  4620              MOV      r0,r4                 ;3288
000082  f7fffffe          BL       dir_sdi
000086  4605              MOV      r5,r0                 ;3288
000088  b975              CBNZ     r5,|L34.168|
00008a  f2410008          MOV      r0,#0x1008            ;3291
00008e  5900              LDR      r0,[r0,r4]            ;3291
000090  b158              CBZ      r0,|L34.170|
000092  2100              MOVS     r1,#0                 ;3292
000094  4620              MOV      r0,r4                 ;3292
000096  f7fffffe          BL       inc_lock
00009a  f241011c          MOV      r1,#0x101c            ;3292
00009e  5108              STR      r0,[r1,r4]            ;3292
0000a0  4608              MOV      r0,r1                 ;3293
0000a2  5900              LDR      r0,[r0,r4]            ;3293
0000a4  b900              CBNZ     r0,|L34.168|
0000a6  2512              MOVS     r5,#0x12              ;3294
                  |L34.168|
0000a8  e003              B        |L34.178|
                  |L34.170|
0000aa  2100              MOVS     r1,#0                 ;3296
0000ac  f241001c          MOV      r0,#0x101c            ;3296
0000b0  5101              STR      r1,[r0,r4]            ;3296
                  |L34.178|
0000b2  2d04              CMP      r5,#4                 ;3302
0000b4  d100              BNE      |L34.184|
0000b6  2505              MOVS     r5,#5                 ;3302
                  |L34.184|
0000b8  b11d              CBZ      r5,|L34.194|
0000ba  2100              MOVS     r1,#0                 ;3304
0000bc  f44f5080          MOV      r0,#0x1000            ;3304
0000c0  5101              STR      r1,[r0,r4]            ;3304
                  |L34.194|
0000c2  4628              MOV      r0,r5                 ;3306
0000c4  e7a1              B        |L34.10|
;;;3308   
                          ENDP


                          AREA ||i.f_printf||, CODE, READONLY, ALIGN=1

                  f_printf PROC
;;;4653   
;;;4654   int f_printf (
000000  b40f              PUSH     {r0-r3}
;;;4655   	FIL* fp,			/* Pointer to the file object */
;;;4656   	const TCHAR* fmt,	/* Pointer to the format string */
;;;4657   	...					/* Optional arguments... */
;;;4658   )
;;;4659   {
000002  e92d4ff0          PUSH     {r4-r11,lr}
000006  b09b              SUB      sp,sp,#0x6c
;;;4660   	va_list arp;
;;;4661   	BYTE f, r;
;;;4662   	UINT nw, i, j, w;
;;;4663   	DWORD v;
;;;4664   	TCHAR c, d, s[16], *p;
;;;4665   	putbuff pb;
;;;4666   
;;;4667   
;;;4668   	pb.fp = fp;				/* Initialize output buffer */
000008  9824              LDR      r0,[sp,#0x90]
00000a  9001              STR      r0,[sp,#4]
;;;4669   	pb.nchr = pb.idx = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;4670   
;;;4671   	va_start(arp, fmt);
000012  a826              ADD      r0,sp,#0x98
000014  901a              STR      r0,[sp,#0x68]
;;;4672   
;;;4673   	for (;;) {
000016  bf00              NOP      
                  |L35.24|
;;;4674   		c = *fmt++;
000018  9825              LDR      r0,[sp,#0x94]
00001a  f9104b01          LDRSB    r4,[r0],#1
00001e  9025              STR      r0,[sp,#0x94]
;;;4675   		if (c == 0) break;			/* End of string */
000020  b904              CBNZ     r4,|L35.36|
000022  e10d              B        |L35.576|
                  |L35.36|
;;;4676   		if (c != '%') {				/* Non escape character */
000024  2c25              CMP      r4,#0x25
000026  d004              BEQ      |L35.50|
;;;4677   			putc_bfd(&pb, c);
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       putc_bfd
;;;4678   			continue;
000030  e7f2              B        |L35.24|
                  |L35.50|
;;;4679   		}
;;;4680   		w = f = 0;
000032  2000              MOVS     r0,#0
000034  4606              MOV      r6,r0
000036  4681              MOV      r9,r0
;;;4681   		c = *fmt++;
000038  9825              LDR      r0,[sp,#0x94]
00003a  f9104b01          LDRSB    r4,[r0],#1
00003e  9025              STR      r0,[sp,#0x94]
;;;4682   		if (c == '0') {				/* Flag: '0' padding */
000040  2c30              CMP      r4,#0x30
000042  d105              BNE      |L35.80|
;;;4683   			f = 1; c = *fmt++;
000044  2601              MOVS     r6,#1
000046  9825              LDR      r0,[sp,#0x94]
000048  f9104b01          LDRSB    r4,[r0],#1
00004c  9025              STR      r0,[sp,#0x94]
00004e  e006              B        |L35.94|
                  |L35.80|
;;;4684   		} else {
;;;4685   			if (c == '-') {			/* Flag: left justified */
000050  2c2d              CMP      r4,#0x2d
000052  d104              BNE      |L35.94|
;;;4686   				f = 2; c = *fmt++;
000054  2602              MOVS     r6,#2
000056  9825              LDR      r0,[sp,#0x94]
000058  f9104b01          LDRSB    r4,[r0],#1
00005c  9025              STR      r0,[sp,#0x94]
                  |L35.94|
;;;4687   			}
;;;4688   		}
;;;4689   		while (IsDigit(c)) {		/* Precision */
00005e  e009              B        |L35.116|
                  |L35.96|
;;;4690   			w = w * 10 + c - '0';
000060  eb090089          ADD      r0,r9,r9,LSL #2
000064  eb040040          ADD      r0,r4,r0,LSL #1
000068  f1a00930          SUB      r9,r0,#0x30
;;;4691   			c = *fmt++;
00006c  9825              LDR      r0,[sp,#0x94]
00006e  f9104b01          LDRSB    r4,[r0],#1
000072  9025              STR      r0,[sp,#0x94]
                  |L35.116|
000074  2c30              CMP      r4,#0x30              ;4689
000076  db01              BLT      |L35.124|
000078  2c39              CMP      r4,#0x39              ;4689
00007a  ddf1              BLE      |L35.96|
                  |L35.124|
;;;4692   		}
;;;4693   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
00007c  2c6c              CMP      r4,#0x6c
00007e  d001              BEQ      |L35.132|
000080  2c4c              CMP      r4,#0x4c
000082  d105              BNE      |L35.144|
                  |L35.132|
;;;4694   			f |= 4; c = *fmt++;
000084  f0460604          ORR      r6,r6,#4
000088  9825              LDR      r0,[sp,#0x94]
00008a  f9104b01          LDRSB    r4,[r0],#1
00008e  9025              STR      r0,[sp,#0x94]
                  |L35.144|
;;;4695   		}
;;;4696   		if (!c) break;
000090  b904              CBNZ     r4,|L35.148|
000092  e0d5              B        |L35.576|
                  |L35.148|
;;;4697   		d = c;
000094  4625              MOV      r5,r4
;;;4698   		if (IsLower(d)) d -= 0x20;
000096  2d61              CMP      r5,#0x61
000098  db04              BLT      |L35.164|
00009a  2d7a              CMP      r5,#0x7a
00009c  dc02              BGT      |L35.164|
00009e  f1a50020          SUB      r0,r5,#0x20
0000a2  b245              SXTB     r5,r0
                  |L35.164|
;;;4699   		switch (d) {				/* Type is... */
0000a4  2d4f              CMP      r5,#0x4f
0000a6  d049              BEQ      |L35.316|
0000a8  dc06              BGT      |L35.184|
0000aa  2d42              CMP      r5,#0x42
0000ac  d043              BEQ      |L35.310|
0000ae  2d43              CMP      r5,#0x43
0000b0  d038              BEQ      |L35.292|
0000b2  2d44              CMP      r5,#0x44
0000b4  d14c              BNE      |L35.336|
0000b6  e044              B        |L35.322|
                  |L35.184|
0000b8  2d53              CMP      r5,#0x53
0000ba  d004              BEQ      |L35.198|
0000bc  2d55              CMP      r5,#0x55
0000be  d041              BEQ      |L35.324|
0000c0  2d58              CMP      r5,#0x58
0000c2  d145              BNE      |L35.336|
0000c4  e041              B        |L35.330|
                  |L35.198|
;;;4700   		case 'S' :					/* String */
;;;4701   			p = va_arg(arp, TCHAR*);
0000c6  981a              LDR      r0,[sp,#0x68]
0000c8  f850bb04          LDR      r11,[r0],#4
0000cc  901a              STR      r0,[sp,#0x68]
;;;4702   			for (j = 0; p[j]; j++) ;
0000ce  f04f0800          MOV      r8,#0
0000d2  e001              B        |L35.216|
                  |L35.212|
0000d4  f1080801          ADD      r8,r8,#1
                  |L35.216|
0000d8  f81b0008          LDRB     r0,[r11,r8]
0000dc  2800              CMP      r0,#0
0000de  d1f9              BNE      |L35.212|
;;;4703   			if (!(f & 2)) {
0000e0  f0060002          AND      r0,r6,#2
0000e4  b948              CBNZ     r0,|L35.250|
;;;4704   				while (j++ < w) putc_bfd(&pb, ' ');
0000e6  e003              B        |L35.240|
                  |L35.232|
0000e8  2120              MOVS     r1,#0x20
0000ea  a801              ADD      r0,sp,#4
0000ec  f7fffffe          BL       putc_bfd
                  |L35.240|
0000f0  4640              MOV      r0,r8
0000f2  f1080801          ADD      r8,r8,#1
0000f6  4548              CMP      r0,r9
0000f8  d3f6              BCC      |L35.232|
                  |L35.250|
;;;4705   			}
;;;4706   			while (*p) putc_bfd(&pb, *p++);
0000fa  e004              B        |L35.262|
                  |L35.252|
0000fc  f91b1b01          LDRSB    r1,[r11],#1
000100  a801              ADD      r0,sp,#4
000102  f7fffffe          BL       putc_bfd
                  |L35.262|
000106  f89b0000          LDRB     r0,[r11,#0]
00010a  2800              CMP      r0,#0
00010c  d1f6              BNE      |L35.252|
;;;4707   			while (j++ < w) putc_bfd(&pb, ' ');
00010e  e003              B        |L35.280|
                  |L35.272|
000110  2120              MOVS     r1,#0x20
000112  a801              ADD      r0,sp,#4
000114  f7fffffe          BL       putc_bfd
                  |L35.280|
000118  4640              MOV      r0,r8
00011a  f1080801          ADD      r8,r8,#1
00011e  4548              CMP      r0,r9
000120  d3f6              BCC      |L35.272|
;;;4708   			continue;
000122  e779              B        |L35.24|
                  |L35.292|
;;;4709   		case 'C' :					/* Character */
;;;4710   			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
000124  981a              LDR      r0,[sp,#0x68]
000126  f8102b04          LDRB     r2,[r0],#4
00012a  b251              SXTB     r1,r2
00012c  901a              STR      r0,[sp,#0x68]
00012e  a801              ADD      r0,sp,#4
000130  f7fffffe          BL       putc_bfd
000134  e770              B        |L35.24|
                  |L35.310|
;;;4711   		case 'B' :					/* Binary */
;;;4712   			r = 2; break;
000136  2002              MOVS     r0,#2
000138  9019              STR      r0,[sp,#0x64]
00013a  e00e              B        |L35.346|
                  |L35.316|
;;;4713   		case 'O' :					/* Octal */
;;;4714   			r = 8; break;
00013c  2008              MOVS     r0,#8
00013e  9019              STR      r0,[sp,#0x64]
000140  e00b              B        |L35.346|
                  |L35.322|
;;;4715   		case 'D' :					/* Signed decimal */
;;;4716   		case 'U' :					/* Unsigned decimal */
000142  bf00              NOP      
                  |L35.324|
;;;4717   			r = 10; break;
000144  200a              MOVS     r0,#0xa
000146  9019              STR      r0,[sp,#0x64]
000148  e007              B        |L35.346|
                  |L35.330|
;;;4718   		case 'X' :					/* Hexdecimal */
;;;4719   			r = 16; break;
00014a  2010              MOVS     r0,#0x10
00014c  9019              STR      r0,[sp,#0x64]
00014e  e004              B        |L35.346|
                  |L35.336|
;;;4720   		default:					/* Unknown type (pass-through) */
;;;4721   			putc_bfd(&pb, c); continue;
000150  4621              MOV      r1,r4
000152  a801              ADD      r0,sp,#4
000154  f7fffffe          BL       putc_bfd
000158  e75e              B        |L35.24|
                  |L35.346|
00015a  bf00              NOP                            ;4712
;;;4722   		}
;;;4723   
;;;4724   		/* Get an argument and put it in numeral */
;;;4725   		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
00015c  f0060004          AND      r0,r6,#4
000160  b128              CBZ      r0,|L35.366|
000162  981a              LDR      r0,[sp,#0x68]
000164  6800              LDR      r0,[r0,#0]
000166  991a              LDR      r1,[sp,#0x68]
000168  1d09              ADDS     r1,r1,#4
00016a  911a              STR      r1,[sp,#0x68]
00016c  e00c              B        |L35.392|
                  |L35.366|
00016e  2d44              CMP      r5,#0x44
000170  d105              BNE      |L35.382|
000172  981a              LDR      r0,[sp,#0x68]
000174  6800              LDR      r0,[r0,#0]
000176  991a              LDR      r1,[sp,#0x68]
000178  1d09              ADDS     r1,r1,#4
00017a  911a              STR      r1,[sp,#0x68]
00017c  e004              B        |L35.392|
                  |L35.382|
00017e  981a              LDR      r0,[sp,#0x68]
000180  6800              LDR      r0,[r0,#0]
000182  991a              LDR      r1,[sp,#0x68]
000184  1d09              ADDS     r1,r1,#4
000186  911a              STR      r1,[sp,#0x68]
                  |L35.392|
000188  4682              MOV      r10,r0
;;;4726   		if (d == 'D' && (v & 0x80000000)) {
00018a  2d44              CMP      r5,#0x44
00018c  d106              BNE      |L35.412|
00018e  f00a4000          AND      r0,r10,#0x80000000
000192  b118              CBZ      r0,|L35.412|
;;;4727   			v = 0 - v;
000194  f1ca0a00          RSB      r10,r10,#0
;;;4728   			f |= 8;
000198  f0460608          ORR      r6,r6,#8
                  |L35.412|
;;;4729   		}
;;;4730   		i = 0;
00019c  2700              MOVS     r7,#0
;;;4731   		do {
00019e  bf00              NOP      
                  |L35.416|
;;;4732   			d = (TCHAR)(v % r); v /= r;
0001a0  9819              LDR      r0,[sp,#0x64]
0001a2  fbbaf1f0          UDIV     r1,r10,r0
0001a6  fb00a011          MLS      r0,r0,r1,r10
0001aa  b245              SXTB     r5,r0
0001ac  9819              LDR      r0,[sp,#0x64]
0001ae  fbbafaf0          UDIV     r10,r10,r0
;;;4733   			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
0001b2  2d09              CMP      r5,#9
0001b4  dd06              BLE      |L35.452|
0001b6  2c78              CMP      r4,#0x78
0001b8  d101              BNE      |L35.446|
0001ba  2027              MOVS     r0,#0x27
0001bc  e000              B        |L35.448|
                  |L35.446|
0001be  2007              MOVS     r0,#7
                  |L35.448|
0001c0  4428              ADD      r0,r0,r5
0001c2  b245              SXTB     r5,r0
                  |L35.452|
;;;4734   			s[i++] = d + '0';
0001c4  f1050030          ADD      r0,r5,#0x30
0001c8  b242              SXTB     r2,r0
0001ca  4638              MOV      r0,r7
0001cc  1c7f              ADDS     r7,r7,#1
0001ce  a914              ADD      r1,sp,#0x50
0001d0  540a              STRB     r2,[r1,r0]
;;;4735   		} while (v && i < sizeof s / sizeof s[0]);
0001d2  f1ba0f00          CMP      r10,#0
0001d6  d001              BEQ      |L35.476|
0001d8  2f10              CMP      r7,#0x10
0001da  d3e1              BCC      |L35.416|
                  |L35.476|
;;;4736   		if (f & 8) s[i++] = '-';
0001dc  f0060008          AND      r0,r6,#8
0001e0  b120              CBZ      r0,|L35.492|
0001e2  222d              MOVS     r2,#0x2d
0001e4  4638              MOV      r0,r7
0001e6  1c7f              ADDS     r7,r7,#1
0001e8  a914              ADD      r1,sp,#0x50
0001ea  540a              STRB     r2,[r1,r0]
                  |L35.492|
;;;4737   		j = i; d = (f & 1) ? '0' : ' ';
0001ec  46b8              MOV      r8,r7
0001ee  f0060001          AND      r0,r6,#1
0001f2  b108              CBZ      r0,|L35.504|
0001f4  2030              MOVS     r0,#0x30
0001f6  e000              B        |L35.506|
                  |L35.504|
0001f8  2020              MOVS     r0,#0x20
                  |L35.506|
0001fa  4605              MOV      r5,r0
;;;4738   		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
0001fc  e003              B        |L35.518|
                  |L35.510|
0001fe  4629              MOV      r1,r5
000200  a801              ADD      r0,sp,#4
000202  f7fffffe          BL       putc_bfd
                  |L35.518|
000206  f0060002          AND      r0,r6,#2
00020a  b920              CBNZ     r0,|L35.534|
00020c  4640              MOV      r0,r8
00020e  f1080801          ADD      r8,r8,#1
000212  4548              CMP      r0,r9
000214  d3f3              BCC      |L35.510|
                  |L35.534|
;;;4739   		do putc_bfd(&pb, s[--i]); while (i);
000216  bf00              NOP      
                  |L35.536|
000218  1e78              SUBS     r0,r7,#1
00021a  4607              MOV      r7,r0
00021c  aa14              ADD      r2,sp,#0x50
00021e  5611              LDRSB    r1,[r2,r0]
000220  a801              ADD      r0,sp,#4
000222  f7fffffe          BL       putc_bfd
000226  2f00              CMP      r7,#0
000228  d1f6              BNE      |L35.536|
;;;4740   		while (j++ < w) putc_bfd(&pb, d);
00022a  e003              B        |L35.564|
                  |L35.556|
00022c  4629              MOV      r1,r5
00022e  a801              ADD      r0,sp,#4
000230  f7fffffe          BL       putc_bfd
                  |L35.564|
000234  4640              MOV      r0,r8
000236  f1080801          ADD      r8,r8,#1
00023a  4548              CMP      r0,r9
00023c  d3f6              BCC      |L35.556|
00023e  e6eb              B        |L35.24|
                  |L35.576|
000240  bf00              NOP                            ;4675
;;;4741   	}
;;;4742   
;;;4743   	va_end(arp);
000242  2000              MOVS     r0,#0
000244  901a              STR      r0,[sp,#0x68]
;;;4744   
;;;4745   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000246  9802              LDR      r0,[sp,#8]
000248  2800              CMP      r0,#0
00024a  db10              BLT      |L35.622|
;;;4746   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00024c  ab18              ADD      r3,sp,#0x60
00024e  a904              ADD      r1,sp,#0x10
000250  e9dd0201          LDRD     r0,r2,[sp,#4]
000254  f7fffffe          BL       f_write
000258  b948              CBNZ     r0,|L35.622|
;;;4747   		&& (UINT)pb.idx == nw) return pb.nchr;
00025a  9918              LDR      r1,[sp,#0x60]
00025c  9802              LDR      r0,[sp,#8]
00025e  4288              CMP      r0,r1
000260  d105              BNE      |L35.622|
000262  9803              LDR      r0,[sp,#0xc]
                  |L35.612|
;;;4748   	return EOF;
;;;4749   }
000264  b01b              ADD      sp,sp,#0x6c
000266  e8bd0ff0          POP      {r4-r11}
00026a  f85dfb14          LDR      pc,[sp],#0x14
                  |L35.622|
00026e  f04f30ff          MOV      r0,#0xffffffff        ;4748
000272  e7f7              B        |L35.612|
;;;4750   
                          ENDP


                          AREA ||i.f_putc||, CODE, READONLY, ALIGN=1

                  f_putc PROC
;;;4598   
;;;4599   int f_putc (
000000  b530              PUSH     {r4,r5,lr}
;;;4600   	TCHAR c,	/* A character to be output */
;;;4601   	FIL* fp		/* Pointer to the file object */
;;;4602   )
;;;4603   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4604   	putbuff pb;
;;;4605   	UINT nw;
;;;4606   
;;;4607   
;;;4608   	pb.fp = fp;			/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4609   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4610   
;;;4611   	putc_bfd(&pb, c);	/* Put a character */
000010  4621              MOV      r1,r4
000012  a802              ADD      r0,sp,#8
000014  f7fffffe          BL       putc_bfd
;;;4612   
;;;4613   	if (   pb.idx >= 0	/* Flush buffered characters to the file */
000018  9803              LDR      r0,[sp,#0xc]
00001a  2800              CMP      r0,#0
00001c  db0d              BLT      |L36.58|
;;;4614   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00001e  ab01              ADD      r3,sp,#4
000020  a905              ADD      r1,sp,#0x14
000022  e9dd0202          LDRD     r0,r2,[sp,#8]
000026  f7fffffe          BL       f_write
00002a  b930              CBNZ     r0,|L36.58|
;;;4615   		&& (UINT)pb.idx == nw) return pb.nchr;
00002c  9901              LDR      r1,[sp,#4]
00002e  9803              LDR      r0,[sp,#0xc]
000030  4288              CMP      r0,r1
000032  d102              BNE      |L36.58|
000034  9804              LDR      r0,[sp,#0x10]
                  |L36.54|
;;;4616   	return EOF;
;;;4617   }
000036  b015              ADD      sp,sp,#0x54
000038  bd30              POP      {r4,r5,pc}
                  |L36.58|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;4616
00003e  e7fa              B        |L36.54|
;;;4618   
                          ENDP


                          AREA ||i.f_puts||, CODE, READONLY, ALIGN=1

                  f_puts PROC
;;;4625   
;;;4626   int f_puts (
000000  b530              PUSH     {r4,r5,lr}
;;;4627   	const TCHAR* str,	/* Pointer to the string to be output */
;;;4628   	FIL* fp				/* Pointer to the file object */
;;;4629   )
;;;4630   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4631   	putbuff pb;
;;;4632   	UINT nw;
;;;4633   
;;;4634   
;;;4635   	pb.fp = fp;				/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4636   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4637   
;;;4638   	while (*str)			/* Put the string */
000010  e004              B        |L37.28|
                  |L37.18|
;;;4639   		putc_bfd(&pb, *str++);
000012  f9141b01          LDRSB    r1,[r4],#1
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       putc_bfd
                  |L37.28|
00001c  7820              LDRB     r0,[r4,#0]            ;4638
00001e  2800              CMP      r0,#0                 ;4638
000020  d1f7              BNE      |L37.18|
;;;4640   
;;;4641   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000022  9803              LDR      r0,[sp,#0xc]
000024  2800              CMP      r0,#0
000026  db0d              BLT      |L37.68|
;;;4642   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
000028  ab01              ADD      r3,sp,#4
00002a  a905              ADD      r1,sp,#0x14
00002c  e9dd0202          LDRD     r0,r2,[sp,#8]
000030  f7fffffe          BL       f_write
000034  b930              CBNZ     r0,|L37.68|
;;;4643   		&& (UINT)pb.idx == nw) return pb.nchr;
000036  9901              LDR      r1,[sp,#4]
000038  9803              LDR      r0,[sp,#0xc]
00003a  4288              CMP      r0,r1
00003c  d102              BNE      |L37.68|
00003e  9804              LDR      r0,[sp,#0x10]
                  |L37.64|
;;;4644   	return EOF;
;;;4645   }
000040  b015              ADD      sp,sp,#0x54
000042  bd30              POP      {r4,r5,pc}
                  |L37.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;4644
000048  e7fa              B        |L37.64|
;;;4646   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2657   
;;;2658   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2659   	FIL* fp, 		/* Pointer to the file object */
;;;2660   	void* buff,		/* Pointer to data buffer */
;;;2661   	UINT btr,		/* Number of bytes to read */
;;;2662   	UINT* br		/* Pointer to number of bytes read */
;;;2663   )
;;;2664   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2665   	FRESULT res;
;;;2666   	DWORD clst, sect, remain;
;;;2667   	UINT rcnt, cc;
;;;2668   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb010          LDR      r11,[sp,#0x10]
;;;2669   
;;;2670   
;;;2671   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2672   
;;;2673   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2674   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L38.42|
000022  9802              LDR      r0,[sp,#8]
                  |L38.36|
;;;2675   	if (fp->err)								/* Check error */
;;;2676   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2677   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2678   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2679   	remain = fp->fsize - fp->fptr;
;;;2680   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2681   
;;;2682   	for ( ;  btr;								/* Repeat until all data read */
;;;2683   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2684   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2685   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2686   			if (!csect) {						/* On the cluster boundary? */
;;;2687   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2688   					clst = fp->sclust;			/* Follow from the origin */
;;;2689   				} else {						/* Middle or end of the file */
;;;2690   #if _USE_FASTSEEK
;;;2691   					if (fp->cltbl)
;;;2692   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2693   					else
;;;2694   #endif
;;;2695   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2696   				}
;;;2697   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2698   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2699   				fp->clust = clst;				/* Update current cluster */
;;;2700   			}
;;;2701   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2702   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2703   			sect += csect;
;;;2704   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2705   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2706   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2707   					cc = fp->fs->csize - csect;
;;;2708   				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
;;;2709   					ABORT(fp->fs, FR_DISK_ERR);
;;;2710   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2711   #if _FS_TINY
;;;2712   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2713   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
;;;2714   #else
;;;2715   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2716   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
;;;2717   #endif
;;;2718   #endif
;;;2719   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2720   				continue;
;;;2721   			}
;;;2722   #if !_FS_TINY
;;;2723   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2724   #if !_FS_READONLY
;;;2725   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2726   					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
;;;2727   						ABORT(fp->fs, FR_DISK_ERR);
;;;2728   					fp->flag &= ~FA__DIRTY;
;;;2729   				}
;;;2730   #endif
;;;2731   				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2732   					ABORT(fp->fs, FR_DISK_ERR);
;;;2733   			}
;;;2734   #endif
;;;2735   			fp->dsect = sect;
;;;2736   		}
;;;2737   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2738   		if (rcnt > btr) rcnt = btr;
;;;2739   #if _FS_TINY
;;;2740   		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
;;;2741   			ABORT(fp->fs, FR_DISK_ERR);
;;;2742   		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2743   #else
;;;2744   		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2745   #endif
;;;2746   	}
;;;2747   
;;;2748   	LEAVE_FF(fp->fs, FR_OK);
;;;2749   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L38.42|
00002a  f2410007          MOV      r0,#0x1007            ;2675
00002e  5d00              LDRB     r0,[r0,r4]            ;2675
000030  b118              CBZ      r0,|L38.58|
000032  f2410007          MOV      r0,#0x1007            ;2676
000036  5d00              LDRB     r0,[r0,r4]            ;2676
000038  e7f4              B        |L38.36|
                  |L38.58|
00003a  f2410006          MOV      r0,#0x1006            ;2677
00003e  5d00              LDRB     r0,[r0,r4]            ;2677
000040  f0000001          AND      r0,r0,#1              ;2677
000044  b908              CBNZ     r0,|L38.74|
000046  2007              MOVS     r0,#7                 ;2678
000048  e7ec              B        |L38.36|
                  |L38.74|
00004a  f241000c          MOV      r0,#0x100c            ;2679
00004e  5901              LDR      r1,[r0,r4]            ;2679
000050  1f00              SUBS     r0,r0,#4              ;2679
000052  5900              LDR      r0,[r0,r4]            ;2679
000054  1a08              SUBS     r0,r1,r0              ;2679
000056  9000              STR      r0,[sp,#0]            ;2679
000058  9800              LDR      r0,[sp,#0]            ;2680
00005a  4285              CMP      r5,r0                 ;2680
00005c  d900              BLS      |L38.96|
00005e  9d00              LDR      r5,[sp,#0]            ;2680
                  |L38.96|
000060  e100              B        |L38.612|
                  |L38.98|
000062  f2410008          MOV      r0,#0x1008            ;2684
000066  5b00              LDRH     r0,[r0,r4]            ;2684
000068  f3c0000b          UBFX     r0,r0,#0,#12          ;2684
00006c  2800              CMP      r0,#0                 ;2684
00006e  d17d              BNE      |L38.364|
000070  f44f5080          MOV      r0,#0x1000            ;2685
000074  5900              LDR      r0,[r0,r4]            ;2685
000076  f5005080          ADD      r0,r0,#0x1000         ;2685
00007a  7880              LDRB     r0,[r0,#2]            ;2685
00007c  1e40              SUBS     r0,r0,#1              ;2685
00007e  f2410108          MOV      r1,#0x1008            ;2685
000082  5909              LDR      r1,[r1,r4]            ;2685
000084  ea003011          AND      r0,r0,r1,LSR #12      ;2685
000088  f00009ff          AND      r9,r0,#0xff           ;2685
00008c  f1b90f00          CMP      r9,#0                 ;2686
000090  d133              BNE      |L38.250|
000092  f2410008          MOV      r0,#0x1008            ;2687
000096  5900              LDR      r0,[r0,r4]            ;2687
000098  b920              CBNZ     r0,|L38.164|
00009a  f2410010          MOV      r0,#0x1010            ;2688
00009e  5900              LDR      r0,[r0,r4]            ;2688
0000a0  9001              STR      r0,[sp,#4]            ;2688
0000a2  e014              B        |L38.206|
                  |L38.164|
0000a4  f2410024          MOV      r0,#0x1024            ;2691
0000a8  5900              LDR      r0,[r0,r4]            ;2691
0000aa  b138              CBZ      r0,|L38.188|
0000ac  f2410008          MOV      r0,#0x1008            ;2692
0000b0  5901              LDR      r1,[r0,r4]            ;2692
0000b2  4620              MOV      r0,r4                 ;2692
0000b4  f7fffffe          BL       clmt_clust
0000b8  9001              STR      r0,[sp,#4]            ;2692
0000ba  e008              B        |L38.206|
                  |L38.188|
0000bc  f2410214          MOV      r2,#0x1014            ;2695
0000c0  5911              LDR      r1,[r2,r4]            ;2695
0000c2  f44f5280          MOV      r2,#0x1000            ;2695
0000c6  5910              LDR      r0,[r2,r4]            ;2695
0000c8  f7fffffe          BL       get_fat
0000cc  9001              STR      r0,[sp,#4]            ;2695
                  |L38.206|
0000ce  9801              LDR      r0,[sp,#4]            ;2697
0000d0  2802              CMP      r0,#2                 ;2697
0000d2  d205              BCS      |L38.224|
0000d4  2102              MOVS     r1,#2                 ;2697
0000d6  f2410007          MOV      r0,#0x1007            ;2697
0000da  5501              STRB     r1,[r0,r4]            ;2697
0000dc  2002              MOVS     r0,#2                 ;2697
0000de  e7a1              B        |L38.36|
                  |L38.224|
0000e0  9801              LDR      r0,[sp,#4]            ;2698
0000e2  1c40              ADDS     r0,r0,#1              ;2698
0000e4  b928              CBNZ     r0,|L38.242|
0000e6  2101              MOVS     r1,#1                 ;2698
0000e8  f2410007          MOV      r0,#0x1007            ;2698
0000ec  5501              STRB     r1,[r0,r4]            ;2698
0000ee  2001              MOVS     r0,#1                 ;2698
0000f0  e798              B        |L38.36|
                  |L38.242|
0000f2  f2410114          MOV      r1,#0x1014            ;2699
0000f6  9801              LDR      r0,[sp,#4]            ;2699
0000f8  5108              STR      r0,[r1,r4]            ;2699
                  |L38.250|
0000fa  f2410214          MOV      r2,#0x1014            ;2701
0000fe  5911              LDR      r1,[r2,r4]            ;2701
000100  f44f5280          MOV      r2,#0x1000            ;2701
000104  5910              LDR      r0,[r2,r4]            ;2701
000106  f7fffffe          BL       clust2sect
00010a  4606              MOV      r6,r0                 ;2701
00010c  b92e              CBNZ     r6,|L38.282|
00010e  2102              MOVS     r1,#2                 ;2702
000110  f2410007          MOV      r0,#0x1007            ;2702
000114  5501              STRB     r1,[r0,r4]            ;2702
000116  2002              MOVS     r0,#2                 ;2702
000118  e784              B        |L38.36|
                  |L38.282|
00011a  444e              ADD      r6,r6,r9              ;2703
00011c  ea4f3815          LSR      r8,r5,#12             ;2704
000120  f1b80f00          CMP      r8,#0                 ;2705
000124  d03f              BEQ      |L38.422|
000126  eb090108          ADD      r1,r9,r8              ;2706
00012a  f44f5080          MOV      r0,#0x1000            ;2706
00012e  5900              LDR      r0,[r0,r4]            ;2706
000130  f5005080          ADD      r0,r0,#0x1000         ;2706
000134  7880              LDRB     r0,[r0,#2]            ;2706
000136  4281              CMP      r1,r0                 ;2706
000138  d907              BLS      |L38.330|
00013a  f44f5080          MOV      r0,#0x1000            ;2707
00013e  5900              LDR      r0,[r0,r4]            ;2707
000140  f5005080          ADD      r0,r0,#0x1000         ;2707
000144  7880              LDRB     r0,[r0,#2]            ;2707
000146  eba00809          SUB      r8,r0,r9              ;2707
                  |L38.330|
00014a  f44f5180          MOV      r1,#0x1000            ;2708
00014e  5909              LDR      r1,[r1,r4]            ;2708
000150  f5015180          ADD      r1,r1,#0x1000         ;2708
000154  7848              LDRB     r0,[r1,#1]            ;2708
000156  4643              MOV      r3,r8                 ;2708
000158  4632              MOV      r2,r6                 ;2708
00015a  4659              MOV      r1,r11                ;2708
00015c  f7fffffe          BL       disk_read
000160  b138              CBZ      r0,|L38.370|
000162  2101              MOVS     r1,#1                 ;2709
000164  f2410007          MOV      r0,#0x1007            ;2709
000168  5501              STRB     r1,[r0,r4]            ;2709
00016a  e000              B        |L38.366|
                  |L38.364|
00016c  e057              B        |L38.542|
                  |L38.366|
00016e  2001              MOVS     r0,#1                 ;2709
000170  e758              B        |L38.36|
                  |L38.370|
000172  f2410006          MOV      r0,#0x1006            ;2715
000176  5d00              LDRB     r0,[r0,r4]            ;2715
000178  f0000040          AND      r0,r0,#0x40           ;2715
00017c  b180              CBZ      r0,|L38.416|
00017e  f2410018          MOV      r0,#0x1018            ;2715
000182  5900              LDR      r0,[r0,r4]            ;2715
000184  1b80              SUBS     r0,r0,r6              ;2715
000186  4540              CMP      r0,r8                 ;2715
000188  d20a              BCS      |L38.416|
00018a  f2410118          MOV      r1,#0x1018            ;2716
00018e  5909              LDR      r1,[r1,r4]            ;2716
000190  1b89              SUBS     r1,r1,r6              ;2716
000192  eb0b3001          ADD      r0,r11,r1,LSL #12     ;2716
000196  f44f5280          MOV      r2,#0x1000            ;2716
00019a  4621              MOV      r1,r4                 ;2716
00019c  f7fffffe          BL       mem_cpy
                  |L38.416|
0001a0  ea4f3708          LSL      r7,r8,#12             ;2719
0001a4  e050              B        |L38.584|
                  |L38.422|
0001a6  f2410018          MOV      r0,#0x1018            ;2723
0001aa  5900              LDR      r0,[r0,r4]            ;2723
0001ac  42b0              CMP      r0,r6                 ;2723
0001ae  d033              BEQ      |L38.536|
0001b0  f2410006          MOV      r0,#0x1006            ;2725
0001b4  5d00              LDRB     r0,[r0,r4]            ;2725
0001b6  f0000040          AND      r0,r0,#0x40           ;2725
0001ba  b1d8              CBZ      r0,|L38.500|
0001bc  f2410118          MOV      r1,#0x1018            ;2726
0001c0  590a              LDR      r2,[r1,r4]            ;2726
0001c2  f44f5180          MOV      r1,#0x1000            ;2726
0001c6  5909              LDR      r1,[r1,r4]            ;2726
0001c8  f5015180          ADD      r1,r1,#0x1000         ;2726
0001cc  7848              LDRB     r0,[r1,#1]            ;2726
0001ce  2301              MOVS     r3,#1                 ;2726
0001d0  4621              MOV      r1,r4                 ;2726
0001d2  f7fffffe          BL       disk_write
0001d6  b128              CBZ      r0,|L38.484|
0001d8  2101              MOVS     r1,#1                 ;2727
0001da  f2410007          MOV      r0,#0x1007            ;2727
0001de  5501              STRB     r1,[r0,r4]            ;2727
0001e0  2001              MOVS     r0,#1                 ;2727
0001e2  e71f              B        |L38.36|
                  |L38.484|
0001e4  f2410006          MOV      r0,#0x1006            ;2728
0001e8  5d00              LDRB     r0,[r0,r4]            ;2728
0001ea  f0200140          BIC      r1,r0,#0x40           ;2728
0001ee  f2410006          MOV      r0,#0x1006            ;2728
0001f2  5501              STRB     r1,[r0,r4]            ;2728
                  |L38.500|
0001f4  f44f5180          MOV      r1,#0x1000            ;2731
0001f8  5909              LDR      r1,[r1,r4]            ;2731
0001fa  f5015180          ADD      r1,r1,#0x1000         ;2731
0001fe  7848              LDRB     r0,[r1,#1]            ;2731
000200  2301              MOVS     r3,#1                 ;2731
000202  4632              MOV      r2,r6                 ;2731
000204  4621              MOV      r1,r4                 ;2731
000206  f7fffffe          BL       disk_read
00020a  b128              CBZ      r0,|L38.536|
00020c  2101              MOVS     r1,#1                 ;2732
00020e  f2410007          MOV      r0,#0x1007            ;2732
000212  5501              STRB     r1,[r0,r4]            ;2732
000214  2001              MOVS     r0,#1                 ;2732
000216  e705              B        |L38.36|
                  |L38.536|
000218  f2410018          MOV      r0,#0x1018            ;2735
00021c  5106              STR      r6,[r0,r4]            ;2735
                  |L38.542|
00021e  f2410008          MOV      r0,#0x1008            ;2737
000222  5b00              LDRH     r0,[r0,r4]            ;2737
000224  f3c0000b          UBFX     r0,r0,#0,#12          ;2737
000228  f5c05780          RSB      r7,r0,#0x1000         ;2737
00022c  42af              CMP      r7,r5                 ;2738
00022e  d900              BLS      |L38.562|
000230  462f              MOV      r7,r5                 ;2738
                  |L38.562|
000232  f2410008          MOV      r0,#0x1008            ;2744
000236  5b00              LDRH     r0,[r0,r4]            ;2744
000238  f3c0000b          UBFX     r0,r0,#0,#12          ;2744
00023c  1901              ADDS     r1,r0,r4              ;2744
00023e  463a              MOV      r2,r7                 ;2744
000240  4658              MOV      r0,r11                ;2744
000242  f7fffffe          BL       mem_cpy
000246  bf00              NOP                            ;2720
                  |L38.584|
000248  44bb              ADD      r11,r11,r7            ;2683
00024a  f2410008          MOV      r0,#0x1008            ;2683
00024e  5900              LDR      r0,[r0,r4]            ;2683
000250  19c1              ADDS     r1,r0,r7              ;2683
000252  f2410008          MOV      r0,#0x1008            ;2683
000256  5101              STR      r1,[r0,r4]            ;2683
000258  f8da0000          LDR      r0,[r10,#0]           ;2683
00025c  4438              ADD      r0,r0,r7              ;2683
00025e  f8ca0000          STR      r0,[r10,#0]           ;2683
000262  1bed              SUBS     r5,r5,r7              ;2683
                  |L38.612|
000264  2d00              CMP      r5,#0                 ;2682
000266  f47faefc          BNE      |L38.98|
00026a  2000              MOVS     r0,#0                 ;2748
00026c  e6da              B        |L38.36|
;;;2750   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;3347   
;;;3348   FRESULT f_readdir (
000000  b570              PUSH     {r4-r6,lr}
;;;3349   	DIR* dp,			/* Pointer to the open directory object */
;;;3350   	FILINFO* fno		/* Pointer to file information to return */
;;;3351   )
;;;3352   {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;3353   	FRESULT res;
;;;3354   	DEFINE_NAMEBUF;
;;;3355   
;;;3356   
;;;3357   	res = validate(dp);						/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  4605              MOV      r5,r0
;;;3358   	if (res == FR_OK) {
000010  bb5d              CBNZ     r5,|L39.106|
;;;3359   		if (!fno) {
000012  b92e              CBNZ     r6,|L39.32|
;;;3360   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       dir_sdi
00001c  4605              MOV      r5,r0
00001e  e024              B        |L39.106|
                  |L39.32|
;;;3361   		} else {
;;;3362   			INIT_BUF(*dp);
000020  a90d              ADD      r1,sp,#0x34
000022  f2410018          MOV      r0,#0x1018
000026  5101              STR      r1,[r0,r4]
000028  f44f5081          MOV      r0,#0x1020
00002c  f840d004          STR      sp,[r0,r4]
;;;3363   			res = dir_read(dp, 0);			/* Read an item */
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dir_read
000038  4605              MOV      r5,r0
;;;3364   			if (res == FR_NO_FILE) {		/* Reached end of directory */
00003a  2d04              CMP      r5,#4
00003c  d104              BNE      |L39.72|
;;;3365   				dp->sect = 0;
00003e  2100              MOVS     r1,#0
000040  f2410010          MOV      r0,#0x1010
000044  5101              STR      r1,[r0,r4]
;;;3366   				res = FR_OK;
000046  2500              MOVS     r5,#0
                  |L39.72|
;;;3367   			}
;;;3368   			if (res == FR_OK) {				/* A valid entry is found */
000048  b97d              CBNZ     r5,|L39.106|
;;;3369   				get_fileinfo(dp, fno);		/* Get the object information */
00004a  4631              MOV      r1,r6
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       get_fileinfo
;;;3370   				res = dir_next(dp, 0);		/* Increment index for next */
000052  2100              MOVS     r1,#0
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       dir_next
00005a  4605              MOV      r5,r0
;;;3371   				if (res == FR_NO_FILE) {
00005c  2d04              CMP      r5,#4
00005e  d104              BNE      |L39.106|
;;;3372   					dp->sect = 0;
000060  2100              MOVS     r1,#0
000062  f2410010          MOV      r0,#0x1010
000066  5101              STR      r1,[r0,r4]
;;;3373   					res = FR_OK;
000068  2500              MOVS     r5,#0
                  |L39.106|
;;;3374   				}
;;;3375   			}
;;;3376   			FREE_BUF();
;;;3377   		}
;;;3378   	}
;;;3379   
;;;3380   	LEAVE_FF(dp->fs, res);
00006a  4628              MOV      r0,r5
;;;3381   }
00006c  b010              ADD      sp,sp,#0x40
00006e  bd70              POP      {r4-r6,pc}
;;;3382   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;3785   
;;;3786   FRESULT f_rename (
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;3787   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3788   	const TCHAR* path_new	/* Pointer to the new name */
;;;3789   )
;;;3790   {
000004  f5ad5d03          SUB      sp,sp,#0x20c0
;;;3791   	FRESULT res;
;;;3792   	DIR djo, djn;
;;;3793   	BYTE buf[21], *dir;
;;;3794   	DWORD dw;
;;;3795   	DEFINE_NAMEBUF;
;;;3796   
;;;3797   
;;;3798   	/* Get logical drive number of the source object */
;;;3799   	res = find_volume(&djo.fs, &path_old, 1);
000008  2201              MOVS     r2,#1
00000a  f50d5103          ADD      r1,sp,#0x20c0
00000e  f1a1002c          SUB      r0,r1,#0x2c
000012  f7fffffe          BL       find_volume
000016  4604              MOV      r4,r0
;;;3800   	if (res == FR_OK) {
000018  2c00              CMP      r4,#0
                  |L40.26|
00001a  d12f              BNE      |L40.124|
;;;3801   		djn.fs = djo.fs;
00001c  f50d5000          ADD      r0,sp,#0x2000
000020  f8d01094          LDR      r1,[r0,#0x94]
000024  f50d5080          ADD      r0,sp,#0x1000
000028  6681              STR      r1,[r0,#0x68]
;;;3802   		INIT_BUF(djo);
00002a  a911              ADD      r1,sp,#0x44
00002c  f50d5000          ADD      r0,sp,#0x2000
000030  f8c010ac          STR      r1,[r0,#0xac]
000034  a904              ADD      r1,sp,#0x10
000036  f8c010b4          STR      r1,[r0,#0xb4]
;;;3803   		res = follow_path(&djo, path_old);		/* Check old object */
00003a  f8d010c0          LDR      r1,[r0,#0xc0]
00003e  f6a0706c          SUB      r0,r0,#0xf6c
000042  f7fffffe          BL       follow_path
000046  4604              MOV      r4,r0
;;;3804   		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
000048  b944              CBNZ     r4,|L40.92|
00004a  f50d5000          ADD      r0,sp,#0x2000
00004e  f8d000ac          LDR      r0,[r0,#0xac]
000052  7ac0              LDRB     r0,[r0,#0xb]
000054  f0000020          AND      r0,r0,#0x20
000058  b100              CBZ      r0,|L40.92|
;;;3805   			res = FR_INVALID_NAME;
00005a  2406              MOVS     r4,#6
                  |L40.92|
;;;3806   #if _FS_LOCK
;;;3807   		if (res == FR_OK) res = chk_lock(&djo, 2);
00005c  b934              CBNZ     r4,|L40.108|
00005e  2102              MOVS     r1,#2
000060  f2410094          MOV      r0,#0x1094
000064  4468              ADD      r0,r0,sp
000066  f7fffffe          BL       chk_lock
00006a  4604              MOV      r4,r0
                  |L40.108|
;;;3808   #endif
;;;3809   		if (res == FR_OK) {						/* Old object is found */
00006c  2c00              CMP      r4,#0
00006e  d1d4              BNE      |L40.26|
;;;3810   			if (!djo.dir) {						/* Is root dir? */
000070  f50d5000          ADD      r0,sp,#0x2000
000074  f8d000a8          LDR      r0,[r0,#0xa8]
000078  b908              CBNZ     r0,|L40.126|
;;;3811   				res = FR_NO_FILE;
00007a  2404              MOVS     r4,#4
                  |L40.124|
00007c  e092              B        |L40.420|
                  |L40.126|
;;;3812   			} else {
;;;3813   				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
00007e  f50d5000          ADD      r0,sp,#0x2000
000082  f8d000a8          LDR      r0,[r0,#0xa8]
000086  f100010b          ADD      r1,r0,#0xb
00008a  2215              MOVS     r2,#0x15
00008c  a814              ADD      r0,sp,#0x50
00008e  f7fffffe          BL       mem_cpy
;;;3814   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
000092  f241022c          MOV      r2,#0x102c
000096  f2410194          MOV      r1,#0x1094
00009a  4469              ADD      r1,r1,sp
00009c  a81a              ADD      r0,sp,#0x68
00009e  f7fffffe          BL       mem_cpy
;;;3815   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
0000a2  f24200c4          MOV      r0,#0x20c4
0000a6  4468              ADD      r0,r0,sp
0000a8  f7fffffe          BL       get_ldnumber
0000ac  2800              CMP      r0,#0
0000ae  db08              BLT      |L40.194|
;;;3816   					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
0000b0  f50d5000          ADD      r0,sp,#0x2000
0000b4  f8d010c4          LDR      r1,[r0,#0xc4]
0000b8  a81a              ADD      r0,sp,#0x68
0000ba  f7fffffe          BL       follow_path
0000be  4604              MOV      r4,r0
0000c0  e000              B        |L40.196|
                  |L40.194|
;;;3817   				else
;;;3818   					res = FR_INVALID_DRIVE;
0000c2  240b              MOVS     r4,#0xb
                  |L40.196|
;;;3819   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
0000c4  b904              CBNZ     r4,|L40.200|
0000c6  2408              MOVS     r4,#8
                  |L40.200|
;;;3820   				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
0000c8  2c04              CMP      r4,#4
0000ca  d16b              BNE      |L40.420|
;;;3821   					res = dir_register(&djn);			/* Register the new entry */
0000cc  a81a              ADD      r0,sp,#0x68
0000ce  f7fffffe          BL       dir_register
0000d2  4604              MOV      r4,r0
;;;3822   					if (res == FR_OK) {
0000d4  2c00              CMP      r4,#0
0000d6  d165              BNE      |L40.420|
;;;3823   /* Start of critical section where any interruption can cause a cross-link */
;;;3824   						dir = djn.dir;					/* Copy information about object except name */
0000d8  f50d5080          ADD      r0,sp,#0x1000
0000dc  6fc5              LDR      r5,[r0,#0x7c]
;;;3825   						mem_cpy(dir + 13, buf + 2, 19);
0000de  2213              MOVS     r2,#0x13
0000e0  f10d0152          ADD      r1,sp,#0x52
0000e4  f105000d          ADD      r0,r5,#0xd
0000e8  f7fffffe          BL       mem_cpy
;;;3826   						dir[DIR_Attr] = buf[0] | AM_ARC;
0000ec  f89d0050          LDRB     r0,[sp,#0x50]
0000f0  f0400120          ORR      r1,r0,#0x20
0000f4  72e9              STRB     r1,[r5,#0xb]
;;;3827   						djo.fs->wflag = 1;
0000f6  2101              MOVS     r1,#1
0000f8  f50d5000          ADD      r0,sp,#0x2000
0000fc  f8d00094          LDR      r0,[r0,#0x94]
000100  f5005080          ADD      r0,r0,#0x1000
000104  7101              STRB     r1,[r0,#4]
;;;3828   						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
000106  7ae8              LDRB     r0,[r5,#0xb]
000108  f0000010          AND      r0,r0,#0x10
00010c  b3d8              CBZ      r0,|L40.390|
00010e  f50d5000          ADD      r0,sp,#0x2000
000112  f8d0109c          LDR      r1,[r0,#0x9c]
000116  f50d5080          ADD      r0,sp,#0x1000
00011a  6f00              LDR      r0,[r0,#0x70]
00011c  4281              CMP      r1,r0
00011e  d032              BEQ      |L40.390|
;;;3829   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
000120  f50d5100          ADD      r1,sp,#0x2000
000124  f8d10094          LDR      r0,[r1,#0x94]
000128  4629              MOV      r1,r5
00012a  f7fffffe          BL       ld_clust
00012e  4607              MOV      r7,r0
000130  f50d5100          ADD      r1,sp,#0x2000
000134  f8d10094          LDR      r0,[r1,#0x94]
000138  4639              MOV      r1,r7
00013a  f7fffffe          BL       clust2sect
00013e  4606              MOV      r6,r0
;;;3830   							if (!dw) {
000140  b90e              CBNZ     r6,|L40.326|
;;;3831   								res = FR_INT_ERR;
000142  2402              MOVS     r4,#2
000144  e01f              B        |L40.390|
                  |L40.326|
;;;3832   							} else {
;;;3833   								res = move_window(djo.fs, dw);
000146  f50d5100          ADD      r1,sp,#0x2000
00014a  f8d10094          LDR      r0,[r1,#0x94]
00014e  4631              MOV      r1,r6
000150  f7fffffe          BL       move_window
000154  4604              MOV      r4,r0
;;;3834   								dir = djo.fs->win.d8 + SZ_DIRE * 1;	/* Ptr to .. entry */
000156  f50d5000          ADD      r0,sp,#0x2000
00015a  f8d01094          LDR      r1,[r0,#0x94]
00015e  f1010520          ADD      r5,r1,#0x20
;;;3835   								if (res == FR_OK && dir[1] == '.') {
000162  b984              CBNZ     r4,|L40.390|
000164  7868              LDRB     r0,[r5,#1]
000166  282e              CMP      r0,#0x2e
000168  d10d              BNE      |L40.390|
;;;3836   									st_clust(dir, djn.sclust);
00016a  f50d5080          ADD      r0,sp,#0x1000
00016e  6f01              LDR      r1,[r0,#0x70]
000170  4628              MOV      r0,r5
000172  f7fffffe          BL       st_clust
;;;3837   									djo.fs->wflag = 1;
000176  2101              MOVS     r1,#1
000178  f50d5000          ADD      r0,sp,#0x2000
00017c  f8d00094          LDR      r0,[r0,#0x94]
000180  f5005080          ADD      r0,r0,#0x1000
000184  7101              STRB     r1,[r0,#4]
                  |L40.390|
;;;3838   								}
;;;3839   							}
;;;3840   						}
;;;3841   						if (res == FR_OK) {
000186  b96c              CBNZ     r4,|L40.420|
;;;3842   							res = dir_remove(&djo);		/* Remove old entry */
000188  f2410094          MOV      r0,#0x1094
00018c  4468              ADD      r0,r0,sp
00018e  f7fffffe          BL       dir_remove
000192  4604              MOV      r4,r0
;;;3843   							if (res == FR_OK)
000194  b934              CBNZ     r4,|L40.420|
;;;3844   								res = sync_fs(djo.fs);
000196  f50d5100          ADD      r1,sp,#0x2000
00019a  f8d10094          LDR      r0,[r1,#0x94]
00019e  f7fffffe          BL       sync_fs
0001a2  4604              MOV      r4,r0
                  |L40.420|
;;;3845   						}
;;;3846   /* End of critical section */
;;;3847   					}
;;;3848   				}
;;;3849   			}
;;;3850   		}
;;;3851   		FREE_BUF();
;;;3852   	}
;;;3853   
;;;3854   	LEAVE_FF(djo.fs, res);
0001a4  4620              MOV      r0,r4
;;;3855   }
0001a6  b032              ADD      sp,sp,#0xc8
0001a8  f50d5d00          ADD      sp,sp,#0x2000
0001ac  e8bd81f0          POP      {r4-r8,pc}
;;;3856   
                          ENDP


                          AREA ||i.f_setlabel||, CODE, READONLY, ALIGN=2

                  f_setlabel PROC
;;;3978   
;;;3979   FRESULT f_setlabel (
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;3980   	const TCHAR* label	/* Pointer to the volume label to set */
;;;3981   )
;;;3982   {
000004  f5ad5d82          SUB      sp,sp,#0x1040
;;;3983   	FRESULT res;
;;;3984   	DIR dj;
;;;3985   	BYTE vn[11];
;;;3986   	UINT i, j, sl;
;;;3987   	WCHAR w;
;;;3988   	DWORD tm;
;;;3989   
;;;3990   
;;;3991   	/* Get logical drive number */
;;;3992   	res = find_volume(&dj.fs, &label, 1);
000008  2201              MOVS     r2,#1
00000a  f50d5182          ADD      r1,sp,#0x1040
00000e  f1a1002c          SUB      r0,r1,#0x2c
000012  f7fffffe          BL       find_volume
000016  4607              MOV      r7,r0
;;;3993   	if (res) LEAVE_FF(dj.fs, res);
000018  b12f              CBZ      r7,|L41.38|
00001a  4638              MOV      r0,r7
                  |L41.28|
;;;3994   
;;;3995   	/* Create a volume label in directory form */
;;;3996   	vn[0] = 0;
;;;3997   	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
;;;3998   	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
;;;3999   	if (sl) {	/* Create volume label in directory form */
;;;4000   		i = j = 0;
;;;4001   		do {
;;;4002   #if _USE_LFN && _LFN_UNICODE
;;;4003   			w = ff_convert(ff_wtoupper(label[i++]), 0);
;;;4004   #else
;;;4005   			w = (BYTE)label[i++];
;;;4006   			if (IsDBCS1(w))
;;;4007   				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
;;;4008   #if _USE_LFN
;;;4009   			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
;;;4010   #else
;;;4011   			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
;;;4012   #ifdef _EXCVT
;;;4013   			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
;;;4014   #else
;;;4015   			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
;;;4016   #endif
;;;4017   #endif
;;;4018   #endif
;;;4019   			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
;;;4020   				LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;4021   			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
;;;4022   			vn[j++] = (BYTE)w;
;;;4023   		} while (i < sl);
;;;4024   		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
;;;4025   		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
;;;4026   	}
;;;4027   
;;;4028   	/* Set volume label */
;;;4029   	dj.sclust = 0;					/* Open root directory */
;;;4030   	res = dir_sdi(&dj, 0);
;;;4031   	if (res == FR_OK) {
;;;4032   		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
;;;4033   		if (res == FR_OK) {			/* A volume label is found */
;;;4034   			if (vn[0]) {
;;;4035   				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
;;;4036   				tm = GET_FATTIME();
;;;4037   				ST_DWORD(dj.dir + DIR_WrtTime, tm);
;;;4038   			} else {
;;;4039   				dj.dir[0] = DDEM;			/* Remove the volume label */
;;;4040   			}
;;;4041   			dj.fs->wflag = 1;
;;;4042   			res = sync_fs(dj.fs);
;;;4043   		} else {					/* No volume label is found or error */
;;;4044   			if (res == FR_NO_FILE) {
;;;4045   				res = FR_OK;
;;;4046   				if (vn[0]) {				/* Create volume label as new */
;;;4047   					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
;;;4048   					if (res == FR_OK) {
;;;4049   						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
;;;4050   						mem_cpy(dj.dir, vn, 11);
;;;4051   						dj.dir[DIR_Attr] = AM_VOL;
;;;4052   						tm = GET_FATTIME();
;;;4053   						ST_DWORD(dj.dir + DIR_WrtTime, tm);
;;;4054   						dj.fs->wflag = 1;
;;;4055   						res = sync_fs(dj.fs);
;;;4056   					}
;;;4057   				}
;;;4058   			}
;;;4059   		}
;;;4060   	}
;;;4061   
;;;4062   	LEAVE_FF(dj.fs, res);
;;;4063   }
00001c  b011              ADD      sp,sp,#0x44
00001e  f50d5d80          ADD      sp,sp,#0x1000
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L41.38|
000026  2100              MOVS     r1,#0                 ;3996
000028  f88d1008          STRB     r1,[sp,#8]            ;3996
00002c  2500              MOVS     r5,#0                 ;3997
00002e  e000              B        |L41.50|
                  |L41.48|
000030  1c6d              ADDS     r5,r5,#1              ;3997
                  |L41.50|
000032  f50d5080          ADD      r0,sp,#0x1000         ;3997
000036  6c01              LDR      r1,[r0,#0x40]         ;3997
000038  5d48              LDRB     r0,[r1,r5]            ;3997
00003a  2800              CMP      r0,#0                 ;3997
00003c  d1f8              BNE      |L41.48|
00003e  e000              B        |L41.66|
                  |L41.64|
000040  1e6d              SUBS     r5,r5,#1              ;3998
                  |L41.66|
000042  b135              CBZ      r5,|L41.82|
000044  1e68              SUBS     r0,r5,#1              ;3998
000046  f50d5180          ADD      r1,sp,#0x1000         ;3998
00004a  6c09              LDR      r1,[r1,#0x40]         ;3998
00004c  5c08              LDRB     r0,[r1,r0]            ;3998
00004e  2820              CMP      r0,#0x20              ;3998
000050  d0f6              BEQ      |L41.64|
                  |L41.82|
000052  2d00              CMP      r5,#0                 ;3999
000054  d044              BEQ      |L41.224|
000056  f04f0800          MOV      r8,#0                 ;4000
00005a  46c1              MOV      r9,r8                 ;4000
00005c  bf00              NOP                            ;4001
                  |L41.94|
00005e  4649              MOV      r1,r9                 ;4005
000060  f1090901          ADD      r9,r9,#1              ;4005
000064  f50d5080          ADD      r0,sp,#0x1000         ;4005
000068  6c00              LDR      r0,[r0,#0x40]         ;4005
00006a  5c46              LDRB     r6,[r0,r1]            ;4005
00006c  2101              MOVS     r1,#1                 ;4009
00006e  4630              MOV      r0,r6                 ;4009
000070  f7fffffe          BL       ff_convert
000074  4683              MOV      r11,r0                ;4009
000076  f7fffffe          BL       ff_wtoupper
00007a  4682              MOV      r10,r0                ;4009
00007c  2100              MOVS     r1,#0                 ;4009
00007e  f7fffffe          BL       ff_convert
000082  4606              MOV      r6,r0                 ;4009
000084  b15e              CBZ      r6,|L41.158|
000086  4631              MOV      r1,r6                 ;4019
000088  a059              ADR      r0,|L41.496|
00008a  f7fffffe          BL       chk_chr
00008e  b930              CBNZ     r0,|L41.158|
000090  2eff              CMP      r6,#0xff              ;4019
000092  dd01              BLE      |L41.152|
000094  200a              MOVS     r0,#0xa               ;4019
000096  e000              B        |L41.154|
                  |L41.152|
000098  200b              MOVS     r0,#0xb               ;4019
                  |L41.154|
00009a  4540              CMP      r0,r8                 ;4019
00009c  d801              BHI      |L41.162|
                  |L41.158|
00009e  2006              MOVS     r0,#6                 ;4020
0000a0  e7bc              B        |L41.28|
                  |L41.162|
0000a2  2eff              CMP      r6,#0xff              ;4021
0000a4  dd05              BLE      |L41.178|
0000a6  1232              ASRS     r2,r6,#8              ;4021
0000a8  4640              MOV      r0,r8                 ;4021
0000aa  f1080801          ADD      r8,r8,#1              ;4021
0000ae  a902              ADD      r1,sp,#8              ;4021
0000b0  540a              STRB     r2,[r1,r0]            ;4021
                  |L41.178|
0000b2  4640              MOV      r0,r8                 ;4022
0000b4  f1080801          ADD      r8,r8,#1              ;4022
0000b8  a902              ADD      r1,sp,#8              ;4022
0000ba  540e              STRB     r6,[r1,r0]            ;4022
0000bc  45a9              CMP      r9,r5                 ;4023
0000be  d3ce              BCC      |L41.94|
0000c0  e005              B        |L41.206|
                  |L41.194|
0000c2  2220              MOVS     r2,#0x20              ;4024
0000c4  4640              MOV      r0,r8                 ;4024
0000c6  f1080801          ADD      r8,r8,#1              ;4024
0000ca  a902              ADD      r1,sp,#8              ;4024
0000cc  540a              STRB     r2,[r1,r0]            ;4024
                  |L41.206|
0000ce  f1b80f0b          CMP      r8,#0xb               ;4024
0000d2  d3f6              BCC      |L41.194|
0000d4  f89d0008          LDRB     r0,[sp,#8]            ;4025
0000d8  28e5              CMP      r0,#0xe5              ;4025
0000da  d101              BNE      |L41.224|
0000dc  2006              MOVS     r0,#6                 ;4025
0000de  e79d              B        |L41.28|
                  |L41.224|
0000e0  2100              MOVS     r1,#0                 ;4029
0000e2  f50d5080          ADD      r0,sp,#0x1000         ;4029
0000e6  61c1              STR      r1,[r0,#0x1c]         ;4029
0000e8  a805              ADD      r0,sp,#0x14           ;4030
0000ea  f7fffffe          BL       dir_sdi
0000ee  4607              MOV      r7,r0                 ;4030
0000f0  2f00              CMP      r7,#0                 ;4031
0000f2  d17a              BNE      |L41.490|
0000f4  2101              MOVS     r1,#1                 ;4032
0000f6  a805              ADD      r0,sp,#0x14           ;4032
0000f8  f7fffffe          BL       dir_read
0000fc  4607              MOV      r7,r0                 ;4032
0000fe  bb8f              CBNZ     r7,|L41.356|
000100  f89d0008          LDRB     r0,[sp,#8]            ;4034
000104  b1e8              CBZ      r0,|L41.322|
000106  f50d5180          ADD      r1,sp,#0x1000         ;4035
00010a  220b              MOVS     r2,#0xb               ;4035
00010c  6a88              LDR      r0,[r1,#0x28]         ;4035
00010e  a902              ADD      r1,sp,#8              ;4035
000110  f7fffffe          BL       mem_cpy
000114  f7fffffe          BL       get_fattime
000118  4604              MOV      r4,r0                 ;4036
00011a  f50d5080          ADD      r0,sp,#0x1000         ;4037
00011e  6a80              LDR      r0,[r0,#0x28]         ;4037
000120  7584              STRB     r4,[r0,#0x16]         ;4037
000122  0a21              LSRS     r1,r4,#8              ;4037
000124  f50d5080          ADD      r0,sp,#0x1000         ;4037
000128  6a80              LDR      r0,[r0,#0x28]         ;4037
00012a  75c1              STRB     r1,[r0,#0x17]         ;4037
00012c  0c21              LSRS     r1,r4,#16             ;4037
00012e  f50d5080          ADD      r0,sp,#0x1000         ;4037
000132  6a80              LDR      r0,[r0,#0x28]         ;4037
000134  7601              STRB     r1,[r0,#0x18]         ;4037
000136  0e21              LSRS     r1,r4,#24             ;4037
000138  f50d5080          ADD      r0,sp,#0x1000         ;4037
00013c  6a80              LDR      r0,[r0,#0x28]         ;4037
00013e  7641              STRB     r1,[r0,#0x19]         ;4037
000140  e004              B        |L41.332|
                  |L41.322|
000142  20e5              MOVS     r0,#0xe5              ;4039
000144  f50d5180          ADD      r1,sp,#0x1000         ;4039
000148  6a89              LDR      r1,[r1,#0x28]         ;4039
00014a  7008              STRB     r0,[r1,#0]            ;4039
                  |L41.332|
00014c  2201              MOVS     r2,#1                 ;4041
00014e  f50d5180          ADD      r1,sp,#0x1000         ;4041
000152  6948              LDR      r0,[r1,#0x14]         ;4041
000154  f5005080          ADD      r0,r0,#0x1000         ;4041
000158  7102              STRB     r2,[r0,#4]            ;4041
00015a  6948              LDR      r0,[r1,#0x14]         ;4042
00015c  f7fffffe          BL       sync_fs
000160  4607              MOV      r7,r0                 ;4042
000162  e042              B        |L41.490|
                  |L41.356|
000164  e7ff              B        |L41.358|
                  |L41.358|
000166  2f04              CMP      r7,#4                 ;4044
000168  d13f              BNE      |L41.490|
00016a  2700              MOVS     r7,#0                 ;4045
00016c  f89d0008          LDRB     r0,[sp,#8]            ;4046
000170  b3d8              CBZ      r0,|L41.490|
000172  2101              MOVS     r1,#1                 ;4047
000174  a805              ADD      r0,sp,#0x14           ;4047
000176  f7fffffe          BL       dir_alloc
00017a  4607              MOV      r7,r0                 ;4047
00017c  bbaf              CBNZ     r7,|L41.490|
00017e  f50d5180          ADD      r1,sp,#0x1000         ;4049
000182  2220              MOVS     r2,#0x20              ;4049
000184  6a88              LDR      r0,[r1,#0x28]         ;4049
000186  2100              MOVS     r1,#0                 ;4049
000188  f7fffffe          BL       mem_set
00018c  f50d5180          ADD      r1,sp,#0x1000         ;4050
000190  220b              MOVS     r2,#0xb               ;4050
000192  6a88              LDR      r0,[r1,#0x28]         ;4050
000194  a902              ADD      r1,sp,#8              ;4050
000196  f7fffffe          BL       mem_cpy
00019a  2108              MOVS     r1,#8                 ;4051
00019c  f50d5080          ADD      r0,sp,#0x1000         ;4051
0001a0  6a80              LDR      r0,[r0,#0x28]         ;4051
0001a2  72c1              STRB     r1,[r0,#0xb]          ;4051
0001a4  f7fffffe          BL       get_fattime
0001a8  4604              MOV      r4,r0                 ;4052
0001aa  f50d5080          ADD      r0,sp,#0x1000         ;4053
0001ae  6a80              LDR      r0,[r0,#0x28]         ;4053
0001b0  7584              STRB     r4,[r0,#0x16]         ;4053
0001b2  0a21              LSRS     r1,r4,#8              ;4053
0001b4  f50d5080          ADD      r0,sp,#0x1000         ;4053
0001b8  6a80              LDR      r0,[r0,#0x28]         ;4053
0001ba  75c1              STRB     r1,[r0,#0x17]         ;4053
0001bc  0c21              LSRS     r1,r4,#16             ;4053
0001be  f50d5080          ADD      r0,sp,#0x1000         ;4053
0001c2  6a80              LDR      r0,[r0,#0x28]         ;4053
0001c4  7601              STRB     r1,[r0,#0x18]         ;4053
0001c6  0e21              LSRS     r1,r4,#24             ;4053
0001c8  f50d5080          ADD      r0,sp,#0x1000         ;4053
0001cc  6a80              LDR      r0,[r0,#0x28]         ;4053
0001ce  7641              STRB     r1,[r0,#0x19]         ;4053
0001d0  2101              MOVS     r1,#1                 ;4054
0001d2  f50d5080          ADD      r0,sp,#0x1000         ;4054
0001d6  6940              LDR      r0,[r0,#0x14]         ;4054
0001d8  f5005080          ADD      r0,r0,#0x1000         ;4054
0001dc  7101              STRB     r1,[r0,#4]            ;4054
0001de  f50d5180          ADD      r1,sp,#0x1000         ;4055
0001e2  6948              LDR      r0,[r1,#0x14]         ;4055
0001e4  f7fffffe          BL       sync_fs
0001e8  4607              MOV      r7,r0                 ;4055
                  |L41.490|
0001ea  4638              MOV      r0,r7                 ;4062
0001ec  e716              B        |L41.28|
;;;4064   
                          ENDP

0001ee  0000              DCW      0x0000
                  |L41.496|
0001f0  222a2b2c          DCB      """*+,.:;<=>?[]|",127,0
0001f4  2e3a3b3c
0001f8  3d3e3f5b
0001fc  5d7c7f00

                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;3441   
;;;3442   FRESULT f_stat (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3443   	const TCHAR* path,	/* Pointer to the file path */
;;;3444   	FILINFO* fno		/* Pointer to file information to return */
;;;3445   )
;;;3446   {
000002  f5ad5d84          SUB      sp,sp,#0x1080
000006  460d              MOV      r5,r1
;;;3447   	FRESULT res;
;;;3448   	DIR dj;
;;;3449   	DEFINE_NAMEBUF;
;;;3450   
;;;3451   
;;;3452   	/* Get logical drive number */
;;;3453   	res = find_volume(&dj.fs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  f50d5184          ADD      r1,sp,#0x1080
00000e  f1a1002c          SUB      r0,r1,#0x2c
000012  f7fffffe          BL       find_volume
000016  4604              MOV      r4,r0
;;;3454   	if (res == FR_OK) {
000018  b9bc              CBNZ     r4,|L42.74|
;;;3455   		INIT_BUF(dj);
00001a  a912              ADD      r1,sp,#0x48
00001c  f50d5080          ADD      r0,sp,#0x1000
000020  66c1              STR      r1,[r0,#0x6c]
000022  a905              ADD      r1,sp,#0x14
000024  6741              STR      r1,[r0,#0x74]
;;;3456   		res = follow_path(&dj, path);	/* Follow the file path */
000026  f8d01080          LDR      r1,[r0,#0x80]
00002a  a815              ADD      r0,sp,#0x54
00002c  f7fffffe          BL       follow_path
000030  4604              MOV      r4,r0
;;;3457   		if (res == FR_OK) {				/* Follow completed */
000032  b954              CBNZ     r4,|L42.74|
;;;3458   			if (dj.dir) {		/* Found an object */
000034  f50d5080          ADD      r0,sp,#0x1000
000038  6e80              LDR      r0,[r0,#0x68]
00003a  b128              CBZ      r0,|L42.72|
;;;3459   				if (fno) get_fileinfo(&dj, fno);
00003c  b12d              CBZ      r5,|L42.74|
00003e  4629              MOV      r1,r5
000040  a815              ADD      r0,sp,#0x54
000042  f7fffffe          BL       get_fileinfo
000046  e000              B        |L42.74|
                  |L42.72|
;;;3460   			} else {			/* It is root directory */
;;;3461   				res = FR_INVALID_NAME;
000048  2406              MOVS     r4,#6
                  |L42.74|
;;;3462   			}
;;;3463   		}
;;;3464   		FREE_BUF();
;;;3465   	}
;;;3466   
;;;3467   	LEAVE_FF(dj.fs, res);
00004a  4620              MOV      r0,r4
;;;3468   }
00004c  b022              ADD      sp,sp,#0x88
00004e  f50d5d80          ADD      sp,sp,#0x1000
000052  bd70              POP      {r4-r6,pc}
;;;3469   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2880   
;;;2881   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2882   	FIL* fp		/* Pointer to the file object */
;;;2883   )
;;;2884   {
000004  4604              MOV      r4,r0
;;;2885   	FRESULT res;
;;;2886   	DWORD tm;
;;;2887   	BYTE *dir;
;;;2888   
;;;2889   
;;;2890   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2891   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d171              BNE      |L43.246|
;;;2892   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  f2410006          MOV      r0,#0x1006
000016  5d00              LDRB     r0,[r0,r4]
000018  f0000020          AND      r0,r0,#0x20
00001c  2800              CMP      r0,#0
00001e  d06a              BEQ      |L43.246|
;;;2893   			/* Write-back dirty buffer */
;;;2894   #if !_FS_TINY
;;;2895   			if (fp->flag & FA__DIRTY) {
000020  f2410006          MOV      r0,#0x1006
000024  5d00              LDRB     r0,[r0,r4]
000026  f0000040          AND      r0,r0,#0x40
00002a  b1c0              CBZ      r0,|L43.94|
;;;2896   				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
00002c  f2410118          MOV      r1,#0x1018
000030  590a              LDR      r2,[r1,r4]
000032  f44f5180          MOV      r1,#0x1000
000036  5909              LDR      r1,[r1,r4]
000038  f5015180          ADD      r1,r1,#0x1000
00003c  7848              LDRB     r0,[r1,#1]
00003e  2301              MOVS     r3,#1
000040  4621              MOV      r1,r4
000042  f7fffffe          BL       disk_write
000046  b110              CBZ      r0,|L43.78|
;;;2897   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000048  2001              MOVS     r0,#1
                  |L43.74|
;;;2898   				fp->flag &= ~FA__DIRTY;
;;;2899   			}
;;;2900   #endif
;;;2901   			/* Update the directory entry */
;;;2902   			res = move_window(fp->fs, fp->dir_sect);
;;;2903   			if (res == FR_OK) {
;;;2904   				dir = fp->dir_ptr;
;;;2905   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2906   				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
;;;2907   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2908   				tm = GET_FATTIME();							/* Update updated time */
;;;2909   				ST_DWORD(dir + DIR_WrtTime, tm);
;;;2910   				ST_WORD(dir + DIR_LstAccDate, 0);
;;;2911   				fp->flag &= ~FA__WRITTEN;
;;;2912   				fp->fs->wflag = 1;
;;;2913   				res = sync_fs(fp->fs);
;;;2914   			}
;;;2915   		}
;;;2916   	}
;;;2917   
;;;2918   	LEAVE_FF(fp->fs, res);
;;;2919   }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L43.78|
00004e  f2410006          MOV      r0,#0x1006            ;2898
000052  5d00              LDRB     r0,[r0,r4]            ;2898
000054  f0200140          BIC      r1,r0,#0x40           ;2898
000058  f2410006          MOV      r0,#0x1006            ;2898
00005c  5501              STRB     r1,[r0,r4]            ;2898
                  |L43.94|
00005e  f241021c          MOV      r2,#0x101c            ;2902
000062  5911              LDR      r1,[r2,r4]            ;2902
000064  f44f5280          MOV      r2,#0x1000            ;2902
000068  5910              LDR      r0,[r2,r4]            ;2902
00006a  f7fffffe          BL       move_window
00006e  4607              MOV      r7,r0                 ;2902
000070  2f00              CMP      r7,#0                 ;2903
000072  d140              BNE      |L43.246|
000074  f44f5081          MOV      r0,#0x1020            ;2904
000078  5905              LDR      r5,[r0,r4]            ;2904
00007a  7ae8              LDRB     r0,[r5,#0xb]          ;2905
00007c  f0400020          ORR      r0,r0,#0x20           ;2905
000080  72e8              STRB     r0,[r5,#0xb]          ;2905
000082  f241000c          MOV      r0,#0x100c            ;2906
000086  5d00              LDRB     r0,[r0,r4]            ;2906
000088  7728              STRB     r0,[r5,#0x1c]         ;2906
00008a  f241000c          MOV      r0,#0x100c            ;2906
00008e  5b00              LDRH     r0,[r0,r4]            ;2906
000090  0a01              LSRS     r1,r0,#8              ;2906
000092  7769              STRB     r1,[r5,#0x1d]         ;2906
000094  f241000c          MOV      r0,#0x100c            ;2906
000098  5900              LDR      r0,[r0,r4]            ;2906
00009a  0c01              LSRS     r1,r0,#16             ;2906
00009c  77a9              STRB     r1,[r5,#0x1e]         ;2906
00009e  f241000c          MOV      r0,#0x100c            ;2906
0000a2  5900              LDR      r0,[r0,r4]            ;2906
0000a4  0e01              LSRS     r1,r0,#24             ;2906
0000a6  77e9              STRB     r1,[r5,#0x1f]         ;2906
0000a8  f2410010          MOV      r0,#0x1010            ;2907
0000ac  5901              LDR      r1,[r0,r4]            ;2907
0000ae  4628              MOV      r0,r5                 ;2907
0000b0  f7fffffe          BL       st_clust
0000b4  f7fffffe          BL       get_fattime
0000b8  4606              MOV      r6,r0                 ;2908
0000ba  75ae              STRB     r6,[r5,#0x16]         ;2909
0000bc  0a31              LSRS     r1,r6,#8              ;2909
0000be  75e9              STRB     r1,[r5,#0x17]         ;2909
0000c0  0c31              LSRS     r1,r6,#16             ;2909
0000c2  7629              STRB     r1,[r5,#0x18]         ;2909
0000c4  0e31              LSRS     r1,r6,#24             ;2909
0000c6  7669              STRB     r1,[r5,#0x19]         ;2909
0000c8  2000              MOVS     r0,#0                 ;2910
0000ca  74a8              STRB     r0,[r5,#0x12]         ;2910
0000cc  2100              MOVS     r1,#0                 ;2910
0000ce  74e9              STRB     r1,[r5,#0x13]         ;2910
0000d0  f2410006          MOV      r0,#0x1006            ;2911
0000d4  5d00              LDRB     r0,[r0,r4]            ;2911
0000d6  f0200120          BIC      r1,r0,#0x20           ;2911
0000da  f2410006          MOV      r0,#0x1006            ;2911
0000de  5501              STRB     r1,[r0,r4]            ;2911
0000e0  2101              MOVS     r1,#1                 ;2912
0000e2  1f80              SUBS     r0,r0,#6              ;2912
0000e4  5900              LDR      r0,[r0,r4]            ;2912
0000e6  f5005080          ADD      r0,r0,#0x1000         ;2912
0000ea  7101              STRB     r1,[r0,#4]            ;2912
0000ec  0309              LSLS     r1,r1,#12             ;2913
0000ee  5908              LDR      r0,[r1,r4]            ;2913
0000f0  f7fffffe          BL       sync_fs
0000f4  4607              MOV      r7,r0                 ;2913
                  |L43.246|
0000f6  4638              MOV      r0,r7                 ;2918
0000f8  e7a7              B        |L43.74|
;;;2920   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3543   
;;;3544   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3545   	FIL* fp		/* Pointer to the file object */
;;;3546   )
;;;3547   {
000002  4604              MOV      r4,r0
;;;3548   	FRESULT res;
;;;3549   	DWORD ncl;
;;;3550   
;;;3551   
;;;3552   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3553   	if (res == FR_OK) {
00000c  b975              CBNZ     r5,|L44.44|
;;;3554   		if (fp->err) {						/* Check error */
00000e  f2410007          MOV      r0,#0x1007
000012  5d00              LDRB     r0,[r0,r4]
000014  b118              CBZ      r0,|L44.30|
;;;3555   			res = (FRESULT)fp->err;
000016  f2410007          MOV      r0,#0x1007
00001a  5d05              LDRB     r5,[r0,r4]
00001c  e006              B        |L44.44|
                  |L44.30|
;;;3556   		} else {
;;;3557   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
00001e  f2410006          MOV      r0,#0x1006
000022  5d00              LDRB     r0,[r0,r4]
000024  f0000002          AND      r0,r0,#2
000028  b900              CBNZ     r0,|L44.44|
;;;3558   				res = FR_DENIED;
00002a  2507              MOVS     r5,#7
                  |L44.44|
;;;3559   		}
;;;3560   	}
;;;3561   	if (res == FR_OK) {
00002c  2d00              CMP      r5,#0
00002e  d172              BNE      |L44.278|
;;;3562   		if (fp->fsize > fp->fptr) {
000030  f241000c          MOV      r0,#0x100c
000034  5901              LDR      r1,[r0,r4]
000036  1f00              SUBS     r0,r0,#4
000038  5900              LDR      r0,[r0,r4]
00003a  4281              CMP      r1,r0
00003c  d967              BLS      |L44.270|
;;;3563   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00003e  f2410008          MOV      r0,#0x1008
000042  5901              LDR      r1,[r0,r4]
000044  1d00              ADDS     r0,r0,#4
000046  5101              STR      r1,[r0,r4]
;;;3564   			fp->flag |= FA__WRITTEN;
000048  1f80              SUBS     r0,r0,#6
00004a  5d00              LDRB     r0,[r0,r4]
00004c  f0400120          ORR      r1,r0,#0x20
000050  f2410006          MOV      r0,#0x1006
000054  5501              STRB     r1,[r0,r4]
;;;3565   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000056  1c80              ADDS     r0,r0,#2
000058  5900              LDR      r0,[r0,r4]
00005a  b968              CBNZ     r0,|L44.120|
;;;3566   				res = remove_chain(fp->fs, fp->sclust);
00005c  f2410210          MOV      r2,#0x1010
000060  5911              LDR      r1,[r2,r4]
000062  f44f5280          MOV      r2,#0x1000
000066  5910              LDR      r0,[r2,r4]
000068  f7fffffe          BL       remove_chain
00006c  4605              MOV      r5,r0
;;;3567   				fp->sclust = 0;
00006e  2100              MOVS     r1,#0
000070  f2410010          MOV      r0,#0x1010
000074  5101              STR      r1,[r0,r4]
000076  e02b              B        |L44.208|
                  |L44.120|
;;;3568   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3569   				ncl = get_fat(fp->fs, fp->clust);
000078  f2410214          MOV      r2,#0x1014
00007c  5911              LDR      r1,[r2,r4]
00007e  f44f5280          MOV      r2,#0x1000
000082  5910              LDR      r0,[r2,r4]
000084  f7fffffe          BL       get_fat
000088  4606              MOV      r6,r0
;;;3570   				res = FR_OK;
00008a  2500              MOVS     r5,#0
;;;3571   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
00008c  1c70              ADDS     r0,r6,#1
00008e  b900              CBNZ     r0,|L44.146|
000090  2501              MOVS     r5,#1
                  |L44.146|
;;;3572   				if (ncl == 1) res = FR_INT_ERR;
000092  2e01              CMP      r6,#1
000094  d100              BNE      |L44.152|
000096  2502              MOVS     r5,#2
                  |L44.152|
;;;3573   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000098  b9d5              CBNZ     r5,|L44.208|
00009a  f44f5080          MOV      r0,#0x1000
00009e  5900              LDR      r0,[r0,r4]
0000a0  f5005080          ADD      r0,r0,#0x1000
0000a4  6980              LDR      r0,[r0,#0x18]
0000a6  42b0              CMP      r0,r6
0000a8  d912              BLS      |L44.208|
;;;3574   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
0000aa  f2410214          MOV      r2,#0x1014
0000ae  5911              LDR      r1,[r2,r4]
0000b0  f44f5280          MOV      r2,#0x1000
0000b4  5910              LDR      r0,[r2,r4]
0000b6  f06f4270          MVN      r2,#0xf0000000
0000ba  f7fffffe          BL       put_fat
0000be  4605              MOV      r5,r0
;;;3575   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
0000c0  b935              CBNZ     r5,|L44.208|
0000c2  f44f5180          MOV      r1,#0x1000
0000c6  5908              LDR      r0,[r1,r4]
0000c8  4631              MOV      r1,r6
0000ca  f7fffffe          BL       remove_chain
0000ce  4605              MOV      r5,r0
                  |L44.208|
;;;3576   				}
;;;3577   			}
;;;3578   #if !_FS_TINY
;;;3579   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
0000d0  b9a5              CBNZ     r5,|L44.252|
0000d2  f2410006          MOV      r0,#0x1006
0000d6  5d00              LDRB     r0,[r0,r4]
0000d8  f0000040          AND      r0,r0,#0x40
0000dc  b170              CBZ      r0,|L44.252|
;;;3580   				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
0000de  f2410118          MOV      r1,#0x1018
0000e2  590a              LDR      r2,[r1,r4]
0000e4  f44f5180          MOV      r1,#0x1000
0000e8  5909              LDR      r1,[r1,r4]
0000ea  f5015180          ADD      r1,r1,#0x1000
0000ee  7848              LDRB     r0,[r1,#1]
0000f0  2301              MOVS     r3,#1
0000f2  4621              MOV      r1,r4
0000f4  f7fffffe          BL       disk_write
0000f8  b108              CBZ      r0,|L44.254|
;;;3581   					res = FR_DISK_ERR;
0000fa  2501              MOVS     r5,#1
                  |L44.252|
0000fc  e007              B        |L44.270|
                  |L44.254|
;;;3582   				else
;;;3583   					fp->flag &= ~FA__DIRTY;
0000fe  f2410006          MOV      r0,#0x1006
000102  5d00              LDRB     r0,[r0,r4]
000104  f0200140          BIC      r1,r0,#0x40
000108  f2410006          MOV      r0,#0x1006
00010c  5501              STRB     r1,[r0,r4]
                  |L44.270|
;;;3584   			}
;;;3585   #endif
;;;3586   		}
;;;3587   		if (res != FR_OK) fp->err = (FRESULT)res;
00010e  b115              CBZ      r5,|L44.278|
000110  f2410007          MOV      r0,#0x1007
000114  5505              STRB     r5,[r0,r4]
                  |L44.278|
;;;3588   	}
;;;3589   
;;;3590   	LEAVE_FF(fp->fs, res);
000116  4628              MOV      r0,r5
;;;3591   }
000118  bd70              POP      {r4-r6,pc}
;;;3592   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;3599   
;;;3600   FRESULT f_unlink (
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;3601   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3602   )
;;;3603   {
000002  f5ad5d03          SUB      sp,sp,#0x20c0
;;;3604   	FRESULT res;
;;;3605   	DIR dj, sdj;
;;;3606   	BYTE *dir;
;;;3607   	DWORD dclst = 0;
000006  2600              MOVS     r6,#0
;;;3608   	DEFINE_NAMEBUF;
;;;3609   
;;;3610   
;;;3611   	/* Get logical drive number */
;;;3612   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  f50d5103          ADD      r1,sp,#0x20c0
00000e  f1a1002c          SUB      r0,r1,#0x2c
000012  f7fffffe          BL       find_volume
000016  4604              MOV      r4,r0
;;;3613   	if (res == FR_OK) {
000018  2c00              CMP      r4,#0
00001a  d17b              BNE      |L45.276|
;;;3614   		INIT_BUF(dj);
00001c  a917              ADD      r1,sp,#0x5c
00001e  f50d5000          ADD      r0,sp,#0x2000
000022  f8c010ac          STR      r1,[r0,#0xac]
000026  a90a              ADD      r1,sp,#0x28
000028  f8c010b4          STR      r1,[r0,#0xb4]
;;;3615   		res = follow_path(&dj, path);		/* Follow the file path */
00002c  f8d010c0          LDR      r1,[r0,#0xc0]
000030  f6a0706c          SUB      r0,r0,#0xf6c
000034  f7fffffe          BL       follow_path
000038  4604              MOV      r4,r0
;;;3616   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
00003a  b944              CBNZ     r4,|L45.78|
00003c  f50d5000          ADD      r0,sp,#0x2000
000040  f8d000ac          LDR      r0,[r0,#0xac]
000044  7ac0              LDRB     r0,[r0,#0xb]
000046  f0000020          AND      r0,r0,#0x20
00004a  b100              CBZ      r0,|L45.78|
;;;3617   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
00004c  2406              MOVS     r4,#6
                  |L45.78|
;;;3618   #if _FS_LOCK
;;;3619   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
00004e  b934              CBNZ     r4,|L45.94|
000050  2102              MOVS     r1,#2
000052  f2410094          MOV      r0,#0x1094
000056  4468              ADD      r0,r0,sp
000058  f7fffffe          BL       chk_lock
00005c  4604              MOV      r4,r0
                  |L45.94|
;;;3620   #endif
;;;3621   		if (res == FR_OK) {					/* The object is accessible */
00005e  2c00              CMP      r4,#0
000060  d158              BNE      |L45.276|
;;;3622   			dir = dj.dir;
000062  f50d5000          ADD      r0,sp,#0x2000
000066  f8d050a8          LDR      r5,[r0,#0xa8]
;;;3623   			if (!dir) {
00006a  b90d              CBNZ     r5,|L45.112|
;;;3624   				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
00006c  2406              MOVS     r4,#6
00006e  e004              B        |L45.122|
                  |L45.112|
;;;3625   			} else {
;;;3626   				if (dir[DIR_Attr] & AM_RDO)
000070  7ae8              LDRB     r0,[r5,#0xb]
000072  f0000001          AND      r0,r0,#1
000076  b100              CBZ      r0,|L45.122|
;;;3627   					res = FR_DENIED;		/* Cannot remove R/O object */
000078  2407              MOVS     r4,#7
                  |L45.122|
;;;3628   			}
;;;3629   			if (res == FR_OK) {
00007a  bb94              CBNZ     r4,|L45.226|
;;;3630   				dclst = ld_clust(dj.fs, dir);
00007c  f50d5100          ADD      r1,sp,#0x2000
000080  f8d10094          LDR      r0,[r1,#0x94]
000084  4629              MOV      r1,r5
000086  f7fffffe          BL       ld_clust
00008a  4606              MOV      r6,r0
;;;3631   				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
00008c  b34e              CBZ      r6,|L45.226|
00008e  7ae8              LDRB     r0,[r5,#0xb]
000090  f0000010          AND      r0,r0,#0x10
000094  b328              CBZ      r0,|L45.226|
;;;3632   #if _FS_RPATH
;;;3633   					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
000096  f50d5000          ADD      r0,sp,#0x2000
00009a  f8d00094          LDR      r0,[r0,#0x94]
00009e  f5005080          ADD      r0,r0,#0x1000
0000a2  6940              LDR      r0,[r0,#0x14]
0000a4  42b0              CMP      r0,r6
0000a6  d101              BNE      |L45.172|
;;;3634   						res = FR_DENIED;
0000a8  2407              MOVS     r4,#7
0000aa  e01a              B        |L45.226|
                  |L45.172|
;;;3635   					} else
;;;3636   #endif
;;;3637   					{
;;;3638   						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
0000ac  f241022c          MOV      r2,#0x102c
0000b0  f2410194          MOV      r1,#0x1094
0000b4  4469              ADD      r1,r1,sp
0000b6  a81a              ADD      r0,sp,#0x68
0000b8  f7fffffe          BL       mem_cpy
;;;3639   						sdj.sclust = dclst;
0000bc  f50d5080          ADD      r0,sp,#0x1000
0000c0  6706              STR      r6,[r0,#0x70]
;;;3640   						res = dir_sdi(&sdj, 2);
0000c2  2102              MOVS     r1,#2
0000c4  a81a              ADD      r0,sp,#0x68
0000c6  f7fffffe          BL       dir_sdi
0000ca  4604              MOV      r4,r0
;;;3641   						if (res == FR_OK) {
0000cc  b94c              CBNZ     r4,|L45.226|
;;;3642   							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
0000ce  2100              MOVS     r1,#0
0000d0  a81a              ADD      r0,sp,#0x68
0000d2  f7fffffe          BL       dir_read
0000d6  4604              MOV      r4,r0
;;;3643   							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
0000d8  b904              CBNZ     r4,|L45.220|
0000da  2407              MOVS     r4,#7
                  |L45.220|
;;;3644   							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
0000dc  2c04              CMP      r4,#4
0000de  d100              BNE      |L45.226|
0000e0  2400              MOVS     r4,#0
                  |L45.226|
;;;3645   						}
;;;3646   					}
;;;3647   				}
;;;3648   			}
;;;3649   			if (res == FR_OK) {
0000e2  b9bc              CBNZ     r4,|L45.276|
;;;3650   				res = dir_remove(&dj);		/* Remove the directory entry */
0000e4  f2410094          MOV      r0,#0x1094
0000e8  4468              ADD      r0,r0,sp
0000ea  f7fffffe          BL       dir_remove
0000ee  4604              MOV      r4,r0
;;;3651   				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
0000f0  b944              CBNZ     r4,|L45.260|
0000f2  b13e              CBZ      r6,|L45.260|
;;;3652   					res = remove_chain(dj.fs, dclst);
0000f4  f50d5100          ADD      r1,sp,#0x2000
0000f8  f8d10094          LDR      r0,[r1,#0x94]
0000fc  4631              MOV      r1,r6
0000fe  f7fffffe          BL       remove_chain
000102  4604              MOV      r4,r0
                  |L45.260|
;;;3653   				if (res == FR_OK) res = sync_fs(dj.fs);
000104  b934              CBNZ     r4,|L45.276|
000106  f50d5100          ADD      r1,sp,#0x2000
00010a  f8d10094          LDR      r0,[r1,#0x94]
00010e  f7fffffe          BL       sync_fs
000112  4604              MOV      r4,r0
                  |L45.276|
;;;3654   			}
;;;3655   		}
;;;3656   		FREE_BUF();
;;;3657   	}
;;;3658   
;;;3659   	LEAVE_FF(dj.fs, res);
000114  4620              MOV      r0,r4
;;;3660   }
000116  b031              ADD      sp,sp,#0xc4
000118  f50d5d00          ADD      sp,sp,#0x2000
00011c  bdf0              POP      {r4-r7,pc}
;;;3661   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;3863   
;;;3864   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3865   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3866   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3867   )
;;;3868   {
000002  f5ad5d84          SUB      sp,sp,#0x1080
000006  460d              MOV      r5,r1
;;;3869   	FRESULT res;
;;;3870   	DIR dj;
;;;3871   	BYTE *dir;
;;;3872   	DEFINE_NAMEBUF;
;;;3873   
;;;3874   
;;;3875   	/* Get logical drive number */
;;;3876   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  f50d5184          ADD      r1,sp,#0x1080
00000e  f1a1002c          SUB      r0,r1,#0x2c
000012  f7fffffe          BL       find_volume
000016  4606              MOV      r6,r0
;;;3877   	if (res == FR_OK) {
000018  2e00              CMP      r6,#0
00001a  d130              BNE      |L46.126|
;;;3878   		INIT_BUF(dj);
00001c  a912              ADD      r1,sp,#0x48
00001e  f50d5080          ADD      r0,sp,#0x1000
000022  66c1              STR      r1,[r0,#0x6c]
000024  a905              ADD      r1,sp,#0x14
000026  6741              STR      r1,[r0,#0x74]
;;;3879   		res = follow_path(&dj, path);	/* Follow the file path */
000028  f8d01080          LDR      r1,[r0,#0x80]
00002c  a815              ADD      r0,sp,#0x54
00002e  f7fffffe          BL       follow_path
000032  4606              MOV      r6,r0
;;;3880   		FREE_BUF();
;;;3881   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000034  b93e              CBNZ     r6,|L46.70|
000036  f50d5080          ADD      r0,sp,#0x1000
00003a  6ec0              LDR      r0,[r0,#0x6c]
00003c  7ac0              LDRB     r0,[r0,#0xb]
00003e  f0000020          AND      r0,r0,#0x20
000042  b100              CBZ      r0,|L46.70|
;;;3882   			res = FR_INVALID_NAME;
000044  2606              MOVS     r6,#6
                  |L46.70|
;;;3883   		if (res == FR_OK) {
000046  b9d6              CBNZ     r6,|L46.126|
;;;3884   			dir = dj.dir;
000048  f50d5080          ADD      r0,sp,#0x1000
00004c  6e84              LDR      r4,[r0,#0x68]
;;;3885   			if (!dir) {					/* Root directory */
00004e  b90c              CBNZ     r4,|L46.84|
;;;3886   				res = FR_INVALID_NAME;
000050  2606              MOVS     r6,#6
000052  e014              B        |L46.126|
                  |L46.84|
;;;3887   			} else {					/* File or sub-directory */
;;;3888   				ST_WORD(dir + DIR_WrtTime, fno->ftime);
000054  79a8              LDRB     r0,[r5,#6]
000056  75a0              STRB     r0,[r4,#0x16]
000058  88e8              LDRH     r0,[r5,#6]
00005a  1201              ASRS     r1,r0,#8
00005c  75e1              STRB     r1,[r4,#0x17]
;;;3889   				ST_WORD(dir + DIR_WrtDate, fno->fdate);
00005e  7928              LDRB     r0,[r5,#4]
000060  7620              STRB     r0,[r4,#0x18]
000062  88a8              LDRH     r0,[r5,#4]
000064  1201              ASRS     r1,r0,#8
000066  7661              STRB     r1,[r4,#0x19]
;;;3890   				dj.fs->wflag = 1;
000068  2201              MOVS     r2,#1
00006a  f50d5180          ADD      r1,sp,#0x1000
00006e  6d48              LDR      r0,[r1,#0x54]
000070  f5005080          ADD      r0,r0,#0x1000
000074  7102              STRB     r2,[r0,#4]
;;;3891   				res = sync_fs(dj.fs);
000076  6d48              LDR      r0,[r1,#0x54]
000078  f7fffffe          BL       sync_fs
00007c  4606              MOV      r6,r0
                  |L46.126|
;;;3892   			}
;;;3893   		}
;;;3894   	}
;;;3895   
;;;3896   	LEAVE_FF(dj.fs, res);
00007e  4630              MOV      r0,r6
;;;3897   }
000080  b022              ADD      sp,sp,#0x88
000082  f50d5d80          ADD      sp,sp,#0x1000
000086  bd70              POP      {r4-r6,pc}
;;;3898   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2758   
;;;2759   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2760   	FIL* fp,			/* Pointer to the file object */
;;;2761   	const void *buff,	/* Pointer to the data to be written */
;;;2762   	UINT btw,			/* Number of bytes to write */
;;;2763   	UINT* bw			/* Pointer to number of bytes written */
;;;2764   )
;;;2765   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2766   	FRESULT res;
;;;2767   	DWORD clst, sect;
;;;2768   	UINT wcnt, cc;
;;;2769   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2770   	BYTE csect;
;;;2771   
;;;2772   
;;;2773   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2774   
;;;2775   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2776   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L47.42|
000022  9802              LDR      r0,[sp,#8]
                  |L47.36|
;;;2777   	if (fp->err)							/* Check error */
;;;2778   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2779   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2780   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2781   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2782   
;;;2783   	for ( ;  btw;							/* Repeat until all data written */
;;;2784   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2785   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2786   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2787   			if (!csect) {					/* On the cluster boundary? */
;;;2788   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2789   					clst = fp->sclust;		/* Follow from the origin */
;;;2790   					if (clst == 0)			/* When no cluster is allocated, */
;;;2791   						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2792   				} else {					/* Middle or end of the file */
;;;2793   #if _USE_FASTSEEK
;;;2794   					if (fp->cltbl)
;;;2795   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2796   					else
;;;2797   #endif
;;;2798   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2799   				}
;;;2800   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2801   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2802   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2803   				fp->clust = clst;			/* Update current cluster */
;;;2804   				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
;;;2805   			}
;;;2806   #if _FS_TINY
;;;2807   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2808   				ABORT(fp->fs, FR_DISK_ERR);
;;;2809   #else
;;;2810   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2811   				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
;;;2812   					ABORT(fp->fs, FR_DISK_ERR);
;;;2813   				fp->flag &= ~FA__DIRTY;
;;;2814   			}
;;;2815   #endif
;;;2816   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2817   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2818   			sect += csect;
;;;2819   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2820   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2821   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2822   					cc = fp->fs->csize - csect;
;;;2823   				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
;;;2824   					ABORT(fp->fs, FR_DISK_ERR);
;;;2825   #if _FS_MINIMIZE <= 2
;;;2826   #if _FS_TINY
;;;2827   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2828   					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2829   					fp->fs->wflag = 0;
;;;2830   				}
;;;2831   #else
;;;2832   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2833   					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2834   					fp->flag &= ~FA__DIRTY;
;;;2835   				}
;;;2836   #endif
;;;2837   #endif
;;;2838   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2839   				continue;
;;;2840   			}
;;;2841   #if _FS_TINY
;;;2842   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2843   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2844   				fp->fs->winsect = sect;
;;;2845   			}
;;;2846   #else
;;;2847   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2848   				if (fp->fptr < fp->fsize &&
;;;2849   					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
;;;2850   						ABORT(fp->fs, FR_DISK_ERR);
;;;2851   			}
;;;2852   #endif
;;;2853   			fp->dsect = sect;
;;;2854   		}
;;;2855   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2856   		if (wcnt > btw) wcnt = btw;
;;;2857   #if _FS_TINY
;;;2858   		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
;;;2859   			ABORT(fp->fs, FR_DISK_ERR);
;;;2860   		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2861   		fp->fs->wflag = 1;
;;;2862   #else
;;;2863   		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2864   		fp->flag |= FA__DIRTY;
;;;2865   #endif
;;;2866   	}
;;;2867   
;;;2868   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2869   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2870   
;;;2871   	LEAVE_FF(fp->fs, FR_OK);
;;;2872   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L47.42|
00002a  f2410007          MOV      r0,#0x1007            ;2777
00002e  5d00              LDRB     r0,[r0,r4]            ;2777
000030  b118              CBZ      r0,|L47.58|
000032  f2410007          MOV      r0,#0x1007            ;2778
000036  5d00              LDRB     r0,[r0,r4]            ;2778
000038  e7f4              B        |L47.36|
                  |L47.58|
00003a  f2410006          MOV      r0,#0x1006            ;2779
00003e  5d00              LDRB     r0,[r0,r4]            ;2779
000040  f0000002          AND      r0,r0,#2              ;2779
000044  b908              CBNZ     r0,|L47.74|
000046  2007              MOVS     r0,#7                 ;2780
000048  e7ec              B        |L47.36|
                  |L47.74|
00004a  f2410008          MOV      r0,#0x1008            ;2781
00004e  5900              LDR      r0,[r0,r4]            ;2781
000050  1941              ADDS     r1,r0,r5              ;2781
000052  f2410008          MOV      r0,#0x1008            ;2781
000056  5900              LDR      r0,[r0,r4]            ;2781
000058  4281              CMP      r1,r0                 ;2781
00005a  d200              BCS      |L47.94|
00005c  2500              MOVS     r5,#0                 ;2781
                  |L47.94|
00005e  e122              B        |L47.678|
                  |L47.96|
000060  f2410008          MOV      r0,#0x1008            ;2785
000064  5b00              LDRH     r0,[r0,r4]            ;2785
000066  f3c0000b          UBFX     r0,r0,#0,#12          ;2785
00006a  2800              CMP      r0,#0                 ;2785
00006c  d17e              BNE      |L47.364|
00006e  f44f5080          MOV      r0,#0x1000            ;2786
000072  5900              LDR      r0,[r0,r4]            ;2786
000074  f5005080          ADD      r0,r0,#0x1000         ;2786
000078  7880              LDRB     r0,[r0,#2]            ;2786
00007a  1e40              SUBS     r0,r0,#1              ;2786
00007c  f2410108          MOV      r1,#0x1008            ;2786
000080  5909              LDR      r1,[r1,r4]            ;2786
000082  ea003011          AND      r0,r0,r1,LSR #12      ;2786
000086  f0000aff          AND      r10,r0,#0xff          ;2786
00008a  f1ba0f00          CMP      r10,#0                ;2787
00008e  d13f              BNE      |L47.272|
000090  f2410008          MOV      r0,#0x1008            ;2788
000094  5900              LDR      r0,[r0,r4]            ;2788
000096  b958              CBNZ     r0,|L47.176|
000098  f2410010          MOV      r0,#0x1010            ;2789
00009c  5907              LDR      r7,[r0,r4]            ;2789
00009e  b9e7              CBNZ     r7,|L47.218|
0000a0  f44f5180          MOV      r1,#0x1000            ;2791
0000a4  5908              LDR      r0,[r1,r4]            ;2791
0000a6  2100              MOVS     r1,#0                 ;2791
0000a8  f7fffffe          BL       create_chain
0000ac  4607              MOV      r7,r0                 ;2791
0000ae  e014              B        |L47.218|
                  |L47.176|
0000b0  f2410024          MOV      r0,#0x1024            ;2794
0000b4  5900              LDR      r0,[r0,r4]            ;2794
0000b6  b138              CBZ      r0,|L47.200|
0000b8  f2410008          MOV      r0,#0x1008            ;2795
0000bc  5901              LDR      r1,[r0,r4]            ;2795
0000be  4620              MOV      r0,r4                 ;2795
0000c0  f7fffffe          BL       clmt_clust
0000c4  4607              MOV      r7,r0                 ;2795
0000c6  e008              B        |L47.218|
                  |L47.200|
0000c8  f2410214          MOV      r2,#0x1014            ;2798
0000cc  5911              LDR      r1,[r2,r4]            ;2798
0000ce  f44f5280          MOV      r2,#0x1000            ;2798
0000d2  5910              LDR      r0,[r2,r4]            ;2798
0000d4  f7fffffe          BL       create_chain
0000d8  4607              MOV      r7,r0                 ;2798
                  |L47.218|
0000da  b907              CBNZ     r7,|L47.222|
0000dc  e0e6              B        |L47.684|
                  |L47.222|
0000de  2f01              CMP      r7,#1                 ;2801
0000e0  d105              BNE      |L47.238|
0000e2  2102              MOVS     r1,#2                 ;2801
0000e4  f2410007          MOV      r0,#0x1007            ;2801
0000e8  5501              STRB     r1,[r0,r4]            ;2801
0000ea  2002              MOVS     r0,#2                 ;2801
0000ec  e79a              B        |L47.36|
                  |L47.238|
0000ee  1c78              ADDS     r0,r7,#1              ;2802
0000f0  b928              CBNZ     r0,|L47.254|
0000f2  2101              MOVS     r1,#1                 ;2802
0000f4  f2410007          MOV      r0,#0x1007            ;2802
0000f8  5501              STRB     r1,[r0,r4]            ;2802
0000fa  2001              MOVS     r0,#1                 ;2802
0000fc  e792              B        |L47.36|
                  |L47.254|
0000fe  f2410014          MOV      r0,#0x1014            ;2803
000102  5107              STR      r7,[r0,r4]            ;2803
000104  1f00              SUBS     r0,r0,#4              ;2804
000106  5900              LDR      r0,[r0,r4]            ;2804
000108  b910              CBNZ     r0,|L47.272|
00010a  f2410010          MOV      r0,#0x1010            ;2804
00010e  5107              STR      r7,[r0,r4]            ;2804
                  |L47.272|
000110  f2410006          MOV      r0,#0x1006            ;2810
000114  5d00              LDRB     r0,[r0,r4]            ;2810
000116  f0000040          AND      r0,r0,#0x40           ;2810
00011a  b1d8              CBZ      r0,|L47.340|
00011c  f2410118          MOV      r1,#0x1018            ;2811
000120  590a              LDR      r2,[r1,r4]            ;2811
000122  f44f5180          MOV      r1,#0x1000            ;2811
000126  5909              LDR      r1,[r1,r4]            ;2811
000128  f5015180          ADD      r1,r1,#0x1000         ;2811
00012c  7848              LDRB     r0,[r1,#1]            ;2811
00012e  2301              MOVS     r3,#1                 ;2811
000130  4621              MOV      r1,r4                 ;2811
000132  f7fffffe          BL       disk_write
000136  b128              CBZ      r0,|L47.324|
000138  2101              MOVS     r1,#1                 ;2812
00013a  f2410007          MOV      r0,#0x1007            ;2812
00013e  5501              STRB     r1,[r0,r4]            ;2812
000140  2001              MOVS     r0,#1                 ;2812
000142  e76f              B        |L47.36|
                  |L47.324|
000144  f2410006          MOV      r0,#0x1006            ;2813
000148  5d00              LDRB     r0,[r0,r4]            ;2813
00014a  f0200140          BIC      r1,r0,#0x40           ;2813
00014e  f2410006          MOV      r0,#0x1006            ;2813
000152  5501              STRB     r1,[r0,r4]            ;2813
                  |L47.340|
000154  f2410214          MOV      r2,#0x1014            ;2816
000158  5911              LDR      r1,[r2,r4]            ;2816
00015a  f44f5280          MOV      r2,#0x1000            ;2816
00015e  5910              LDR      r0,[r2,r4]            ;2816
000160  f7fffffe          BL       clust2sect
000164  4606              MOV      r6,r0                 ;2816
000166  b93e              CBNZ     r6,|L47.376|
000168  2102              MOVS     r1,#2                 ;2817
00016a  e000              B        |L47.366|
                  |L47.364|
00016c  e06c              B        |L47.584|
                  |L47.366|
00016e  f2410007          MOV      r0,#0x1007            ;2817
000172  5501              STRB     r1,[r0,r4]            ;2817
000174  2002              MOVS     r0,#2                 ;2817
000176  e755              B        |L47.36|
                  |L47.376|
000178  4456              ADD      r6,r6,r10             ;2818
00017a  ea4f3915          LSR      r9,r5,#12             ;2819
00017e  f1b90f00          CMP      r9,#0                 ;2820
000182  d040              BEQ      |L47.518|
000184  eb0a0109          ADD      r1,r10,r9             ;2821
000188  f44f5080          MOV      r0,#0x1000            ;2821
00018c  5900              LDR      r0,[r0,r4]            ;2821
00018e  f5005080          ADD      r0,r0,#0x1000         ;2821
000192  7880              LDRB     r0,[r0,#2]            ;2821
000194  4281              CMP      r1,r0                 ;2821
000196  d907              BLS      |L47.424|
000198  f44f5080          MOV      r0,#0x1000            ;2822
00019c  5900              LDR      r0,[r0,r4]            ;2822
00019e  f5005080          ADD      r0,r0,#0x1000         ;2822
0001a2  7880              LDRB     r0,[r0,#2]            ;2822
0001a4  eba0090a          SUB      r9,r0,r10             ;2822
                  |L47.424|
0001a8  f44f5180          MOV      r1,#0x1000            ;2823
0001ac  5909              LDR      r1,[r1,r4]            ;2823
0001ae  f5015180          ADD      r1,r1,#0x1000         ;2823
0001b2  7848              LDRB     r0,[r1,#1]            ;2823
0001b4  464b              MOV      r3,r9                 ;2823
0001b6  4632              MOV      r2,r6                 ;2823
0001b8  9901              LDR      r1,[sp,#4]            ;2823
0001ba  f7fffffe          BL       disk_write
0001be  b128              CBZ      r0,|L47.460|
0001c0  2101              MOVS     r1,#1                 ;2824
0001c2  f2410007          MOV      r0,#0x1007            ;2824
0001c6  5501              STRB     r1,[r0,r4]            ;2824
0001c8  2001              MOVS     r0,#1                 ;2824
0001ca  e72b              B        |L47.36|
                  |L47.460|
0001cc  f2410018          MOV      r0,#0x1018            ;2832
0001d0  5900              LDR      r0,[r0,r4]            ;2832
0001d2  1b80              SUBS     r0,r0,r6              ;2832
0001d4  4548              CMP      r0,r9                 ;2832
0001d6  d213              BCS      |L47.512|
0001d8  f2410018          MOV      r0,#0x1018            ;2833
0001dc  5900              LDR      r0,[r0,r4]            ;2833
0001de  1b80              SUBS     r0,r0,r6              ;2833
0001e0  9a01              LDR      r2,[sp,#4]            ;2833
0001e2  eb023100          ADD      r1,r2,r0,LSL #12      ;2833
0001e6  f44f5280          MOV      r2,#0x1000            ;2833
0001ea  4620              MOV      r0,r4                 ;2833
0001ec  f7fffffe          BL       mem_cpy
0001f0  f2410006          MOV      r0,#0x1006            ;2834
0001f4  5d00              LDRB     r0,[r0,r4]            ;2834
0001f6  f0200140          BIC      r1,r0,#0x40           ;2834
0001fa  f2410006          MOV      r0,#0x1006            ;2834
0001fe  5501              STRB     r1,[r0,r4]            ;2834
                  |L47.512|
000200  ea4f3809          LSL      r8,r9,#12             ;2838
000204  e03d              B        |L47.642|
                  |L47.518|
000206  f2410018          MOV      r0,#0x1018            ;2847
00020a  5900              LDR      r0,[r0,r4]            ;2847
00020c  42b0              CMP      r0,r6                 ;2847
00020e  d018              BEQ      |L47.578|
000210  f2410008          MOV      r0,#0x1008            ;2848
000214  5901              LDR      r1,[r0,r4]            ;2848
000216  1d00              ADDS     r0,r0,#4              ;2848
000218  5900              LDR      r0,[r0,r4]            ;2848
00021a  4281              CMP      r1,r0                 ;2848
00021c  d211              BCS      |L47.578|
00021e  f44f5180          MOV      r1,#0x1000            ;2849
000222  5909              LDR      r1,[r1,r4]            ;2849
000224  f5015180          ADD      r1,r1,#0x1000         ;2849
000228  7848              LDRB     r0,[r1,#1]            ;2849
00022a  2301              MOVS     r3,#1                 ;2849
00022c  4632              MOV      r2,r6                 ;2849
00022e  4621              MOV      r1,r4                 ;2849
000230  f7fffffe          BL       disk_read
000234  b128              CBZ      r0,|L47.578|
000236  2101              MOVS     r1,#1                 ;2850
000238  f2410007          MOV      r0,#0x1007            ;2850
00023c  5501              STRB     r1,[r0,r4]            ;2850
00023e  2001              MOVS     r0,#1                 ;2850
000240  e6f0              B        |L47.36|
                  |L47.578|
000242  f2410018          MOV      r0,#0x1018            ;2853
000246  5106              STR      r6,[r0,r4]            ;2853
                  |L47.584|
000248  f2410008          MOV      r0,#0x1008            ;2855
00024c  5b00              LDRH     r0,[r0,r4]            ;2855
00024e  f3c0000b          UBFX     r0,r0,#0,#12          ;2855
000252  f5c05880          RSB      r8,r0,#0x1000         ;2855
000256  45a8              CMP      r8,r5                 ;2856
000258  d900              BLS      |L47.604|
00025a  46a8              MOV      r8,r5                 ;2856
                  |L47.604|
00025c  f2410108          MOV      r1,#0x1008            ;2863
000260  5b09              LDRH     r1,[r1,r4]            ;2863
000262  f3c1010b          UBFX     r1,r1,#0,#12          ;2863
000266  1908              ADDS     r0,r1,r4              ;2863
000268  4642              MOV      r2,r8                 ;2863
00026a  9901              LDR      r1,[sp,#4]            ;2863
00026c  f7fffffe          BL       mem_cpy
000270  f2410006          MOV      r0,#0x1006            ;2864
000274  5d00              LDRB     r0,[r0,r4]            ;2864
000276  f0400140          ORR      r1,r0,#0x40           ;2864
00027a  f2410006          MOV      r0,#0x1006            ;2864
00027e  5501              STRB     r1,[r0,r4]            ;2864
000280  bf00              NOP                            ;2839
                  |L47.642|
000282  9801              LDR      r0,[sp,#4]            ;2784
000284  4440              ADD      r0,r0,r8              ;2784
000286  9001              STR      r0,[sp,#4]            ;2784
000288  f2410008          MOV      r0,#0x1008            ;2784
00028c  5900              LDR      r0,[r0,r4]            ;2784
00028e  eb000108          ADD      r1,r0,r8              ;2784
000292  f2410008          MOV      r0,#0x1008            ;2784
000296  5101              STR      r1,[r0,r4]            ;2784
000298  f8db0000          LDR      r0,[r11,#0]           ;2784
00029c  4440              ADD      r0,r0,r8              ;2784
00029e  f8cb0000          STR      r0,[r11,#0]           ;2784
0002a2  eba50508          SUB      r5,r5,r8              ;2784
                  |L47.678|
0002a6  2d00              CMP      r5,#0                 ;2783
0002a8  f47faeda          BNE      |L47.96|
                  |L47.684|
0002ac  bf00              NOP                            ;2800
0002ae  f2410008          MOV      r0,#0x1008            ;2868
0002b2  5901              LDR      r1,[r0,r4]            ;2868
0002b4  1d00              ADDS     r0,r0,#4              ;2868
0002b6  5900              LDR      r0,[r0,r4]            ;2868
0002b8  4281              CMP      r1,r0                 ;2868
0002ba  d904              BLS      |L47.710|
0002bc  f2410008          MOV      r0,#0x1008            ;2868
0002c0  5901              LDR      r1,[r0,r4]            ;2868
0002c2  1d00              ADDS     r0,r0,#4              ;2868
0002c4  5101              STR      r1,[r0,r4]            ;2868
                  |L47.710|
0002c6  f2410006          MOV      r0,#0x1006            ;2869
0002ca  5d00              LDRB     r0,[r0,r4]            ;2869
0002cc  f0400120          ORR      r1,r0,#0x20           ;2869
0002d0  f2410006          MOV      r0,#0x1006            ;2869
0002d4  5501              STRB     r1,[r0,r4]            ;2869
0002d6  2000              MOVS     r0,#0                 ;2871
0002d8  e6a4              B        |L47.36|
;;;2873   
                          ENDP


                          AREA ||i.find_volume||, CODE, READONLY, ALIGN=2

                  find_volume PROC
;;;2275   static
;;;2276   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2277   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2278   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2279   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2280   )
;;;2281   {
000004  b08a              SUB      sp,sp,#0x28
;;;2282   	BYTE fmt, *pt;
;;;2283   	int vol;
;;;2284   	DSTATUS stat;
;;;2285   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
;;;2286   	WORD nrsv;
;;;2287   	FATFS *fs;
;;;2288   	UINT i;
;;;2289   
;;;2290   
;;;2291   	/* Get logical drive number from the path name */
;;;2292   	*rfs = 0;
000006  2100              MOVS     r1,#0
000008  980a              LDR      r0,[sp,#0x28]
00000a  6001              STR      r1,[r0,#0]
;;;2293   	vol = get_ldnumber(path);
00000c  980b              LDR      r0,[sp,#0x2c]
00000e  f7fffffe          BL       get_ldnumber
000012  9009              STR      r0,[sp,#0x24]
;;;2294   	if (vol < 0) return FR_INVALID_DRIVE;
000014  9809              LDR      r0,[sp,#0x24]
000016  2800              CMP      r0,#0
000018  da03              BGE      |L48.34|
00001a  200b              MOVS     r0,#0xb
                  |L48.28|
;;;2295   
;;;2296   	/* Check if the file system object is valid or not */
;;;2297   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2298   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2299   
;;;2300   	ENTER_FF(fs);						/* Lock the volume */
;;;2301   	*rfs = fs;							/* Return pointer to the file system object */
;;;2302   
;;;2303   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2304   		stat = disk_status(fs->drv);
;;;2305   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2306   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2307   				return FR_WRITE_PROTECTED;
;;;2308   			return FR_OK;				/* The file system object is valid */
;;;2309   		}
;;;2310   	}
;;;2311   
;;;2312   	/* The file system object is not valid. */
;;;2313   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2314   
;;;2315   	fs->fs_type = 0;					/* Clear the file system object */
;;;2316   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2317   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2318   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2319   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2320   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2321   		return FR_WRITE_PROTECTED;
;;;2322   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2323   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2324   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2325   #endif
;;;2326   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2327   	bsect = 0;
;;;2328   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2329   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2330   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2331   			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
;;;2332   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2333   		}
;;;2334   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2335   		if (i) i--;
;;;2336   		do {								/* Find an FAT volume */
;;;2337   			bsect = br[i];
;;;2338   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2339   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2340   	}
;;;2341   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2342   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2343   
;;;2344   	/* An FAT volume is found. Following code initializes the file system object */
;;;2345   
;;;2346   	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2347   		return FR_NO_FILESYSTEM;
;;;2348   
;;;2349   	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
;;;2350   	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
;;;2351   	fs->fsize = fasize;
;;;2352   
;;;2353   	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
;;;2354   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2355   		return FR_NO_FILESYSTEM;
;;;2356   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2357   
;;;2358   	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2359   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2360   		return FR_NO_FILESYSTEM;
;;;2361   
;;;2362   	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
;;;2363   	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
;;;2364   		return FR_NO_FILESYSTEM;
;;;2365   
;;;2366   	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
;;;2367   	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
;;;2368   
;;;2369   	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
;;;2370   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2371   
;;;2372   	/* Determine the FAT sub type */
;;;2373   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
;;;2374   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2375   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2376   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2377   	fmt = FS_FAT12;
;;;2378   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2379   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2380   
;;;2381   	/* Boundaries and Limits */
;;;2382   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2383   	fs->volbase = bsect;								/* Volume start sector */
;;;2384   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2385   	fs->database = bsect + sysect;						/* Data start sector */
;;;2386   	if (fmt == FS_FAT32) {
;;;2387   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2388   		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
;;;2389   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2390   	} else {
;;;2391   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2392   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2393   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2394   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2395   	}
;;;2396   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
;;;2397   		return FR_NO_FILESYSTEM;
;;;2398   
;;;2399   #if !_FS_READONLY
;;;2400   	/* Initialize cluster allocation information */
;;;2401   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2402   
;;;2403   	/* Get fsinfo if available */
;;;2404   	fs->fsi_flag = 0x80;
;;;2405   #if (_FS_NOFSINFO & 3) != 3
;;;2406   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
;;;2407   		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
;;;2408   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2409   	{
;;;2410   		fs->fsi_flag = 0;
;;;2411   		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2412   			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
;;;2413   			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
;;;2414   		{
;;;2415   #if (_FS_NOFSINFO & 1) == 0
;;;2416   			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
;;;2417   #endif
;;;2418   #if (_FS_NOFSINFO & 2) == 0
;;;2419   			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
;;;2420   #endif
;;;2421   		}
;;;2422   	}
;;;2423   #endif
;;;2424   #endif
;;;2425   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2426   	fs->id = ++Fsid;	/* File system mount ID */
;;;2427   #if _FS_RPATH
;;;2428   	fs->cdir = 0;		/* Set current directory to root */
;;;2429   #endif
;;;2430   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2431   	clear_lock(fs);
;;;2432   #endif
;;;2433   
;;;2434   	return FR_OK;
;;;2435   }
00001c  b00d              ADD      sp,sp,#0x34
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L48.34|
000022  49fe              LDR      r1,|L48.1052|
000024  9809              LDR      r0,[sp,#0x24]         ;2297
000026  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2297
00002a  b90c              CBNZ     r4,|L48.48|
00002c  200c              MOVS     r0,#0xc               ;2298
00002e  e7f5              B        |L48.28|
                  |L48.48|
000030  980a              LDR      r0,[sp,#0x28]         ;2301
000032  6004              STR      r4,[r0,#0]            ;2301
000034  f44f5080          MOV      r0,#0x1000            ;2303
000038  5d00              LDRB     r0,[r0,r4]            ;2303
00003a  b188              CBZ      r0,|L48.96|
00003c  f2410101          MOV      r1,#0x1001            ;2304
000040  5d08              LDRB     r0,[r1,r4]            ;2304
000042  f7fffffe          BL       disk_status
000046  4681              MOV      r9,r0                 ;2304
000048  f0090001          AND      r0,r9,#1              ;2305
00004c  b940              CBNZ     r0,|L48.96|
00004e  980c              LDR      r0,[sp,#0x30]         ;2306
000050  b120              CBZ      r0,|L48.92|
000052  f0090004          AND      r0,r9,#4              ;2306
000056  b108              CBZ      r0,|L48.92|
000058  200a              MOVS     r0,#0xa               ;2307
00005a  e7df              B        |L48.28|
                  |L48.92|
00005c  2000              MOVS     r0,#0                 ;2308
00005e  e7dd              B        |L48.28|
                  |L48.96|
000060  2100              MOVS     r1,#0                 ;2315
000062  f44f5080          MOV      r0,#0x1000            ;2315
000066  5501              STRB     r1,[r0,r4]            ;2315
000068  9809              LDR      r0,[sp,#0x24]         ;2316
00006a  b2c1              UXTB     r1,r0                 ;2316
00006c  f2410001          MOV      r0,#0x1001            ;2316
000070  5501              STRB     r1,[r0,r4]            ;2316
000072  4601              MOV      r1,r0                 ;2317
000074  5d08              LDRB     r0,[r1,r4]            ;2317
000076  f7fffffe          BL       disk_initialize
00007a  4681              MOV      r9,r0                 ;2317
00007c  f0090001          AND      r0,r9,#1              ;2318
000080  b108              CBZ      r0,|L48.134|
000082  2003              MOVS     r0,#3                 ;2319
000084  e7ca              B        |L48.28|
                  |L48.134|
000086  980c              LDR      r0,[sp,#0x30]         ;2320
000088  b120              CBZ      r0,|L48.148|
00008a  f0090004          AND      r0,r9,#4              ;2320
00008e  b108              CBZ      r0,|L48.148|
000090  200a              MOVS     r0,#0xa               ;2321
000092  e7c3              B        |L48.28|
                  |L48.148|
000094  2700              MOVS     r7,#0                 ;2327
000096  4639              MOV      r1,r7                 ;2328
000098  4620              MOV      r0,r4                 ;2328
00009a  f7fffffe          BL       check_fs
00009e  4605              MOV      r5,r0                 ;2328
0000a0  2d01              CMP      r5,#1                 ;2329
0000a2  d001              BEQ      |L48.168|
0000a4  bb9d              CBNZ     r5,|L48.270|
0000a6  e032              B        |L48.270|
                  |L48.168|
0000a8  2600              MOVS     r6,#0                 ;2330
0000aa  e01a              B        |L48.226|
                  |L48.172|
0000ac  f50470df          ADD      r0,r4,#0x1be          ;2331
0000b0  eb001806          ADD      r8,r0,r6,LSL #4       ;2331
0000b4  f8980004          LDRB     r0,[r8,#4]            ;2332
0000b8  b170              CBZ      r0,|L48.216|
0000ba  f898000b          LDRB     r0,[r8,#0xb]          ;2332
0000be  0601              LSLS     r1,r0,#24             ;2332
0000c0  f898000a          LDRB     r0,[r8,#0xa]          ;2332
0000c4  ea414100          ORR      r1,r1,r0,LSL #16      ;2332
0000c8  f8980009          LDRB     r0,[r8,#9]            ;2332
0000cc  ea412000          ORR      r0,r1,r0,LSL #8       ;2332
0000d0  f8981008          LDRB     r1,[r8,#8]            ;2332
0000d4  4308              ORRS     r0,r0,r1              ;2332
0000d6  e000              B        |L48.218|
                  |L48.216|
0000d8  2000              MOVS     r0,#0                 ;2332
                  |L48.218|
0000da  a902              ADD      r1,sp,#8              ;2332
0000dc  f8410026          STR      r0,[r1,r6,LSL #2]     ;2332
0000e0  1c76              ADDS     r6,r6,#1              ;2330
                  |L48.226|
0000e2  2e04              CMP      r6,#4                 ;2330
0000e4  d3e2              BCC      |L48.172|
0000e6  2600              MOVS     r6,#0                 ;2334
0000e8  b106              CBZ      r6,|L48.236|
0000ea  1e76              SUBS     r6,r6,#1              ;2335
                  |L48.236|
0000ec  bf00              NOP                            ;2336
                  |L48.238|
0000ee  a802              ADD      r0,sp,#8              ;2337
0000f0  f8507026          LDR      r7,[r0,r6,LSL #2]     ;2337
0000f4  b127              CBZ      r7,|L48.256|
0000f6  4639              MOV      r1,r7                 ;2338
0000f8  4620              MOV      r0,r4                 ;2338
0000fa  f7fffffe          BL       check_fs
0000fe  e000              B        |L48.258|
                  |L48.256|
000100  2002              MOVS     r0,#2                 ;2338
                  |L48.258|
000102  4605              MOV      r5,r0                 ;2338
000104  b11d              CBZ      r5,|L48.270|
000106  1c70              ADDS     r0,r6,#1              ;2339
000108  4606              MOV      r6,r0                 ;2339
00010a  2804              CMP      r0,#4                 ;2339
00010c  d3ef              BCC      |L48.238|
                  |L48.270|
00010e  2d03              CMP      r5,#3                 ;2341
000110  d101              BNE      |L48.278|
000112  2001              MOVS     r0,#1                 ;2341
000114  e782              B        |L48.28|
                  |L48.278|
000116  b10d              CBZ      r5,|L48.284|
000118  200d              MOVS     r0,#0xd               ;2342
00011a  e77f              B        |L48.28|
                  |L48.284|
00011c  7ae1              LDRB     r1,[r4,#0xb]          ;2346
00011e  7b20              LDRB     r0,[r4,#0xc]          ;2346
000120  ea412000          ORR      r0,r1,r0,LSL #8       ;2346
000124  f5b05f80          CMP      r0,#0x1000            ;2346
000128  d001              BEQ      |L48.302|
00012a  200d              MOVS     r0,#0xd               ;2347
00012c  e776              B        |L48.28|
                  |L48.302|
00012e  7da1              LDRB     r1,[r4,#0x16]         ;2349
000130  7de0              LDRB     r0,[r4,#0x17]         ;2349
000132  ea412a00          ORR      r10,r1,r0,LSL #8      ;2349
000136  f1ba0f00          CMP      r10,#0                ;2350
00013a  d10e              BNE      |L48.346|
00013c  2027              MOVS     r0,#0x27              ;2350
00013e  5d00              LDRB     r0,[r0,r4]            ;2350
000140  0601              LSLS     r1,r0,#24             ;2350
000142  2026              MOVS     r0,#0x26              ;2350
000144  5d00              LDRB     r0,[r0,r4]            ;2350
000146  ea414100          ORR      r1,r1,r0,LSL #16      ;2350
00014a  2025              MOVS     r0,#0x25              ;2350
00014c  5d00              LDRB     r0,[r0,r4]            ;2350
00014e  ea412000          ORR      r0,r1,r0,LSL #8       ;2350
000152  f8941024          LDRB     r1,[r4,#0x24]         ;2350
000156  ea400a01          ORR      r10,r0,r1             ;2350
                  |L48.346|
00015a  f241001c          MOV      r0,#0x101c            ;2351
00015e  f840a004          STR      r10,[r0,r4]           ;2351
000162  7c21              LDRB     r1,[r4,#0x10]         ;2353
000164  f2410003          MOV      r0,#0x1003            ;2353
000168  5501              STRB     r1,[r0,r4]            ;2353
00016a  5d00              LDRB     r0,[r0,r4]            ;2354
00016c  2801              CMP      r0,#1                 ;2354
00016e  d006              BEQ      |L48.382|
000170  f2410003          MOV      r0,#0x1003            ;2354
000174  5d00              LDRB     r0,[r0,r4]            ;2354
000176  2802              CMP      r0,#2                 ;2354
000178  d001              BEQ      |L48.382|
00017a  200d              MOVS     r0,#0xd               ;2355
00017c  e74e              B        |L48.28|
                  |L48.382|
00017e  f2410003          MOV      r0,#0x1003            ;2356
000182  5d00              LDRB     r0,[r0,r4]            ;2356
000184  fb0afa00          MUL      r10,r10,r0            ;2356
000188  7b61              LDRB     r1,[r4,#0xd]          ;2358
00018a  f2410002          MOV      r0,#0x1002            ;2358
00018e  5501              STRB     r1,[r0,r4]            ;2358
000190  5d00              LDRB     r0,[r0,r4]            ;2359
000192  b140              CBZ      r0,|L48.422|
000194  f2410002          MOV      r0,#0x1002            ;2359
000198  5d00              LDRB     r0,[r0,r4]            ;2359
00019a  f2410102          MOV      r1,#0x1002            ;2359
00019e  5d09              LDRB     r1,[r1,r4]            ;2359
0001a0  1e49              SUBS     r1,r1,#1              ;2359
0001a2  4008              ANDS     r0,r0,r1              ;2359
0001a4  b108              CBZ      r0,|L48.426|
                  |L48.422|
0001a6  200d              MOVS     r0,#0xd               ;2360
0001a8  e738              B        |L48.28|
                  |L48.426|
0001aa  7c61              LDRB     r1,[r4,#0x11]         ;2362
0001ac  7ca0              LDRB     r0,[r4,#0x12]         ;2362
0001ae  ea412100          ORR      r1,r1,r0,LSL #8       ;2362
0001b2  f2410008          MOV      r0,#0x1008            ;2362
0001b6  5301              STRH     r1,[r0,r4]            ;2362
0001b8  5d00              LDRB     r0,[r0,r4]            ;2363
0001ba  f000007f          AND      r0,r0,#0x7f           ;2363
0001be  b108              CBZ      r0,|L48.452|
0001c0  200d              MOVS     r0,#0xd               ;2364
0001c2  e72b              B        |L48.28|
                  |L48.452|
0001c4  7ce1              LDRB     r1,[r4,#0x13]         ;2366
0001c6  7d20              LDRB     r0,[r4,#0x14]         ;2366
0001c8  ea412000          ORR      r0,r1,r0,LSL #8       ;2366
0001cc  9008              STR      r0,[sp,#0x20]         ;2366
0001ce  9808              LDR      r0,[sp,#0x20]         ;2367
0001d0  b970              CBNZ     r0,|L48.496|
0001d2  2023              MOVS     r0,#0x23              ;2367
0001d4  5d00              LDRB     r0,[r0,r4]            ;2367
0001d6  0601              LSLS     r1,r0,#24             ;2367
0001d8  2022              MOVS     r0,#0x22              ;2367
0001da  5d00              LDRB     r0,[r0,r4]            ;2367
0001dc  ea414100          ORR      r1,r1,r0,LSL #16      ;2367
0001e0  2021              MOVS     r0,#0x21              ;2367
0001e2  5d00              LDRB     r0,[r0,r4]            ;2367
0001e4  ea412000          ORR      r0,r1,r0,LSL #8       ;2367
0001e8  f8941020          LDRB     r1,[r4,#0x20]         ;2367
0001ec  4308              ORRS     r0,r0,r1              ;2367
0001ee  9008              STR      r0,[sp,#0x20]         ;2367
                  |L48.496|
0001f0  7ba1              LDRB     r1,[r4,#0xe]          ;2369
0001f2  7be0              LDRB     r0,[r4,#0xf]          ;2369
0001f4  ea412000          ORR      r0,r1,r0,LSL #8       ;2369
0001f8  9001              STR      r0,[sp,#4]            ;2369
0001fa  9801              LDR      r0,[sp,#4]            ;2370
0001fc  b908              CBNZ     r0,|L48.514|
0001fe  200d              MOVS     r0,#0xd               ;2370
000200  e70c              B        |L48.28|
                  |L48.514|
000202  9801              LDR      r0,[sp,#4]            ;2373
000204  eb00010a          ADD      r1,r0,r10             ;2373
000208  f2410008          MOV      r0,#0x1008            ;2373
00020c  5b00              LDRH     r0,[r0,r4]            ;2373
00020e  eb0110d0          ADD      r0,r1,r0,LSR #7       ;2373
000212  9007              STR      r0,[sp,#0x1c]         ;2373
000214  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;2374
000218  4281              CMP      r1,r0                 ;2374
00021a  d201              BCS      |L48.544|
00021c  200d              MOVS     r0,#0xd               ;2374
00021e  e6fd              B        |L48.28|
                  |L48.544|
000220  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;2375
000224  1a41              SUBS     r1,r0,r1              ;2375
000226  f2410002          MOV      r0,#0x1002            ;2375
00022a  5d00              LDRB     r0,[r0,r4]            ;2375
00022c  fbb1fbf0          UDIV     r11,r1,r0             ;2375
000230  f1bb0f00          CMP      r11,#0                ;2376
000234  d101              BNE      |L48.570|
000236  200d              MOVS     r0,#0xd               ;2376
000238  e6f0              B        |L48.28|
                  |L48.570|
00023a  2501              MOVS     r5,#1                 ;2377
00023c  f64070f6          MOV      r0,#0xff6             ;2378
000240  4583              CMP      r11,r0                ;2378
000242  d300              BCC      |L48.582|
000244  2502              MOVS     r5,#2                 ;2378
                  |L48.582|
000246  f64f70f6          MOV      r0,#0xfff6            ;2379
00024a  4583              CMP      r11,r0                ;2379
00024c  d300              BCC      |L48.592|
00024e  2503              MOVS     r5,#3                 ;2379
                  |L48.592|
000250  f10b0002          ADD      r0,r11,#2             ;2382
000254  f2410118          MOV      r1,#0x1018            ;2382
000258  5108              STR      r0,[r1,r4]            ;2382
00025a  f44f5081          MOV      r0,#0x1020            ;2383
00025e  5107              STR      r7,[r0,r4]            ;2383
000260  9801              LDR      r0,[sp,#4]            ;2384
000262  1839              ADDS     r1,r7,r0              ;2384
000264  f2410024          MOV      r0,#0x1024            ;2384
000268  5101              STR      r1,[r0,r4]            ;2384
00026a  9807              LDR      r0,[sp,#0x1c]         ;2385
00026c  1839              ADDS     r1,r7,r0              ;2385
00026e  f241002c          MOV      r0,#0x102c            ;2385
000272  5101              STR      r1,[r0,r4]            ;2385
000274  2d03              CMP      r5,#3                 ;2386
000276  d11c              BNE      |L48.690|
000278  f2410008          MOV      r0,#0x1008            ;2387
00027c  5b00              LDRH     r0,[r0,r4]            ;2387
00027e  b108              CBZ      r0,|L48.644|
000280  200d              MOVS     r0,#0xd               ;2387
000282  e6cb              B        |L48.28|
                  |L48.644|
000284  202f              MOVS     r0,#0x2f              ;2388
000286  5d00              LDRB     r0,[r0,r4]            ;2388
000288  0601              LSLS     r1,r0,#24             ;2388
00028a  202e              MOVS     r0,#0x2e              ;2388
00028c  5d00              LDRB     r0,[r0,r4]            ;2388
00028e  ea414100          ORR      r1,r1,r0,LSL #16      ;2388
000292  202d              MOVS     r0,#0x2d              ;2388
000294  5d00              LDRB     r0,[r0,r4]            ;2388
000296  ea412000          ORR      r0,r1,r0,LSL #8       ;2388
00029a  f894102c          LDRB     r1,[r4,#0x2c]         ;2388
00029e  4308              ORRS     r0,r0,r1              ;2388
0002a0  f2410128          MOV      r1,#0x1028            ;2388
0002a4  5108              STR      r0,[r1,r4]            ;2388
0002a6  f2410018          MOV      r0,#0x1018            ;2389
0002aa  5900              LDR      r0,[r0,r4]            ;2389
0002ac  0080              LSLS     r0,r0,#2              ;2389
0002ae  9006              STR      r0,[sp,#0x18]         ;2389
0002b0  e021              B        |L48.758|
                  |L48.690|
0002b2  f2410008          MOV      r0,#0x1008            ;2391
0002b6  5b00              LDRH     r0,[r0,r4]            ;2391
0002b8  b908              CBNZ     r0,|L48.702|
0002ba  200d              MOVS     r0,#0xd               ;2391
0002bc  e6ae              B        |L48.28|
                  |L48.702|
0002be  f2410024          MOV      r0,#0x1024            ;2392
0002c2  5900              LDR      r0,[r0,r4]            ;2392
0002c4  eb00010a          ADD      r1,r0,r10             ;2392
0002c8  f2410028          MOV      r0,#0x1028            ;2392
0002cc  5101              STR      r1,[r0,r4]            ;2392
0002ce  2d02              CMP      r5,#2                 ;2393
0002d0  d104              BNE      |L48.732|
0002d2  f2410018          MOV      r0,#0x1018            ;2394
0002d6  5900              LDR      r0,[r0,r4]            ;2394
0002d8  0040              LSLS     r0,r0,#1              ;2394
0002da  e00b              B        |L48.756|
                  |L48.732|
0002dc  f2410018          MOV      r0,#0x1018            ;2394
0002e0  5d00              LDRB     r0,[r0,r4]            ;2394
0002e2  f0000101          AND      r1,r0,#1              ;2394
0002e6  f2410018          MOV      r0,#0x1018            ;2394
0002ea  5900              LDR      r0,[r0,r4]            ;2394
0002ec  eb000040          ADD      r0,r0,r0,LSL #1       ;2394
0002f0  eb010050          ADD      r0,r1,r0,LSR #1       ;2394
                  |L48.756|
0002f4  9006              STR      r0,[sp,#0x18]         ;2394
                  |L48.758|
0002f6  f241001c          MOV      r0,#0x101c            ;2396
0002fa  5901              LDR      r1,[r0,r4]            ;2396
0002fc  9806              LDR      r0,[sp,#0x18]         ;2396
0002fe  f60070ff          ADD      r0,r0,#0xfff          ;2396
000302  ebb13f10          CMP      r1,r0,LSR #12         ;2396
000306  d201              BCS      |L48.780|
000308  200d              MOVS     r0,#0xd               ;2397
00030a  e687              B        |L48.28|
                  |L48.780|
00030c  f04f31ff          MOV      r1,#0xffffffff        ;2401
000310  f2410010          MOV      r0,#0x1010            ;2401
000314  5101              STR      r1,[r0,r4]            ;2401
000316  1f00              SUBS     r0,r0,#4              ;2401
000318  5101              STR      r1,[r0,r4]            ;2401
00031a  2180              MOVS     r1,#0x80              ;2404
00031c  1fc0              SUBS     r0,r0,#7              ;2404
00031e  5501              STRB     r1,[r0,r4]            ;2404
000320  2d03              CMP      r5,#3                 ;2406
000322  d166              BNE      |L48.1010|
000324  f8941030          LDRB     r1,[r4,#0x30]         ;2407
000328  2031              MOVS     r0,#0x31              ;2407
00032a  5d00              LDRB     r0,[r0,r4]            ;2407
00032c  ea412000          ORR      r0,r1,r0,LSL #8       ;2407
000330  2801              CMP      r0,#1                 ;2407
000332  d15e              BNE      |L48.1010|
000334  1c79              ADDS     r1,r7,#1              ;2408
000336  4620              MOV      r0,r4                 ;2408
000338  f7fffffe          BL       move_window
00033c  bbf0              CBNZ     r0,|L48.956|
00033e  2100              MOVS     r1,#0                 ;2410
000340  f2410005          MOV      r0,#0x1005            ;2410
000344  5501              STRB     r1,[r0,r4]            ;2410
000346  f89411fe          LDRB     r1,[r4,#0x1fe]        ;2411
00034a  f24010ff          MOV      r0,#0x1ff             ;2411
00034e  5d00              LDRB     r0,[r0,r4]            ;2411
000350  ea412000          ORR      r0,r1,r0,LSL #8       ;2411
000354  f64a2155          MOV      r1,#0xaa55            ;2411
000358  4288              CMP      r0,r1                 ;2411
00035a  d14a              BNE      |L48.1010|
00035c  78e0              LDRB     r0,[r4,#3]            ;2412
00035e  0600              LSLS     r0,r0,#24             ;2412
000360  78a1              LDRB     r1,[r4,#2]            ;2412
000362  ea404001          ORR      r0,r0,r1,LSL #16      ;2412
000366  7861              LDRB     r1,[r4,#1]            ;2412
000368  ea402001          ORR      r0,r0,r1,LSL #8       ;2412
00036c  7821              LDRB     r1,[r4,#0]            ;2412
00036e  4308              ORRS     r0,r0,r1              ;2412
000370  492b              LDR      r1,|L48.1056|
000372  4288              CMP      r0,r1                 ;2412
000374  d13d              BNE      |L48.1010|
000376  f24010e7          MOV      r0,#0x1e7             ;2413
00037a  5d00              LDRB     r0,[r0,r4]            ;2413
00037c  0601              LSLS     r1,r0,#24             ;2413
00037e  f44f70f3          MOV      r0,#0x1e6             ;2413
000382  5d00              LDRB     r0,[r0,r4]            ;2413
000384  ea414100          ORR      r1,r1,r0,LSL #16      ;2413
000388  f24010e5          MOV      r0,#0x1e5             ;2413
00038c  5d00              LDRB     r0,[r0,r4]            ;2413
00038e  ea412000          ORR      r0,r1,r0,LSL #8       ;2413
000392  f89411e4          LDRB     r1,[r4,#0x1e4]        ;2413
000396  4308              ORRS     r0,r0,r1              ;2413
000398  4922              LDR      r1,|L48.1060|
00039a  4288              CMP      r0,r1                 ;2413
00039c  d129              BNE      |L48.1010|
00039e  f24010eb          MOV      r0,#0x1eb             ;2416
0003a2  5d00              LDRB     r0,[r0,r4]            ;2416
0003a4  0601              LSLS     r1,r0,#24             ;2416
0003a6  f44f70f5          MOV      r0,#0x1ea             ;2416
0003aa  5d00              LDRB     r0,[r0,r4]            ;2416
0003ac  ea414100          ORR      r1,r1,r0,LSL #16      ;2416
0003b0  f24010e9          MOV      r0,#0x1e9             ;2416
0003b4  5d00              LDRB     r0,[r0,r4]            ;2416
0003b6  ea412000          ORR      r0,r1,r0,LSL #8       ;2416
0003ba  e000              B        |L48.958|
                  |L48.956|
0003bc  e019              B        |L48.1010|
                  |L48.958|
0003be  f89411e8          LDRB     r1,[r4,#0x1e8]        ;2416
0003c2  4308              ORRS     r0,r0,r1              ;2416
0003c4  f2410110          MOV      r1,#0x1010            ;2416
0003c8  5108              STR      r0,[r1,r4]            ;2416
0003ca  f24010ef          MOV      r0,#0x1ef             ;2419
0003ce  5d00              LDRB     r0,[r0,r4]            ;2419
0003d0  0601              LSLS     r1,r0,#24             ;2419
0003d2  f44f70f7          MOV      r0,#0x1ee             ;2419
0003d6  5d00              LDRB     r0,[r0,r4]            ;2419
0003d8  ea414100          ORR      r1,r1,r0,LSL #16      ;2419
0003dc  f24010ed          MOV      r0,#0x1ed             ;2419
0003e0  5d00              LDRB     r0,[r0,r4]            ;2419
0003e2  ea412000          ORR      r0,r1,r0,LSL #8       ;2419
0003e6  f89411ec          LDRB     r1,[r4,#0x1ec]        ;2419
0003ea  4308              ORRS     r0,r0,r1              ;2419
0003ec  f241010c          MOV      r1,#0x100c            ;2419
0003f0  5108              STR      r0,[r1,r4]            ;2419
                  |L48.1010|
0003f2  f44f5080          MOV      r0,#0x1000            ;2425
0003f6  5505              STRB     r5,[r0,r4]            ;2425
0003f8  480b              LDR      r0,|L48.1064|
0003fa  8800              LDRH     r0,[r0,#0]            ;2426  ; Fsid
0003fc  1c40              ADDS     r0,r0,#1              ;2426
0003fe  b281              UXTH     r1,r0                 ;2426
000400  4809              LDR      r0,|L48.1064|
000402  8001              STRH     r1,[r0,#0]            ;2426
000404  f2410006          MOV      r0,#0x1006            ;2426
000408  5301              STRH     r1,[r0,r4]            ;2426
00040a  2100              MOVS     r1,#0                 ;2428
00040c  f2410014          MOV      r0,#0x1014            ;2428
000410  5101              STR      r1,[r0,r4]            ;2428
000412  4620              MOV      r0,r4                 ;2431
000414  f7fffffe          BL       clear_lock
000418  2000              MOVS     r0,#0                 ;2434
00041a  e5ff              B        |L48.28|
                  |L48.1052|
                          DCD      FatFs
                  |L48.1056|
                          DCD      0x41615252
                  |L48.1060|
                          DCD      0x61417272
                  |L48.1064|
                          DCD      Fsid
                          ENDP


                          AREA ||i.fit_lfn||, CODE, READONLY, ALIGN=2

                  fit_lfn PROC
;;;1410   static
;;;1411   void fit_lfn (
000000  b5f0              PUSH     {r4-r7,lr}
;;;1412   	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
;;;1413   	BYTE* dir,				/* Pointer to the directory entry */
;;;1414   	BYTE ord,				/* LFN order (1-20) */
;;;1415   	BYTE sum				/* SFN sum */
;;;1416   )
;;;1417   {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;1418   	UINT i, s;
;;;1419   	WCHAR wc;
;;;1420   
;;;1421   
;;;1422   	dir[LDIR_Chksum] = sum;			/* Set check sum */
000006  734d              STRB     r5,[r1,#0xd]
;;;1423   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
000008  270f              MOVS     r7,#0xf
00000a  72cf              STRB     r7,[r1,#0xb]
;;;1424   	dir[LDIR_Type] = 0;
00000c  2700              MOVS     r7,#0
00000e  730f              STRB     r7,[r1,#0xc]
;;;1425   	ST_WORD(dir + LDIR_FstClusLO, 0);
000010  768f              STRB     r7,[r1,#0x1a]
000012  46bc              MOV      r12,r7
000014  f881c01b          STRB     r12,[r1,#0x1b]
;;;1426   
;;;1427   	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
000018  1e57              SUBS     r7,r2,#1
00001a  eb070c87          ADD      r12,r7,r7,LSL #2
00001e  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1428   	s = wc = 0;
000022  2700              MOVS     r7,#0
000024  4638              MOV      r0,r7
000026  463b              MOV      r3,r7
;;;1429   	do {
000028  bf00              NOP      
                  |L49.42|
;;;1430   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
00002a  f64f77ff          MOV      r7,#0xffff
00002e  42b8              CMP      r0,r7
000030  d003              BEQ      |L49.58|
000032  4637              MOV      r7,r6
000034  1c76              ADDS     r6,r6,#1
000036  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L49.58|
;;;1431   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
00003a  f8dfc040          LDR      r12,|L49.124|
00003e  f81cc003          LDRB     r12,[r12,r3]
000042  f801000c          STRB     r0,[r1,r12]
000046  1207              ASRS     r7,r0,#8
000048  f8dfc030          LDR      r12,|L49.124|
00004c  f81cc003          LDRB     r12,[r12,r3]
000050  448c              ADD      r12,r12,r1
000052  f88c7001          STRB     r7,[r12,#1]
;;;1432   		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
000056  b908              CBNZ     r0,|L49.92|
000058  f64f70ff          MOV      r0,#0xffff
                  |L49.92|
;;;1433   	} while (++s < 13);
00005c  1c5f              ADDS     r7,r3,#1
00005e  463b              MOV      r3,r7
000060  2f0d              CMP      r7,#0xd
000062  d3e2              BCC      |L49.42|
;;;1434   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
000064  f64f77ff          MOV      r7,#0xffff
000068  42b8              CMP      r0,r7
00006a  d002              BEQ      |L49.114|
00006c  f8347016          LDRH     r7,[r4,r6,LSL #1]
000070  b90f              CBNZ     r7,|L49.118|
                  |L49.114|
000072  f0420240          ORR      r2,r2,#0x40
                  |L49.118|
;;;1435   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
000076  700a              STRB     r2,[r1,#0]
;;;1436   }
000078  bdf0              POP      {r4-r7,pc}
;;;1437   
                          ENDP

00007a  0000              DCW      0x0000
                  |L49.124|
                          DCD      LfnOfs

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;2124   static
;;;2125   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2126   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2127   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2128   )
;;;2129   {
000004  4604              MOV      r4,r0
;;;2130   	FRESULT res;
;;;2131   	BYTE *dir, ns;
;;;2132   
;;;2133   
;;;2134   #if _FS_RPATH
;;;2135   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L50.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d107              BNE      |L50.38|
                  |L50.22|
;;;2136   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
00001c  2100              MOVS     r1,#0
00001e  f2410008          MOV      r0,#0x1008
000022  5101              STR      r1,[r0,r4]
000024  e008              B        |L50.56|
                  |L50.38|
;;;2137   	} else {								/* No heading separator */
;;;2138   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
000026  f44f5080          MOV      r0,#0x1000
00002a  5900              LDR      r0,[r0,r4]
00002c  f5005080          ADD      r0,r0,#0x1000
000030  6941              LDR      r1,[r0,#0x14]
000032  f2410008          MOV      r0,#0x1008
000036  5101              STR      r1,[r0,r4]
                  |L50.56|
;;;2139   	}
;;;2140   #else
;;;2141   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
;;;2142   		path++;
;;;2143   	dp->sclust = 0;							/* Always start from the root directory */
;;;2144   #endif
;;;2145   
;;;2146   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
000038  9801              LDR      r0,[sp,#4]
00003a  f9900000          LDRSB    r0,[r0,#0]
00003e  2820              CMP      r0,#0x20
000040  d209              BCS      |L50.86|
;;;2147   		res = dir_sdi(dp, 0);
000042  2100              MOVS     r1,#0
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       dir_sdi
00004a  4605              MOV      r5,r0
;;;2148   		dp->dir = 0;
00004c  2100              MOVS     r1,#0
00004e  f2410014          MOV      r0,#0x1014
000052  5101              STR      r1,[r0,r4]
000054  e03f              B        |L50.214|
                  |L50.86|
;;;2149   	} else {								/* Follow path */
;;;2150   		for (;;) {
000056  bf00              NOP      
                  |L50.88|
;;;2151   			res = create_name(dp, &path);	/* Get a segment name of the path */
000058  a901              ADD      r1,sp,#4
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       create_name
000060  4605              MOV      r5,r0
;;;2152   			if (res != FR_OK) break;
000062  b105              CBZ      r5,|L50.102|
000064  e036              B        |L50.212|
                  |L50.102|
;;;2153   			res = dir_find(dp);				/* Find an object with the sagment name */
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       dir_find
00006c  4605              MOV      r5,r0
;;;2154   			ns = dp->fn[NSFLAG];
00006e  f2410018          MOV      r0,#0x1018
000072  5900              LDR      r0,[r0,r4]
000074  7ac6              LDRB     r6,[r0,#0xb]
;;;2155   			if (res != FR_OK) {				/* Failed to find the object */
000076  b1b5              CBZ      r5,|L50.166|
;;;2156   				if (res == FR_NO_FILE) {	/* Object is not found */
000078  2d04              CMP      r5,#4
00007a  d113              BNE      |L50.164|
;;;2157   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
00007c  f0060020          AND      r0,r6,#0x20
000080  b160              CBZ      r0,|L50.156|
;;;2158   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
000082  2100              MOVS     r1,#0
000084  f2410008          MOV      r0,#0x1008
000088  5101              STR      r1,[r0,r4]
00008a  f2410014          MOV      r0,#0x1014
00008e  5101              STR      r1,[r0,r4]
;;;2159   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
000090  f0060004          AND      r0,r6,#4
000094  b900              CBNZ     r0,|L50.152|
000096  e7df              B        |L50.88|
                  |L50.152|
;;;2160   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
000098  2500              MOVS     r5,#0
00009a  e003              B        |L50.164|
                  |L50.156|
;;;2161   					} else {							/* Could not find the object */
;;;2162   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
00009c  f0060004          AND      r0,r6,#4
0000a0  b900              CBNZ     r0,|L50.164|
0000a2  2505              MOVS     r5,#5
                  |L50.164|
;;;2163   					}
;;;2164   				}
;;;2165   				break;
0000a4  e016              B        |L50.212|
                  |L50.166|
;;;2166   			}
;;;2167   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
0000a6  f0060004          AND      r0,r6,#4
0000aa  b100              CBZ      r0,|L50.174|
0000ac  e012              B        |L50.212|
                  |L50.174|
;;;2168   			dir = dp->dir;						/* Follow the sub-directory */
0000ae  f2410014          MOV      r0,#0x1014
0000b2  5907              LDR      r7,[r0,r4]
;;;2169   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
0000b4  7af8              LDRB     r0,[r7,#0xb]
0000b6  f0000010          AND      r0,r0,#0x10
0000ba  b908              CBNZ     r0,|L50.192|
;;;2170   				res = FR_NO_PATH; break;
0000bc  2505              MOVS     r5,#5
0000be  e009              B        |L50.212|
                  |L50.192|
;;;2171   			}
;;;2172   			dp->sclust = ld_clust(dp->fs, dir);
0000c0  f44f5180          MOV      r1,#0x1000
0000c4  5908              LDR      r0,[r1,r4]
0000c6  4639              MOV      r1,r7
0000c8  f7fffffe          BL       ld_clust
0000cc  f2410108          MOV      r1,#0x1008
0000d0  5108              STR      r0,[r1,r4]
0000d2  e7c1              B        |L50.88|
                  |L50.212|
0000d4  bf00              NOP                            ;2152
                  |L50.214|
;;;2173   		}
;;;2174   	}
;;;2175   
;;;2176   	return res;
0000d6  4628              MOV      r0,r5
;;;2177   }
0000d8  e8bd81fc          POP      {r2-r8,pc}
;;;2178   
                          ENDP


                          AREA ||i.gen_numname||, CODE, READONLY, ALIGN=2

                  gen_numname PROC
;;;1448   static
;;;1449   void gen_numname (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1450   	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
;;;1451   	const BYTE* src,	/* Pointer to SFN */
;;;1452   	const WCHAR* lfn,	/* Pointer to LFN */
;;;1453   	UINT seq			/* Sequence number */
;;;1454   )
;;;1455   {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;1456   	BYTE ns[8], c;
;;;1457   	UINT i, j;
;;;1458   	WCHAR wc;
;;;1459   	DWORD sr;
;;;1460   
;;;1461   
;;;1462   	mem_cpy(dst, src, 11);
00000c  220b              MOVS     r2,#0xb
00000e  4648              MOV      r0,r9
000010  9904              LDR      r1,[sp,#0x10]
000012  f7fffffe          BL       mem_cpy
;;;1463   
;;;1464   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000016  2d05              CMP      r5,#5
000018  d918              BLS      |L51.76|
;;;1465   		sr = seq;
00001a  462f              MOV      r7,r5
;;;1466   		while (*lfn) {	/* Create a CRC */
00001c  e011              B        |L51.66|
                  |L51.30|
;;;1467   			wc = *lfn++;
00001e  f838bb02          LDRH     r11,[r8],#2
;;;1468   			for (i = 0; i < 16; i++) {
000022  2400              MOVS     r4,#0
000024  e00b              B        |L51.62|
                  |L51.38|
;;;1469   				sr = (sr << 1) + (wc & 1);
000026  4658              MOV      r0,r11
000028  f367005f          BFI      r0,r7,#1,#31
00002c  4607              MOV      r7,r0
;;;1470   				wc >>= 1;
00002e  ea4f0b6b          ASR      r11,r11,#1
;;;1471   				if (sr & 0x10000) sr ^= 0x11021;
000032  f4073080          AND      r0,r7,#0x10000
000036  b108              CBZ      r0,|L51.60|
000038  481d              LDR      r0,|L51.176|
00003a  4047              EORS     r7,r7,r0
                  |L51.60|
00003c  1c64              ADDS     r4,r4,#1              ;1468
                  |L51.62|
00003e  2c10              CMP      r4,#0x10              ;1468
000040  d3f1              BCC      |L51.38|
                  |L51.66|
000042  f8b80000          LDRH     r0,[r8,#0]            ;1466
000046  2800              CMP      r0,#0                 ;1466
000048  d1e9              BNE      |L51.30|
;;;1472   			}
;;;1473   		}
;;;1474   		seq = (UINT)sr;
00004a  463d              MOV      r5,r7
                  |L51.76|
;;;1475   	}
;;;1476   
;;;1477   	/* itoa (hexdecimal) */
;;;1478   	i = 7;
00004c  2407              MOVS     r4,#7
;;;1479   	do {
00004e  bf00              NOP      
                  |L51.80|
;;;1480   		c = (seq % 16) + '0';
000050  f005000f          AND      r0,r5,#0xf
000054  f1000a30          ADD      r10,r0,#0x30
;;;1481   		if (c > '9') c += 7;
000058  f1ba0f39          CMP      r10,#0x39
00005c  dd03              BLE      |L51.102|
00005e  f10a0007          ADD      r0,r10,#7
000062  f0000aff          AND      r10,r0,#0xff
                  |L51.102|
;;;1482   		ns[i--] = c;
000066  4620              MOV      r0,r4
000068  1e64              SUBS     r4,r4,#1
00006a  a901              ADD      r1,sp,#4
00006c  f801a000          STRB     r10,[r1,r0]
;;;1483   		seq /= 16;
000070  092d              LSRS     r5,r5,#4
;;;1484   	} while (seq);
000072  2d00              CMP      r5,#0
000074  d1ec              BNE      |L51.80|
;;;1485   	ns[i] = '~';
000076  207e              MOVS     r0,#0x7e
000078  5508              STRB     r0,[r1,r4]
;;;1486   
;;;1487   	/* Append the number */
;;;1488   	for (j = 0; j < i && dst[j] != ' '; j++) {
00007a  2600              MOVS     r6,#0
00007c  e000              B        |L51.128|
                  |L51.126|
00007e  1c76              ADDS     r6,r6,#1
                  |L51.128|
000080  42a6              CMP      r6,r4
000082  d203              BCS      |L51.140|
000084  f8190006          LDRB     r0,[r9,r6]
000088  2820              CMP      r0,#0x20
00008a  d1f8              BNE      |L51.126|
                  |L51.140|
;;;1489   		if (IsDBCS1(dst[j])) {
;;;1490   			if (j == i - 1) break;
;;;1491   			j++;
;;;1492   		}
;;;1493   	}
;;;1494   	do {
00008c  bf00              NOP      
                  |L51.142|
;;;1495   		dst[j++] = (i < 8) ? ns[i++] : ' ';
00008e  2c08              CMP      r4,#8
000090  d204              BCS      |L51.156|
000092  4620              MOV      r0,r4
000094  1c64              ADDS     r4,r4,#1
000096  a901              ADD      r1,sp,#4
000098  5c08              LDRB     r0,[r1,r0]
00009a  e000              B        |L51.158|
                  |L51.156|
00009c  2020              MOVS     r0,#0x20
                  |L51.158|
00009e  4631              MOV      r1,r6
0000a0  1c76              ADDS     r6,r6,#1
0000a2  f8090001          STRB     r0,[r9,r1]
;;;1496   	} while (j < 8);
0000a6  2e08              CMP      r6,#8
0000a8  d3f1              BCC      |L51.142|
;;;1497   }
0000aa  b007              ADD      sp,sp,#0x1c
0000ac  e8bd8ff0          POP      {r4-r11,pc}
;;;1498   #endif
                          ENDP

                  |L51.176|
                          DCD      0x00011021

                          AREA ||i.get_achar||, CODE, READONLY, ALIGN=2

                  get_achar PROC
;;;1842   static
;;;1843   WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
000000  4601              MOV      r1,r0
;;;1844   	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
;;;1845   )
;;;1846   {
;;;1847   	WCHAR chr;
;;;1848   
;;;1849   #if !_LFN_UNICODE
;;;1850   	chr = (BYTE)*(*ptr)++;					/* Get a byte */
000002  680b              LDR      r3,[r1,#0]
000004  1c5a              ADDS     r2,r3,#1
000006  600a              STR      r2,[r1,#0]
000008  7818              LDRB     r0,[r3,#0]
;;;1851   	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
00000a  2861              CMP      r0,#0x61
00000c  db04              BLT      |L52.24|
00000e  287a              CMP      r0,#0x7a
000010  dc02              BGT      |L52.24|
000012  f1a00220          SUB      r2,r0,#0x20
000016  b290              UXTH     r0,r2
                  |L52.24|
;;;1852   	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
;;;1853   		chr = chr << 8 | (BYTE)*(*ptr)++;
;;;1854   #ifdef _EXCVT
;;;1855   	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
000018  2880              CMP      r0,#0x80
00001a  db03              BLT      |L52.36|
00001c  f1a00280          SUB      r2,r0,#0x80
000020  4b01              LDR      r3,|L52.40|
000022  5c98              LDRB     r0,[r3,r2]
                  |L52.36|
;;;1856   #endif
;;;1857   #else
;;;1858   	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
;;;1859   #endif
;;;1860   	return chr;
;;;1861   }
000024  4770              BX       lr
;;;1862   
                          ENDP

000026  0000              DCW      0x0000
                  |L52.40|
                          DCD      ExCvt

                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;890    
;;;891    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;892    	FATFS* fs,	/* File system object */
;;;893    	DWORD clst	/* FAT index number (cluster number) to get the value */
;;;894    )
;;;895    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;896    	UINT wc, bc;
;;;897    	BYTE *p;
;;;898    	DWORD val;
;;;899    
;;;900    
;;;901    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2c02              CMP      r4,#2
00000a  d304              BCC      |L53.22|
00000c  f2410018          MOV      r0,#0x1018
000010  5940              LDR      r0,[r0,r5]
000012  42a0              CMP      r0,r4
000014  d802              BHI      |L53.28|
                  |L53.22|
;;;902    		val = 1;	/* Internal error */
000016  f04f0901          MOV      r9,#1
00001a  e06b              B        |L53.244|
                  |L53.28|
;;;903    
;;;904    	} else {
;;;905    		val = 0xFFFFFFFF;	/* Default value falls on disk error */
00001c  f04f39ff          MOV      r9,#0xffffffff
;;;906    
;;;907    		switch (fs->fs_type) {
000020  f44f5080          MOV      r0,#0x1000
000024  5d40              LDRB     r0,[r0,r5]
000026  2801              CMP      r0,#1
000028  d004              BEQ      |L53.52|
00002a  2802              CMP      r0,#2
00002c  d02e              BEQ      |L53.140|
00002e  2803              CMP      r0,#3
000030  d15c              BNE      |L53.236|
000032  e03f              B        |L53.180|
                  |L53.52|
;;;908    		case FS_FAT12 :
;;;909    			bc = (UINT)clst; bc += bc / 2;
000034  4627              MOV      r7,r4
000036  eb070757          ADD      r7,r7,r7,LSR #1
;;;910    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
00003a  f2410024          MOV      r0,#0x1024
00003e  5940              LDR      r0,[r0,r5]
000040  eb003117          ADD      r1,r0,r7,LSR #12
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       move_window
00004a  b100              CBZ      r0,|L53.78|
00004c  e051              B        |L53.242|
                  |L53.78|
;;;911    			wc = fs->win.d8[bc++ % SS(fs)];
00004e  4638              MOV      r0,r7
000050  1c7f              ADDS     r7,r7,#1
000052  f3c0000b          UBFX     r0,r0,#0,#12
000056  f8158000          LDRB     r8,[r5,r0]
;;;912    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
00005a  f2410024          MOV      r0,#0x1024
00005e  5940              LDR      r0,[r0,r5]
000060  eb003117          ADD      r1,r0,r7,LSR #12
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       move_window
00006a  b100              CBZ      r0,|L53.110|
00006c  e041              B        |L53.242|
                  |L53.110|
;;;913    			wc |= fs->win.d8[bc % SS(fs)] << 8;
00006e  f3c7000b          UBFX     r0,r7,#0,#12
000072  5c28              LDRB     r0,[r5,r0]
000074  ea482800          ORR      r8,r8,r0,LSL #8
;;;914    			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
000078  f0040001          AND      r0,r4,#1
00007c  b110              CBZ      r0,|L53.132|
00007e  ea4f1018          LSR      r0,r8,#4
000082  e001              B        |L53.136|
                  |L53.132|
000084  f3c8000b          UBFX     r0,r8,#0,#12
                  |L53.136|
000088  4681              MOV      r9,r0
;;;915    			break;
00008a  e032              B        |L53.242|
                  |L53.140|
;;;916    
;;;917    		case FS_FAT16 :
;;;918    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
00008c  f2410024          MOV      r0,#0x1024
000090  5940              LDR      r0,[r0,r5]
000092  eb0021d4          ADD      r1,r0,r4,LSR #11
000096  4628              MOV      r0,r5
000098  f7fffffe          BL       move_window
00009c  b100              CBZ      r0,|L53.160|
00009e  e028              B        |L53.242|
                  |L53.160|
;;;919    			p = &fs->win.d8[clst * 2 % SS(fs)];
0000a0  f64070ff          MOV      r0,#0xfff
0000a4  ea000044          AND      r0,r0,r4,LSL #1
0000a8  1946              ADDS     r6,r0,r5
;;;920    			val = LD_WORD(p);
0000aa  7830              LDRB     r0,[r6,#0]
0000ac  7871              LDRB     r1,[r6,#1]
0000ae  ea402901          ORR      r9,r0,r1,LSL #8
;;;921    			break;
0000b2  e01e              B        |L53.242|
                  |L53.180|
;;;922    
;;;923    		case FS_FAT32 :
;;;924    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
0000b4  f2410024          MOV      r0,#0x1024
0000b8  5940              LDR      r0,[r0,r5]
0000ba  eb002194          ADD      r1,r0,r4,LSR #10
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       move_window
0000c4  b100              CBZ      r0,|L53.200|
0000c6  e014              B        |L53.242|
                  |L53.200|
;;;925    			p = &fs->win.d8[clst * 4 % SS(fs)];
0000c8  f64070ff          MOV      r0,#0xfff
0000cc  ea000084          AND      r0,r0,r4,LSL #2
0000d0  1946              ADDS     r6,r0,r5
;;;926    			val = LD_DWORD(p) & 0x0FFFFFFF;
0000d2  78f0              LDRB     r0,[r6,#3]
0000d4  0600              LSLS     r0,r0,#24
0000d6  78b1              LDRB     r1,[r6,#2]
0000d8  ea404001          ORR      r0,r0,r1,LSL #16
0000dc  7871              LDRB     r1,[r6,#1]
0000de  ea402001          ORR      r0,r0,r1,LSL #8
0000e2  7831              LDRB     r1,[r6,#0]
0000e4  4308              ORRS     r0,r0,r1
0000e6  f0204970          BIC      r9,r0,#0xf0000000
;;;927    			break;
0000ea  e002              B        |L53.242|
                  |L53.236|
;;;928    
;;;929    		default:
;;;930    			val = 1;	/* Internal error */
0000ec  f04f0901          MOV      r9,#1
0000f0  bf00              NOP                            ;907
                  |L53.242|
0000f2  bf00              NOP                            ;910
                  |L53.244|
;;;931    		}
;;;932    	}
;;;933    
;;;934    	return val;
0000f4  4648              MOV      r0,r9
;;;935    }
0000f6  e8bd87f0          POP      {r4-r10,pc}
;;;936    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1772   static
;;;1773   void get_fileinfo (		/* No return code */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1774   	DIR* dp,			/* Pointer to the directory object */
;;;1775   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1776   )
;;;1777   {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1778   	UINT i;
;;;1779   	TCHAR *p, c;
;;;1780   	BYTE *dir;
;;;1781   #if _USE_LFN
;;;1782   	WCHAR w, *lfn;
;;;1783   #endif
;;;1784   
;;;1785   	p = fno->fname;
000008  f1050709          ADD      r7,r5,#9
;;;1786   	if (dp->sect) {		/* Get SFN */
00000c  f2410010          MOV      r0,#0x1010
000010  f8500008          LDR      r0,[r0,r8]
000014  2800              CMP      r0,#0
000016  d046              BEQ      |L54.166|
;;;1787   		dir = dp->dir;
000018  f2410014          MOV      r0,#0x1014
00001c  f8504008          LDR      r4,[r0,r8]
;;;1788   		i = 0;
000020  2600              MOVS     r6,#0
;;;1789   		while (i < 11) {		/* Copy name body and extension */
000022  e027              B        |L54.116|
                  |L54.36|
;;;1790   			c = (TCHAR)dir[i++];
000024  4630              MOV      r0,r6
000026  1c76              ADDS     r6,r6,#1
000028  5c20              LDRB     r0,[r4,r0]
00002a  fa4ff980          SXTB     r9,r0
;;;1791   			if (c == ' ') continue;				/* Skip padding spaces */
00002e  f1b90f20          CMP      r9,#0x20
000032  d100              BNE      |L54.54|
000034  e01e              B        |L54.116|
                  |L54.54|
;;;1792   			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
000036  f1b90f05          CMP      r9,#5
00003a  d101              BNE      |L54.64|
00003c  f06f091a          MVN      r9,#0x1a
                  |L54.64|
;;;1793   			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
000040  2e09              CMP      r6,#9
000042  d102              BNE      |L54.74|
000044  202e              MOVS     r0,#0x2e
000046  f8070b01          STRB     r0,[r7],#1
                  |L54.74|
;;;1794   #if _USE_LFN
;;;1795   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
00004a  f1b90f41          CMP      r9,#0x41
00004e  db0e              BLT      |L54.110|
000050  f1b90f5a          CMP      r9,#0x5a
000054  dc0b              BGT      |L54.110|
000056  7b20              LDRB     r0,[r4,#0xc]
000058  2e09              CMP      r6,#9
00005a  d301              BCC      |L54.96|
00005c  2110              MOVS     r1,#0x10
00005e  e000              B        |L54.98|
                  |L54.96|
000060  2108              MOVS     r1,#8
                  |L54.98|
000062  4008              ANDS     r0,r0,r1
000064  b118              CBZ      r0,|L54.110|
;;;1796   				c += 0x20;			/* To lower */
000066  f1090020          ADD      r0,r9,#0x20
00006a  fa4ff980          SXTB     r9,r0
                  |L54.110|
;;;1797   #if _LFN_UNICODE
;;;1798   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1799   				c = c << 8 | dir[i++];
;;;1800   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1801   			if (!c) c = '?';
;;;1802   #endif
;;;1803   #endif
;;;1804   			*p++ = c;
00006e  f8079b01          STRB     r9,[r7],#1
000072  bf00              NOP                            ;1791
                  |L54.116|
000074  2e0b              CMP      r6,#0xb               ;1789
000076  d3d5              BCC      |L54.36|
;;;1805   		}
;;;1806   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
000078  7ae0              LDRB     r0,[r4,#0xb]
00007a  7228              STRB     r0,[r5,#8]
;;;1807   		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
00007c  7fe0              LDRB     r0,[r4,#0x1f]
00007e  0601              LSLS     r1,r0,#24
000080  7fa0              LDRB     r0,[r4,#0x1e]
000082  ea414100          ORR      r1,r1,r0,LSL #16
000086  7f60              LDRB     r0,[r4,#0x1d]
000088  ea412000          ORR      r0,r1,r0,LSL #8
00008c  7f21              LDRB     r1,[r4,#0x1c]
00008e  4308              ORRS     r0,r0,r1
000090  6028              STR      r0,[r5,#0]
;;;1808   		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
000092  7e21              LDRB     r1,[r4,#0x18]
000094  7e60              LDRB     r0,[r4,#0x19]
000096  ea412000          ORR      r0,r1,r0,LSL #8
00009a  80a8              STRH     r0,[r5,#4]
;;;1809   		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
00009c  7da1              LDRB     r1,[r4,#0x16]
00009e  7de0              LDRB     r0,[r4,#0x17]
0000a0  ea412000          ORR      r0,r1,r0,LSL #8
0000a4  80e8              STRH     r0,[r5,#6]
                  |L54.166|
;;;1810   	}
;;;1811   	*p = 0;		/* Terminate SFN string by a \0 */
0000a6  2000              MOVS     r0,#0
0000a8  7038              STRB     r0,[r7,#0]
;;;1812   
;;;1813   #if _USE_LFN
;;;1814   	if (fno->lfname) {
0000aa  69a8              LDR      r0,[r5,#0x18]
0000ac  b398              CBZ      r0,|L54.278|
;;;1815   		i = 0; p = fno->lfname;
0000ae  2600              MOVS     r6,#0
0000b0  69af              LDR      r7,[r5,#0x18]
;;;1816   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
0000b2  f2410010          MOV      r0,#0x1010
0000b6  f8500008          LDR      r0,[r0,r8]
0000ba  b350              CBZ      r0,|L54.274|
0000bc  69e8              LDR      r0,[r5,#0x1c]
0000be  b340              CBZ      r0,|L54.274|
0000c0  f2410024          MOV      r0,#0x1024
0000c4  f8300008          LDRH     r0,[r0,r8]
0000c8  f64f71ff          MOV      r1,#0xffff
0000cc  4288              CMP      r0,r1
0000ce  d020              BEQ      |L54.274|
;;;1817   			lfn = dp->lfn;
0000d0  f44f5081          MOV      r0,#0x1020
0000d4  f850b008          LDR      r11,[r0,r8]
;;;1818   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
0000d8  e015              B        |L54.262|
                  |L54.218|
;;;1819   #if !_LFN_UNICODE
;;;1820   				w = ff_convert(w, 0);		/* Unicode -> OEM */
0000da  2100              MOVS     r1,#0
0000dc  4650              MOV      r0,r10
0000de  f7fffffe          BL       ff_convert
0000e2  4682              MOV      r10,r0
;;;1821   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
0000e4  f1ba0f00          CMP      r10,#0
0000e8  d101              BNE      |L54.238|
0000ea  2600              MOVS     r6,#0
0000ec  e010              B        |L54.272|
                  |L54.238|
;;;1822   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
0000ee  bf00              NOP      
;;;1823   					p[i++] = (TCHAR)(w >> 8);
;;;1824   #endif
;;;1825   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
0000f0  69e8              LDR      r0,[r5,#0x1c]
0000f2  1e40              SUBS     r0,r0,#1
0000f4  42b0              CMP      r0,r6
0000f6  d801              BHI      |L54.252|
0000f8  2600              MOVS     r6,#0
0000fa  e009              B        |L54.272|
                  |L54.252|
;;;1826   				p[i++] = (TCHAR)w;
0000fc  fa4ff28a          SXTB     r2,r10
000100  4630              MOV      r0,r6
000102  1c76              ADDS     r6,r6,#1
000104  543a              STRB     r2,[r7,r0]
                  |L54.262|
000106  f83b1b02          LDRH     r1,[r11],#2           ;1818
00010a  f1b10a00          SUBS     r10,r1,#0             ;1818
00010e  d1e4              BNE      |L54.218|
                  |L54.272|
000110  bf00              NOP                            ;1821
                  |L54.274|
;;;1827   			}
;;;1828   		}
;;;1829   		p[i] = 0;	/* Terminate LFN string by a \0 */
000112  2000              MOVS     r0,#0
000114  55b8              STRB     r0,[r7,r6]
                  |L54.278|
;;;1830   	}
;;;1831   #endif
;;;1832   }
000116  e8bd9ff0          POP      {r4-r12,pc}
;;;1833   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.get_ldnumber||, CODE, READONLY, ALIGN=1

                  get_ldnumber PROC
;;;2186   static
;;;2187   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
000000  b570              PUSH     {r4-r6,lr}
;;;2188   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2189   )
;;;2190   {
000002  4602              MOV      r2,r0
;;;2191   	const TCHAR *tp, *tt;
;;;2192   	UINT i;
;;;2193   	int vol = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;2194   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2195   	static const char* const str[] = {_VOLUME_STRS};
;;;2196   	const char *sp;
;;;2197   	char c;
;;;2198   	TCHAR tc;
;;;2199   #endif
;;;2200   
;;;2201   
;;;2202   	if (*path) {	/* If the pointer is not a null */
000008  6815              LDR      r5,[r2,#0]
00000a  b1e5              CBZ      r5,|L55.70|
;;;2203   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
00000c  6811              LDR      r1,[r2,#0]
00000e  e000              B        |L55.18|
                  |L55.16|
000010  1c49              ADDS     r1,r1,#1
                  |L55.18|
000012  f9915000          LDRSB    r5,[r1,#0]
000016  2d20              CMP      r5,#0x20
000018  d302              BCC      |L55.32|
00001a  780d              LDRB     r5,[r1,#0]
00001c  2d3a              CMP      r5,#0x3a
00001e  d1f7              BNE      |L55.16|
                  |L55.32|
;;;2204   		if (*tt == ':') {	/* If a ':' is exist in the path name */
000020  780d              LDRB     r5,[r1,#0]
000022  2d3a              CMP      r5,#0x3a
000024  d10e              BNE      |L55.68|
;;;2205   			tp = *path;
000026  6814              LDR      r4,[r2,#0]
;;;2206   			i = *tp++ - '0'; 
000028  f9145b01          LDRSB    r5,[r4],#1
00002c  f1a50330          SUB      r3,r5,#0x30
;;;2207   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
000030  2b0a              CMP      r3,#0xa
000032  d206              BCS      |L55.66|
000034  428c              CMP      r4,r1
000036  d104              BNE      |L55.66|
;;;2208   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
000038  b91b              CBNZ     r3,|L55.66|
;;;2209   					vol = (int)i;
00003a  4618              MOV      r0,r3
;;;2210   					*path = ++tt;
00003c  1c4d              ADDS     r5,r1,#1
00003e  4629              MOV      r1,r5
000040  6015              STR      r5,[r2,#0]
                  |L55.66|
;;;2211   				}
;;;2212   			}
;;;2213   #if _STR_VOLUME_ID
;;;2214   			 else {	/* No numeric drive number, find string drive id */
;;;2215   				i = 0; tt++;
;;;2216   				do {
;;;2217   					sp = str[i]; tp = *path;
;;;2218   					do {	/* Compare a string drive id with path name */
;;;2219   						c = *sp++; tc = *tp++;
;;;2220   						if (IsLower(tc)) tc -= 0x20;
;;;2221   					} while (c && (TCHAR)c == tc);
;;;2222   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2223   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2224   					vol = (int)i;
;;;2225   					*path = tt;
;;;2226   				}
;;;2227   			}
;;;2228   #endif
;;;2229   			return vol;
;;;2230   		}
;;;2231   #if _FS_RPATH && _VOLUMES >= 2
;;;2232   		vol = CurrVol;	/* Current drive */
;;;2233   #else
;;;2234   		vol = 0;		/* Drive 0 */
;;;2235   #endif
;;;2236   	}
;;;2237   	return vol;
;;;2238   }
000042  bd70              POP      {r4-r6,pc}
                  |L55.68|
000044  2000              MOVS     r0,#0                 ;2234
                  |L55.70|
000046  bf00              NOP                            ;2237
000048  e7fb              B        |L55.66|
;;;2239   
                          ENDP


                          AREA ||i.inc_lock||, CODE, READONLY, ALIGN=2

                  inc_lock PROC
;;;697    static
;;;698    UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
000000  b530              PUSH     {r4,r5,lr}
;;;699    	DIR* dp,	/* Directory object pointing the file to register or increment */
;;;700    	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
;;;701    )
;;;702    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;703    	UINT i;
;;;704    
;;;705    
;;;706    	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
000006  2100              MOVS     r1,#0
000008  e021              B        |L56.78|
                  |L56.10|
;;;707    		if (Files[i].fs == dp->fs &&
00000a  eb010041          ADD      r0,r1,r1,LSL #1
00000e  4c38              LDR      r4,|L56.240|
000010  f8544020          LDR      r4,[r4,r0,LSL #2]
000014  f44f5080          MOV      r0,#0x1000
000018  5880              LDR      r0,[r0,r2]
00001a  4284              CMP      r4,r0
00001c  d116              BNE      |L56.76|
;;;708    			Files[i].clu == dp->sclust &&
00001e  eb010041          ADD      r0,r1,r1,LSL #1
000022  4c33              LDR      r4,|L56.240|
000024  eb040080          ADD      r0,r4,r0,LSL #2
000028  6844              LDR      r4,[r0,#4]
00002a  f2410008          MOV      r0,#0x1008
00002e  5880              LDR      r0,[r0,r2]
000030  4284              CMP      r4,r0
000032  d10b              BNE      |L56.76|
;;;709    			Files[i].idx == dp->index) break;
000034  eb010041          ADD      r0,r1,r1,LSL #1
000038  4c2d              LDR      r4,|L56.240|
00003a  eb040080          ADD      r0,r4,r0,LSL #2
00003e  8904              LDRH     r4,[r0,#8]
000040  f2410006          MOV      r0,#0x1006
000044  5a80              LDRH     r0,[r0,r2]
000046  4284              CMP      r4,r0
000048  d100              BNE      |L56.76|
00004a  e002              B        |L56.82|
                  |L56.76|
00004c  1c49              ADDS     r1,r1,#1              ;706
                  |L56.78|
00004e  2902              CMP      r1,#2                 ;706
000050  d3db              BCC      |L56.10|
                  |L56.82|
000052  bf00              NOP      
;;;710    	}
;;;711    
;;;712    	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
000054  2902              CMP      r1,#2
000056  d12d              BNE      |L56.180|
;;;713    		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
000058  2100              MOVS     r1,#0
00005a  e000              B        |L56.94|
                  |L56.92|
00005c  1c49              ADDS     r1,r1,#1
                  |L56.94|
00005e  2902              CMP      r1,#2
000060  d206              BCS      |L56.112|
000062  eb010041          ADD      r0,r1,r1,LSL #1
000066  4c22              LDR      r4,|L56.240|
000068  f8540020          LDR      r0,[r4,r0,LSL #2]
00006c  2800              CMP      r0,#0
00006e  d1f5              BNE      |L56.92|
                  |L56.112|
;;;714    		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
000070  2902              CMP      r1,#2
000072  d101              BNE      |L56.120|
000074  2000              MOVS     r0,#0
                  |L56.118|
;;;715    		Files[i].fs = dp->fs;
;;;716    		Files[i].clu = dp->sclust;
;;;717    		Files[i].idx = dp->index;
;;;718    		Files[i].ctr = 0;
;;;719    	}
;;;720    
;;;721    	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
;;;722    
;;;723    	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
;;;724    
;;;725    	return i + 1;
;;;726    }
000076  bd30              POP      {r4,r5,pc}
                  |L56.120|
000078  f44f5080          MOV      r0,#0x1000            ;715
00007c  5880              LDR      r0,[r0,r2]            ;715
00007e  eb010441          ADD      r4,r1,r1,LSL #1       ;715
000082  4d1b              LDR      r5,|L56.240|
000084  f8450024          STR      r0,[r5,r4,LSL #2]     ;715
000088  f2410008          MOV      r0,#0x1008            ;716
00008c  5880              LDR      r0,[r0,r2]            ;716
00008e  eb010441          ADD      r4,r1,r1,LSL #1       ;716
000092  eb050484          ADD      r4,r5,r4,LSL #2       ;716
000096  6060              STR      r0,[r4,#4]            ;716
000098  f2410006          MOV      r0,#0x1006            ;717
00009c  5a80              LDRH     r0,[r0,r2]            ;717
00009e  eb010441          ADD      r4,r1,r1,LSL #1       ;717
0000a2  eb050484          ADD      r4,r5,r4,LSL #2       ;717
0000a6  8120              STRH     r0,[r4,#8]            ;717
0000a8  2000              MOVS     r0,#0                 ;718
0000aa  eb010441          ADD      r4,r1,r1,LSL #1       ;718
0000ae  eb050484          ADD      r4,r5,r4,LSL #2       ;718
0000b2  8160              STRH     r0,[r4,#0xa]          ;718
                  |L56.180|
0000b4  b143              CBZ      r3,|L56.200|
0000b6  eb010041          ADD      r0,r1,r1,LSL #1       ;721
0000ba  4c0d              LDR      r4,|L56.240|
0000bc  eb040080          ADD      r0,r4,r0,LSL #2       ;721
0000c0  8940              LDRH     r0,[r0,#0xa]          ;721
0000c2  b108              CBZ      r0,|L56.200|
0000c4  2000              MOVS     r0,#0                 ;721
0000c6  e7d6              B        |L56.118|
                  |L56.200|
0000c8  b113              CBZ      r3,|L56.208|
0000ca  f44f7080          MOV      r0,#0x100             ;723
0000ce  e006              B        |L56.222|
                  |L56.208|
0000d0  eb010041          ADD      r0,r1,r1,LSL #1       ;723
0000d4  4c06              LDR      r4,|L56.240|
0000d6  eb040080          ADD      r0,r4,r0,LSL #2       ;723
0000da  8940              LDRH     r0,[r0,#0xa]          ;723
0000dc  1c40              ADDS     r0,r0,#1              ;723
                  |L56.222|
0000de  eb010441          ADD      r4,r1,r1,LSL #1       ;723
0000e2  4d03              LDR      r5,|L56.240|
0000e4  eb050484          ADD      r4,r5,r4,LSL #2       ;723
0000e8  8160              STRH     r0,[r4,#0xa]          ;723
0000ea  1c48              ADDS     r0,r1,#1              ;725
0000ec  e7c3              B        |L56.118|
;;;727    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L56.240|
                          DCD      Files

                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1307   static
;;;1308   DWORD ld_clust (
000000  b510              PUSH     {r4,lr}
;;;1309   	FATFS* fs,	/* Pointer to the fs object */
;;;1310   	BYTE* dir	/* Pointer to the directory entry */
;;;1311   )
;;;1312   {
000002  4602              MOV      r2,r0
;;;1313   	DWORD cl;
;;;1314   
;;;1315   	cl = LD_WORD(dir + DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1316   	if (fs->fs_type == FS_FAT32)
00000c  f44f5380          MOV      r3,#0x1000
000010  5c9b              LDRB     r3,[r3,r2]
000012  2b03              CMP      r3,#3
000014  d105              BNE      |L57.34|
;;;1317   		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
000016  7d0c              LDRB     r4,[r1,#0x14]
000018  7d4b              LDRB     r3,[r1,#0x15]
00001a  ea442303          ORR      r3,r4,r3,LSL #8
00001e  ea404003          ORR      r0,r0,r3,LSL #16
                  |L57.34|
;;;1318   
;;;1319   	return cl;
;;;1320   }
000022  bd10              POP      {r4,pc}
;;;1321   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;605    static
;;;606    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;607    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;608    	int r = 0;
000008  2000              MOVS     r0,#0
;;;609    
;;;610    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L58.12|
00000c  1e16              SUBS     r6,r2,#0
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L58.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  1e30              SUBS     r0,r6,#0
000022  d0f3              BEQ      |L58.12|
                  |L58.36|
;;;611    	return r;
;;;612    }
000024  bdf0              POP      {r4-r7,pc}
;;;613    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;579    static
;;;580    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;581    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;582    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;583    
;;;584    #if _WORD_ACCESS == 1
;;;585    	while (cnt >= sizeof (int)) {
;;;586    		*(int*)d = *(int*)s;
;;;587    		d += sizeof (int); s += sizeof (int);
;;;588    		cnt -= sizeof (int);
;;;589    	}
;;;590    #endif
;;;591    	while (cnt--)
000006  e003              B        |L59.16|
                  |L59.8|
;;;592    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L59.16|
000010  1e15              SUBS     r5,r2,#0              ;591
000012  f1a20201          SUB      r2,r2,#1              ;591
000016  d1f7              BNE      |L59.8|
;;;593    }
000018  bd70              POP      {r4-r6,pc}
;;;594    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;596    static
;;;597    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;598    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;599    
;;;600    	while (cnt--)
000004  e001              B        |L60.10|
                  |L60.6|
;;;601    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L60.10|
00000a  1e14              SUBS     r4,r2,#0              ;600
00000c  f1a20201          SUB      r2,r2,#1              ;600
000010  d1f9              BNE      |L60.6|
;;;602    }
000012  bd30              POP      {r4,r5,pc}
;;;603    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;801    static
;;;802    FRESULT move_window (
000000  b570              PUSH     {r4-r6,lr}
;;;803    	FATFS* fs,		/* File system object */
;;;804    	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
;;;805    )
;;;806    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;807    	FRESULT res = FR_OK;
000006  2600              MOVS     r6,#0
;;;808    
;;;809    
;;;810    	if (sector != fs->winsect) {	/* Window offset changed? */
000008  f2410030          MOV      r0,#0x1030
00000c  5900              LDR      r0,[r0,r4]
00000e  42a8              CMP      r0,r5
000010  d013              BEQ      |L61.58|
;;;811    #if !_FS_READONLY
;;;812    		res = sync_window(fs);		/* Write-back changes */
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       sync_window
000018  4606              MOV      r6,r0
;;;813    #endif
;;;814    		if (res == FR_OK) {			/* Fill sector window with new data */
00001a  b976              CBNZ     r6,|L61.58|
;;;815    			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
00001c  f2410101          MOV      r1,#0x1001
000020  5d08              LDRB     r0,[r1,r4]
000022  2301              MOVS     r3,#1
000024  462a              MOV      r2,r5
000026  4621              MOV      r1,r4
000028  f7fffffe          BL       disk_read
00002c  b110              CBZ      r0,|L61.52|
;;;816    				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
00002e  f04f35ff          MOV      r5,#0xffffffff
;;;817    				res = FR_DISK_ERR;
000032  2601              MOVS     r6,#1
                  |L61.52|
;;;818    			}
;;;819    			fs->winsect = sector;
000034  f2410030          MOV      r0,#0x1030
000038  5105              STR      r5,[r0,r4]
                  |L61.58|
;;;820    		}
;;;821    	}
;;;822    	return res;
00003a  4630              MOV      r0,r6
;;;823    }
00003c  bd70              POP      {r4-r6,pc}
;;;824    
                          ENDP


                          AREA ||i.pattern_matching||, CODE, READONLY, ALIGN=1

                  pattern_matching PROC
;;;1864   static
;;;1865   int pattern_matching (	/* Return value: 0:mismatched, 1:matched */
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;1866   	const TCHAR* pat,	/* Matching pattern */
;;;1867   	const TCHAR* nam,	/* String to be tested */
;;;1868   	int skip,			/* Number of pre-skip chars (number of ?s) */
;;;1869   	int inf				/* Infinite search (* specified) */
;;;1870   )
;;;1871   {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;1872   	const TCHAR *pp, *np;
;;;1873   	WCHAR pc, nc;
;;;1874   	int nm, nx;
;;;1875   
;;;1876   
;;;1877   	while (skip--) {				/* Pre-skip name chars */
00000c  e007              B        |L62.30|
                  |L62.14|
;;;1878   		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
00000e  a803              ADD      r0,sp,#0xc
000010  f7fffffe          BL       get_achar
000014  b918              CBNZ     r0,|L62.30|
000016  2000              MOVS     r0,#0
                  |L62.24|
;;;1879   	}
;;;1880   	if (!*pat && inf) return 1;		/* (short circuit) */
;;;1881   
;;;1882   	do {
;;;1883   		pp = pat; np = nam;			/* Top of pattern and name to match */
;;;1884   		for (;;) {
;;;1885   			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
;;;1886   				nm = nx = 0;
;;;1887   				do {				/* Analyze the wildcard chars */
;;;1888   					if (*pp++ == '?') nm++; else nx = 1;
;;;1889   				} while (*pp == '?' || *pp == '*');
;;;1890   				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
;;;1891   				nc = *np; break;	/* Branch mismatched */
;;;1892   			}
;;;1893   			pc = get_achar(&pp);	/* Get a pattern char */
;;;1894   			nc = get_achar(&np);	/* Get a name char */
;;;1895   			if (pc != nc) break;	/* Branch mismatched? */
;;;1896   			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
;;;1897   		}
;;;1898   		get_achar(&nam);			/* nam++ */
;;;1899   	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
;;;1900   
;;;1901   	return 0;
;;;1902   }
000018  b006              ADD      sp,sp,#0x18
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L62.30|
00001e  f1b80000          SUBS     r0,r8,#0              ;1877
000022  f1a80801          SUB      r8,r8,#1              ;1877
000026  d1f2              BNE      |L62.14|
000028  7820              LDRB     r0,[r4,#0]            ;1880
00002a  b910              CBNZ     r0,|L62.50|
00002c  b10d              CBZ      r5,|L62.50|
00002e  2001              MOVS     r0,#1                 ;1880
000030  e7f2              B        |L62.24|
                  |L62.50|
000032  bf00              NOP                            ;1882
                  |L62.52|
000034  9401              STR      r4,[sp,#4]            ;1883
000036  9803              LDR      r0,[sp,#0xc]          ;1883
000038  9000              STR      r0,[sp,#0]            ;1883
00003a  bf00              NOP                            ;1884
                  |L62.60|
00003c  9801              LDR      r0,[sp,#4]            ;1885
00003e  7800              LDRB     r0,[r0,#0]            ;1885
000040  283f              CMP      r0,#0x3f              ;1885
000042  d003              BEQ      |L62.76|
000044  9801              LDR      r0,[sp,#4]            ;1885
000046  7800              LDRB     r0,[r0,#0]            ;1885
000048  282a              CMP      r0,#0x2a              ;1885
00004a  d124              BNE      |L62.150|
                  |L62.76|
00004c  2000              MOVS     r0,#0                 ;1886
00004e  4682              MOV      r10,r0                ;1886
000050  4607              MOV      r7,r0                 ;1886
000052  bf00              NOP                            ;1887
                  |L62.84|
000054  9801              LDR      r0,[sp,#4]            ;1888
000056  f8101b01          LDRB     r1,[r0],#1            ;1888
00005a  9001              STR      r0,[sp,#4]            ;1888
00005c  293f              CMP      r1,#0x3f              ;1888
00005e  d101              BNE      |L62.100|
000060  1c7f              ADDS     r7,r7,#1              ;1888
000062  e001              B        |L62.104|
                  |L62.100|
000064  f04f0a01          MOV      r10,#1                ;1888
                  |L62.104|
000068  9801              LDR      r0,[sp,#4]            ;1889
00006a  7800              LDRB     r0,[r0,#0]            ;1889
00006c  283f              CMP      r0,#0x3f              ;1889
00006e  d0f1              BEQ      |L62.84|
000070  9801              LDR      r0,[sp,#4]            ;1889
000072  7800              LDRB     r0,[r0,#0]            ;1889
000074  282a              CMP      r0,#0x2a              ;1889
000076  d0ed              BEQ      |L62.84|
000078  4653              MOV      r3,r10                ;1890
00007a  463a              MOV      r2,r7                 ;1890
00007c  e9dd1000          LDRD     r1,r0,[sp,#0]         ;1890
000080  f7fffffe          BL       pattern_matching
000084  b108              CBZ      r0,|L62.138|
000086  2001              MOVS     r0,#1                 ;1890
000088  e7c6              B        |L62.24|
                  |L62.138|
00008a  9800              LDR      r0,[sp,#0]            ;1891
00008c  f9900000          LDRSB    r0,[r0,#0]            ;1891
000090  fa1ff980          UXTH     r9,r0                 ;1891
000094  e00e              B        |L62.180|
                  |L62.150|
000096  a801              ADD      r0,sp,#4              ;1893
000098  f7fffffe          BL       get_achar
00009c  4606              MOV      r6,r0                 ;1893
00009e  4668              MOV      r0,sp                 ;1894
0000a0  f7fffffe          BL       get_achar
0000a4  4681              MOV      r9,r0                 ;1894
0000a6  454e              CMP      r6,r9                 ;1895
0000a8  d000              BEQ      |L62.172|
0000aa  e003              B        |L62.180|
                  |L62.172|
0000ac  2e00              CMP      r6,#0                 ;1896
0000ae  d1c5              BNE      |L62.60|
0000b0  2001              MOVS     r0,#1                 ;1896
0000b2  e7b1              B        |L62.24|
                  |L62.180|
0000b4  bf00              NOP                            ;1891
0000b6  a803              ADD      r0,sp,#0xc            ;1898
0000b8  f7fffffe          BL       get_achar
0000bc  b115              CBZ      r5,|L62.196|
0000be  f1b90f00          CMP      r9,#0                 ;1899
0000c2  d1b7              BNE      |L62.52|
                  |L62.196|
0000c4  2000              MOVS     r0,#0                 ;1901
0000c6  e7a7              B        |L62.24|
;;;1903   #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
                          ENDP


                          AREA ||i.pick_lfn||, CODE, READONLY, ALIGN=2

                  pick_lfn PROC
;;;1377   static
;;;1378   int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1379   	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
;;;1380   	BYTE* dir			/* Pointer to the directory entry */
;;;1381   )
;;;1382   {
000002  4603              MOV      r3,r0
;;;1383   	UINT i, s;
;;;1384   	WCHAR wc, uc;
;;;1385   
;;;1386   
;;;1387   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
000004  7808              LDRB     r0,[r1,#0]
000006  f000003f          AND      r0,r0,#0x3f
00000a  1e40              SUBS     r0,r0,#1
00000c  eb000780          ADD      r7,r0,r0,LSL #2
000010  eb0702c0          ADD      r2,r7,r0,LSL #3
;;;1388   
;;;1389   	s = 0; wc = 1;
000014  2500              MOVS     r5,#0
000016  2601              MOVS     r6,#1
;;;1390   	do {
000018  bf00              NOP      
                  |L63.26|
;;;1391   		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
00001a  4815              LDR      r0,|L63.112|
00001c  5d40              LDRB     r0,[r0,r5]
00001e  5c08              LDRB     r0,[r1,r0]
000020  4f13              LDR      r7,|L63.112|
000022  5d7f              LDRB     r7,[r7,r5]
000024  440f              ADD      r7,r7,r1
000026  787f              LDRB     r7,[r7,#1]
000028  ea402407          ORR      r4,r0,r7,LSL #8
;;;1392   		if (wc) {	/* Last character has not been processed */
00002c  b14e              CBZ      r6,|L63.66|
;;;1393   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
00002e  2a19              CMP      r2,#0x19
000030  d301              BCC      |L63.54|
000032  2000              MOVS     r0,#0
                  |L63.52|
;;;1394   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1395   		} else {
;;;1396   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1397   		}
;;;1398   	} while (++s < 13);						/* Read all character in the entry */
;;;1399   
;;;1400   	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
;;;1401   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1402   		lfnbuf[i] = 0;
;;;1403   	}
;;;1404   
;;;1405   	return 1;
;;;1406   }
000034  bdf0              POP      {r4-r7,pc}
                  |L63.54|
000036  4626              MOV      r6,r4                 ;1394
000038  4610              MOV      r0,r2                 ;1394
00003a  1c52              ADDS     r2,r2,#1              ;1394
00003c  f8234010          STRH     r4,[r3,r0,LSL #1]     ;1394
000040  e005              B        |L63.78|
                  |L63.66|
000042  f64f70ff          MOV      r0,#0xffff            ;1396
000046  4284              CMP      r4,r0                 ;1396
000048  d001              BEQ      |L63.78|
00004a  2000              MOVS     r0,#0                 ;1396
00004c  e7f2              B        |L63.52|
                  |L63.78|
00004e  1c68              ADDS     r0,r5,#1              ;1398
000050  4605              MOV      r5,r0                 ;1398
000052  280d              CMP      r0,#0xd               ;1398
000054  d3e1              BCC      |L63.26|
000056  7808              LDRB     r0,[r1,#0]            ;1400
000058  f0000040          AND      r0,r0,#0x40           ;1400
00005c  b130              CBZ      r0,|L63.108|
00005e  2a19              CMP      r2,#0x19              ;1401
000060  d301              BCC      |L63.102|
000062  2000              MOVS     r0,#0                 ;1401
000064  e7e6              B        |L63.52|
                  |L63.102|
000066  2000              MOVS     r0,#0                 ;1402
000068  f8230012          STRH     r0,[r3,r2,LSL #1]     ;1402
                  |L63.108|
00006c  2001              MOVS     r0,#1                 ;1405
00006e  e7e1              B        |L63.52|
;;;1407   
                          ENDP

                  |L63.112|
                          DCD      LfnOfs

                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;945    #if !_FS_READONLY
;;;946    FRESULT put_fat (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;947    	FATFS* fs,	/* File system object */
;;;948    	DWORD clst,	/* FAT index number (cluster number) to be changed */
;;;949    	DWORD val	/* New value to be set to the entry */
;;;950    )
;;;951    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;952    	UINT bc;
;;;953    	BYTE *p;
;;;954    	FRESULT res;
;;;955    
;;;956    
;;;957    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000a  2e02              CMP      r6,#2
00000c  d304              BCC      |L64.24|
00000e  f2410018          MOV      r0,#0x1018
000012  5940              LDR      r0,[r0,r5]
000014  42b0              CMP      r0,r6
000016  d802              BHI      |L64.30|
                  |L64.24|
;;;958    		res = FR_INT_ERR;
000018  f04f0802          MOV      r8,#2
00001c  e09a              B        |L64.340|
                  |L64.30|
;;;959    
;;;960    	} else {
;;;961    		switch (fs->fs_type) {
00001e  f44f5080          MOV      r0,#0x1000
000022  5d40              LDRB     r0,[r0,r5]
000024  2801              CMP      r0,#1
000026  d004              BEQ      |L64.50|
000028  2802              CMP      r0,#2
00002a  d048              BEQ      |L64.190|
00002c  2803              CMP      r0,#3
00002e  d17d              BNE      |L64.300|
000030  e05f              B        |L64.242|
                  |L64.50|
;;;962    		case FS_FAT12 :
;;;963    			bc = (UINT)clst; bc += bc / 2;
000032  46b1              MOV      r9,r6
000034  eb090959          ADD      r9,r9,r9,LSR #1
;;;964    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000038  f2410024          MOV      r0,#0x1024
00003c  5940              LDR      r0,[r0,r5]
00003e  eb003119          ADD      r1,r0,r9,LSR #12
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       move_window
000048  4680              MOV      r8,r0
;;;965    			if (res != FR_OK) break;
00004a  f1b80f00          CMP      r8,#0
00004e  d000              BEQ      |L64.82|
000050  e07f              B        |L64.338|
                  |L64.82|
;;;966    			p = &fs->win.d8[bc++ % SS(fs)];
000052  4648              MOV      r0,r9
000054  f1090901          ADD      r9,r9,#1
000058  f3c0000b          UBFX     r0,r0,#0,#12
00005c  1944              ADDS     r4,r0,r5
;;;967    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
00005e  f0060001          AND      r0,r6,#1
000062  b120              CBZ      r0,|L64.110|
000064  b2f9              UXTB     r1,r7
000066  7820              LDRB     r0,[r4,#0]
000068  f361101f          BFI      r0,r1,#4,#28
00006c  e000              B        |L64.112|
                  |L64.110|
00006e  4638              MOV      r0,r7
                  |L64.112|
000070  7020              STRB     r0,[r4,#0]
;;;968    			fs->wflag = 1;
000072  2101              MOVS     r1,#1
000074  f2410004          MOV      r0,#0x1004
000078  5541              STRB     r1,[r0,r5]
;;;969    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00007a  f2410024          MOV      r0,#0x1024
00007e  5940              LDR      r0,[r0,r5]
000080  eb003119          ADD      r1,r0,r9,LSR #12
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       move_window
00008a  4680              MOV      r8,r0
;;;970    			if (res != FR_OK) break;
00008c  f1b80f00          CMP      r8,#0
000090  d000              BEQ      |L64.148|
000092  e05e              B        |L64.338|
                  |L64.148|
;;;971    			p = &fs->win.d8[bc % SS(fs)];
000094  f3c9000b          UBFX     r0,r9,#0,#12
000098  1944              ADDS     r4,r0,r5
;;;972    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00009a  f0060001          AND      r0,r6,#1
00009e  b110              CBZ      r0,|L64.166|
0000a0  f3c71007          UBFX     r0,r7,#4,#8
0000a4  e005              B        |L64.178|
                  |L64.166|
0000a6  7820              LDRB     r0,[r4,#0]
0000a8  f00000f0          AND      r0,r0,#0xf0
0000ac  f3c72103          UBFX     r1,r7,#8,#4
0000b0  4308              ORRS     r0,r0,r1
                  |L64.178|
0000b2  7020              STRB     r0,[r4,#0]
;;;973    			fs->wflag = 1;
0000b4  2101              MOVS     r1,#1
0000b6  f2410004          MOV      r0,#0x1004
0000ba  5541              STRB     r1,[r0,r5]
;;;974    			break;
0000bc  e049              B        |L64.338|
                  |L64.190|
;;;975    
;;;976    		case FS_FAT16 :
;;;977    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000be  f2410024          MOV      r0,#0x1024
0000c2  5940              LDR      r0,[r0,r5]
0000c4  eb0021d6          ADD      r1,r0,r6,LSR #11
0000c8  4628              MOV      r0,r5
0000ca  f7fffffe          BL       move_window
0000ce  4680              MOV      r8,r0
;;;978    			if (res != FR_OK) break;
0000d0  f1b80f00          CMP      r8,#0
0000d4  d000              BEQ      |L64.216|
0000d6  e03c              B        |L64.338|
                  |L64.216|
;;;979    			p = &fs->win.d8[clst * 2 % SS(fs)];
0000d8  f64070ff          MOV      r0,#0xfff
0000dc  ea000046          AND      r0,r0,r6,LSL #1
0000e0  1944              ADDS     r4,r0,r5
;;;980    			ST_WORD(p, (WORD)val);
0000e2  7027              STRB     r7,[r4,#0]
0000e4  0a38              LSRS     r0,r7,#8
0000e6  7060              STRB     r0,[r4,#1]
;;;981    			fs->wflag = 1;
0000e8  2101              MOVS     r1,#1
0000ea  f2410004          MOV      r0,#0x1004
0000ee  5541              STRB     r1,[r0,r5]
;;;982    			break;
0000f0  e02f              B        |L64.338|
                  |L64.242|
;;;983    
;;;984    		case FS_FAT32 :
;;;985    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
0000f2  f2410024          MOV      r0,#0x1024
0000f6  5940              LDR      r0,[r0,r5]
0000f8  eb002196          ADD      r1,r0,r6,LSR #10
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       move_window
000102  4680              MOV      r8,r0
;;;986    			if (res != FR_OK) break;
000104  f1b80f00          CMP      r8,#0
000108  d000              BEQ      |L64.268|
00010a  e022              B        |L64.338|
                  |L64.268|
;;;987    			p = &fs->win.d8[clst * 4 % SS(fs)];
00010c  f64070ff          MOV      r0,#0xfff
000110  ea000086          AND      r0,r0,r6,LSL #2
000114  1944              ADDS     r4,r0,r5
;;;988    			val |= LD_DWORD(p) & 0xF0000000;
000116  78e0              LDRB     r0,[r4,#3]
000118  0600              LSLS     r0,r0,#24
00011a  78a1              LDRB     r1,[r4,#2]
00011c  ea404001          ORR      r0,r0,r1,LSL #16
000120  7861              LDRB     r1,[r4,#1]
000122  ea402001          ORR      r0,r0,r1,LSL #8
000126  7821              LDRB     r1,[r4,#0]
000128  4308              ORRS     r0,r0,r1
00012a  e000              B        |L64.302|
                  |L64.300|
00012c  e00e              B        |L64.332|
                  |L64.302|
00012e  f0004070          AND      r0,r0,#0xf0000000
000132  4307              ORRS     r7,r7,r0
;;;989    			ST_DWORD(p, val);
000134  7027              STRB     r7,[r4,#0]
000136  0a38              LSRS     r0,r7,#8
000138  7060              STRB     r0,[r4,#1]
00013a  0c38              LSRS     r0,r7,#16
00013c  70a0              STRB     r0,[r4,#2]
00013e  0e38              LSRS     r0,r7,#24
000140  70e0              STRB     r0,[r4,#3]
;;;990    			fs->wflag = 1;
000142  2101              MOVS     r1,#1
000144  f2410004          MOV      r0,#0x1004
000148  5541              STRB     r1,[r0,r5]
;;;991    			break;
00014a  e002              B        |L64.338|
                  |L64.332|
;;;992    
;;;993    		default :
;;;994    			res = FR_INT_ERR;
00014c  f04f0802          MOV      r8,#2
000150  bf00              NOP                            ;961
                  |L64.338|
000152  bf00              NOP                            ;965
                  |L64.340|
;;;995    		}
;;;996    	}
;;;997    
;;;998    	return res;
000154  4640              MOV      r0,r8
;;;999    }
000156  e8bd87f0          POP      {r4-r10,pc}
;;;1000   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.putc_bfd||, CODE, READONLY, ALIGN=1

                  putc_bfd PROC
;;;4543   static
;;;4544   void putc_bfd (
000000  b5f8              PUSH     {r3-r7,lr}
;;;4545   	putbuff* pb,
;;;4546   	TCHAR c
;;;4547   )
;;;4548   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;4549   	UINT bw;
;;;4550   	int i;
;;;4551   
;;;4552   
;;;4553   	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
000006  bf00              NOP      
;;;4554   		putc_bfd(pb, '\r');
;;;4555   
;;;4556   	i = pb->idx;	/* Buffer write index (-1:error) */
000008  6865              LDR      r5,[r4,#4]
;;;4557   	if (i < 0) return;
00000a  2d00              CMP      r5,#0
00000c  da00              BGE      |L65.16|
                  |L65.14|
;;;4558   
;;;4559   #if _USE_LFN && _LFN_UNICODE
;;;4560   #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
;;;4561   	if (c < 0x80) {				/* 7-bit */
;;;4562   		pb->buf[i++] = (BYTE)c;
;;;4563   	} else {
;;;4564   		if (c < 0x800) {		/* 11-bit */
;;;4565   			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
;;;4566   		} else {				/* 16-bit */
;;;4567   			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
;;;4568   			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
;;;4569   		}
;;;4570   		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
;;;4571   	}
;;;4572   #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
;;;4573   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4574   	pb->buf[i++] = (BYTE)c;
;;;4575   #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
;;;4576   	pb->buf[i++] = (BYTE)c;
;;;4577   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4578   #else							/* Write a character in ANSI/OEM */
;;;4579   	c = ff_convert(c, 0);	/* Unicode -> OEM */
;;;4580   	if (!c) c = '?';
;;;4581   	if (c >= 0x100)
;;;4582   		pb->buf[i++] = (BYTE)(c >> 8);
;;;4583   	pb->buf[i++] = (BYTE)c;
;;;4584   #endif
;;;4585   #else							/* Write a character without conversion */
;;;4586   	pb->buf[i++] = (BYTE)c;
;;;4587   #endif
;;;4588   
;;;4589   	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
;;;4590   		f_write(pb->fp, pb->buf, (UINT)i, &bw);
;;;4591   		i = (bw == (UINT)i) ? 0 : -1;
;;;4592   	}
;;;4593   	pb->idx = i;
;;;4594   	pb->nchr++;
;;;4595   }
00000e  bdf8              POP      {r3-r7,pc}
                  |L65.16|
000010  4628              MOV      r0,r5                 ;4586
000012  1c6d              ADDS     r5,r5,#1              ;4586
000014  f104010c          ADD      r1,r4,#0xc            ;4586
000018  540e              STRB     r6,[r1,r0]            ;4586
00001a  2d3d              CMP      r5,#0x3d              ;4589
00001c  db0c              BLT      |L65.56|
00001e  466b              MOV      r3,sp                 ;4590
000020  462a              MOV      r2,r5                 ;4590
000022  6820              LDR      r0,[r4,#0]            ;4590
000024  f7fffffe          BL       f_write
000028  9800              LDR      r0,[sp,#0]            ;4591
00002a  42a8              CMP      r0,r5                 ;4591
00002c  d101              BNE      |L65.50|
00002e  2000              MOVS     r0,#0                 ;4591
000030  e001              B        |L65.54|
                  |L65.50|
000032  f04f30ff          MOV      r0,#0xffffffff        ;4591
                  |L65.54|
000036  4605              MOV      r5,r0                 ;4591
                  |L65.56|
000038  6065              STR      r5,[r4,#4]            ;4593
00003a  68a0              LDR      r0,[r4,#8]            ;4594
00003c  1c40              ADDS     r0,r0,#1              ;4594
00003e  60a0              STR      r0,[r4,#8]            ;4594
000040  bf00              NOP      
000042  e7e4              B        |L65.14|
;;;4596   
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;1009   static
;;;1010   FRESULT remove_chain (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1011   	FATFS* fs,			/* File system object */
;;;1012   	DWORD clst			/* Cluster# to remove a chain from */
;;;1013   )
;;;1014   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1015   	FRESULT res;
;;;1016   	DWORD nxt;
;;;1017   #if _USE_TRIM
;;;1018   	DWORD scl = clst, ecl = clst, rt[2];
000008  46b0              MOV      r8,r6
00000a  46b1              MOV      r9,r6
;;;1019   #endif
;;;1020   
;;;1021   	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000c  2e02              CMP      r6,#2
00000e  d304              BCC      |L66.26|
000010  f2410018          MOV      r0,#0x1018
000014  5900              LDR      r0,[r0,r4]
000016  42b0              CMP      r0,r6
000018  d801              BHI      |L66.30|
                  |L66.26|
;;;1022   		res = FR_INT_ERR;
00001a  2702              MOVS     r7,#2
00001c  e051              B        |L66.194|
                  |L66.30|
;;;1023   
;;;1024   	} else {
;;;1025   		res = FR_OK;
00001e  2700              MOVS     r7,#0
;;;1026   		while (clst < fs->n_fatent) {			/* Not a last link? */
000020  e049              B        |L66.182|
                  |L66.34|
;;;1027   			nxt = get_fat(fs, clst);			/* Get cluster status */
000022  4631              MOV      r1,r6
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       get_fat
00002a  4605              MOV      r5,r0
;;;1028   			if (nxt == 0) break;				/* Empty cluster? */
00002c  b905              CBNZ     r5,|L66.48|
00002e  e047              B        |L66.192|
                  |L66.48|
;;;1029   			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000030  2d01              CMP      r5,#1
000032  d101              BNE      |L66.56|
000034  2702              MOVS     r7,#2
000036  e043              B        |L66.192|
                  |L66.56|
;;;1030   			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000038  1c68              ADDS     r0,r5,#1
00003a  b908              CBNZ     r0,|L66.64|
00003c  2701              MOVS     r7,#1
00003e  e03f              B        |L66.192|
                  |L66.64|
;;;1031   			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000040  2200              MOVS     r2,#0
000042  4631              MOV      r1,r6
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       put_fat
00004a  4607              MOV      r7,r0
;;;1032   			if (res != FR_OK) break;
00004c  b107              CBZ      r7,|L66.80|
00004e  e037              B        |L66.192|
                  |L66.80|
;;;1033   			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
000050  f2410010          MOV      r0,#0x1010
000054  5900              LDR      r0,[r0,r4]
000056  1c40              ADDS     r0,r0,#1
000058  b170              CBZ      r0,|L66.120|
;;;1034   				fs->free_clust++;
00005a  f2410010          MOV      r0,#0x1010
00005e  5900              LDR      r0,[r0,r4]
000060  1c40              ADDS     r0,r0,#1
000062  f2410110          MOV      r1,#0x1010
000066  5108              STR      r0,[r1,r4]
;;;1035   				fs->fsi_flag |= 1;
000068  f2410005          MOV      r0,#0x1005
00006c  5d00              LDRB     r0,[r0,r4]
00006e  f0400101          ORR      r1,r0,#1
000072  f2410005          MOV      r0,#0x1005
000076  5501              STRB     r1,[r0,r4]
                  |L66.120|
;;;1036   			}
;;;1037   #if _USE_TRIM
;;;1038   			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
000078  f1090001          ADD      r0,r9,#1
00007c  42a8              CMP      r0,r5
00007e  d101              BNE      |L66.132|
;;;1039   				ecl = nxt;
000080  46a9              MOV      r9,r5
000082  e017              B        |L66.180|
                  |L66.132|
;;;1040   			} else {				/* End of contiguous clusters */ 
;;;1041   				rt[0] = clust2sect(fs, scl);					/* Start sector */
000084  4641              MOV      r1,r8
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       clust2sect
00008c  9000              STR      r0,[sp,#0]
;;;1042   				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
00008e  4649              MOV      r1,r9
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       clust2sect
000096  f2410102          MOV      r1,#0x1002
00009a  5d09              LDRB     r1,[r1,r4]
00009c  4408              ADD      r0,r0,r1
00009e  1e40              SUBS     r0,r0,#1
0000a0  9001              STR      r0,[sp,#4]
;;;1043   				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
0000a2  f2410101          MOV      r1,#0x1001
0000a6  5d08              LDRB     r0,[r1,r4]
0000a8  466a              MOV      r2,sp
0000aa  2104              MOVS     r1,#4
0000ac  f7fffffe          BL       disk_ioctl
;;;1044   				scl = ecl = nxt;
0000b0  46a9              MOV      r9,r5
0000b2  46a8              MOV      r8,r5
                  |L66.180|
;;;1045   			}
;;;1046   #endif
;;;1047   			clst = nxt;	/* Next cluster */
0000b4  462e              MOV      r6,r5
                  |L66.182|
0000b6  f2410018          MOV      r0,#0x1018            ;1026
0000ba  5900              LDR      r0,[r0,r4]            ;1026
0000bc  42b0              CMP      r0,r6                 ;1026
0000be  d8b0              BHI      |L66.34|
                  |L66.192|
0000c0  bf00              NOP                            ;1028
                  |L66.194|
;;;1048   		}
;;;1049   	}
;;;1050   
;;;1051   	return res;
0000c2  4638              MOV      r0,r7
;;;1052   }
0000c4  e8bd87fc          POP      {r2-r10,pc}
;;;1053   #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1324   static
;;;1325   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1326   	BYTE* dir,	/* Pointer to the directory entry */
;;;1327   	DWORD cl	/* Value to be set */
;;;1328   )
;;;1329   {
;;;1330   	ST_WORD(dir + DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1331   	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1332   }
00000e  4770              BX       lr
;;;1333   #endif
                          ENDP


                          AREA ||i.sum_sfn||, CODE, READONLY, ALIGN=1

                  sum_sfn PROC
;;;1507   static
;;;1508   BYTE sum_sfn (
000000  b530              PUSH     {r4,r5,lr}
;;;1509   	const BYTE* dir		/* Pointer to the SFN entry */
;;;1510   )
;;;1511   {
000002  4601              MOV      r1,r0
;;;1512   	BYTE sum = 0;
000004  2000              MOVS     r0,#0
;;;1513   	UINT n = 11;
000006  220b              MOVS     r2,#0xb
;;;1514   
;;;1515   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000008  bf00              NOP      
                  |L68.10|
00000a  1043              ASRS     r3,r0,#1
00000c  eb0314c0          ADD      r4,r3,r0,LSL #7
000010  f8115b01          LDRB     r5,[r1],#1
000014  1963              ADDS     r3,r4,r5
000016  b2d8              UXTB     r0,r3
000018  1e53              SUBS     r3,r2,#1
00001a  1e1a              SUBS     r2,r3,#0
00001c  d1f5              BNE      |L68.10|
;;;1516   	return sum;
;;;1517   }
00001e  bd30              POP      {r4,r5,pc}
;;;1518   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;832    static
;;;833    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;834    	FATFS* fs		/* File system object */
;;;835    )
;;;836    {
000002  4604              MOV      r4,r0
;;;837    	FRESULT res;
;;;838    
;;;839    
;;;840    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;841    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d17f              BNE      |L69.272|
;;;842    		/* Update FSINFO sector if needed */
;;;843    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000010  f44f5080          MOV      r0,#0x1000
000014  5d00              LDRB     r0,[r0,r4]
000016  2803              CMP      r0,#3
000018  d16f              BNE      |L69.250|
00001a  f2410005          MOV      r0,#0x1005
00001e  5d00              LDRB     r0,[r0,r4]
000020  2801              CMP      r0,#1
000022  d16a              BNE      |L69.250|
;;;844    			/* Create FSINFO structure */
;;;845    			mem_set(fs->win.d8, 0, SS(fs));
000024  0302              LSLS     r2,r0,#12
000026  2100              MOVS     r1,#0
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       mem_set
;;;846    			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
00002e  2055              MOVS     r0,#0x55
000030  f88401fe          STRB     r0,[r4,#0x1fe]
000034  21aa              MOVS     r1,#0xaa
000036  f24010ff          MOV      r0,#0x1ff
00003a  5501              STRB     r1,[r0,r4]
;;;847    			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
00003c  2052              MOVS     r0,#0x52
00003e  7020              STRB     r0,[r4,#0]
000040  7060              STRB     r0,[r4,#1]
000042  2061              MOVS     r0,#0x61
000044  70a0              STRB     r0,[r4,#2]
000046  2041              MOVS     r0,#0x41
000048  70e0              STRB     r0,[r4,#3]
;;;848    			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
00004a  2072              MOVS     r0,#0x72
00004c  f88401e4          STRB     r0,[r4,#0x1e4]
000050  2172              MOVS     r1,#0x72
000052  f24010e5          MOV      r0,#0x1e5
000056  5501              STRB     r1,[r0,r4]
000058  2141              MOVS     r1,#0x41
00005a  1c40              ADDS     r0,r0,#1
00005c  5501              STRB     r1,[r0,r4]
00005e  2161              MOVS     r1,#0x61
000060  1c40              ADDS     r0,r0,#1
000062  5501              STRB     r1,[r0,r4]
;;;849    			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
000064  f2410010          MOV      r0,#0x1010
000068  5d00              LDRB     r0,[r0,r4]
00006a  f88401e8          STRB     r0,[r4,#0x1e8]
00006e  f2410010          MOV      r0,#0x1010
000072  5b00              LDRH     r0,[r0,r4]
000074  f3c02107          UBFX     r1,r0,#8,#8
000078  f24010e9          MOV      r0,#0x1e9
00007c  5501              STRB     r1,[r0,r4]
00007e  f2410010          MOV      r0,#0x1010
000082  5900              LDR      r0,[r0,r4]
000084  f3c04107          UBFX     r1,r0,#16,#8
000088  f44f70f5          MOV      r0,#0x1ea
00008c  5501              STRB     r1,[r0,r4]
00008e  f2410010          MOV      r0,#0x1010
000092  5900              LDR      r0,[r0,r4]
000094  0e01              LSRS     r1,r0,#24
000096  f24010eb          MOV      r0,#0x1eb
00009a  5501              STRB     r1,[r0,r4]
;;;850    			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
00009c  f241000c          MOV      r0,#0x100c
0000a0  5d00              LDRB     r0,[r0,r4]
0000a2  f88401ec          STRB     r0,[r4,#0x1ec]
0000a6  f241000c          MOV      r0,#0x100c
0000aa  5b00              LDRH     r0,[r0,r4]
0000ac  f3c02107          UBFX     r1,r0,#8,#8
0000b0  f24010ed          MOV      r0,#0x1ed
0000b4  5501              STRB     r1,[r0,r4]
0000b6  f241000c          MOV      r0,#0x100c
0000ba  5900              LDR      r0,[r0,r4]
0000bc  f3c04107          UBFX     r1,r0,#16,#8
0000c0  f44f70f7          MOV      r0,#0x1ee
0000c4  5501              STRB     r1,[r0,r4]
0000c6  f241000c          MOV      r0,#0x100c
0000ca  5900              LDR      r0,[r0,r4]
0000cc  0e01              LSRS     r1,r0,#24
0000ce  f24010ef          MOV      r0,#0x1ef
0000d2  5501              STRB     r1,[r0,r4]
;;;851    			/* Write it into the FSINFO sector */
;;;852    			fs->winsect = fs->volbase + 1;
0000d4  f44f5081          MOV      r0,#0x1020
0000d8  5900              LDR      r0,[r0,r4]
0000da  1c40              ADDS     r0,r0,#1
0000dc  f2410130          MOV      r1,#0x1030
0000e0  5108              STR      r0,[r1,r4]
;;;853    			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
0000e2  590a              LDR      r2,[r1,r4]
0000e4  f2410101          MOV      r1,#0x1001
0000e8  5d08              LDRB     r0,[r1,r4]
0000ea  2301              MOVS     r3,#1
0000ec  4621              MOV      r1,r4
0000ee  f7fffffe          BL       disk_write
;;;854    			fs->fsi_flag = 0;
0000f2  2100              MOVS     r1,#0
0000f4  f2410005          MOV      r0,#0x1005
0000f8  5501              STRB     r1,[r0,r4]
                  |L69.250|
;;;855    		}
;;;856    		/* Make sure that no pending write process in the physical drive */
;;;857    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000fa  f2410101          MOV      r1,#0x1001
0000fe  5d08              LDRB     r0,[r1,r4]
000100  2200              MOVS     r2,#0
000102  4611              MOV      r1,r2
000104  f7fffffe          BL       disk_ioctl
000108  b100              CBZ      r0,|L69.268|
;;;858    			res = FR_DISK_ERR;
00010a  e000              B        |L69.270|
                  |L69.268|
00010c  e000              B        |L69.272|
                  |L69.270|
00010e  2501              MOVS     r5,#1
                  |L69.272|
;;;859    	}
;;;860    
;;;861    	return res;
000110  4628              MOV      r0,r5
;;;862    }
000112  bd70              POP      {r4-r6,pc}
;;;863    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;772    static
;;;773    FRESULT sync_window (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;774    	FATFS* fs		/* File system object */
;;;775    )
;;;776    {
000004  4604              MOV      r4,r0
;;;777    	DWORD wsect;
;;;778    	UINT nf;
;;;779    	FRESULT res = FR_OK;
000006  2700              MOVS     r7,#0
;;;780    
;;;781    
;;;782    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000008  f2410004          MOV      r0,#0x1004
00000c  5d00              LDRB     r0,[r0,r4]
00000e  b368              CBZ      r0,|L70.108|
;;;783    		wsect = fs->winsect;	/* Current sector number */
000010  f2410030          MOV      r0,#0x1030
000014  5905              LDR      r5,[r0,r4]
;;;784    		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
000016  f2410101          MOV      r1,#0x1001
00001a  5d08              LDRB     r0,[r1,r4]
00001c  2301              MOVS     r3,#1
00001e  462a              MOV      r2,r5
000020  4621              MOV      r1,r4
000022  f7fffffe          BL       disk_write
000026  b108              CBZ      r0,|L70.44|
;;;785    			res = FR_DISK_ERR;
000028  2701              MOVS     r7,#1
00002a  e01f              B        |L70.108|
                  |L70.44|
;;;786    		} else {
;;;787    			fs->wflag = 0;
00002c  2100              MOVS     r1,#0
00002e  f2410004          MOV      r0,#0x1004
000032  5501              STRB     r1,[r0,r4]
;;;788    			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
000034  f2410024          MOV      r0,#0x1024
000038  5900              LDR      r0,[r0,r4]
00003a  1a29              SUBS     r1,r5,r0
00003c  f241001c          MOV      r0,#0x101c
000040  5900              LDR      r0,[r0,r4]
000042  4281              CMP      r1,r0
000044  d212              BCS      |L70.108|
;;;789    				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
000046  f2410003          MOV      r0,#0x1003
00004a  5d06              LDRB     r6,[r0,r4]
00004c  e00c              B        |L70.104|
                  |L70.78|
;;;790    					wsect += fs->fsize;
00004e  f241001c          MOV      r0,#0x101c
000052  5900              LDR      r0,[r0,r4]
000054  4405              ADD      r5,r5,r0
;;;791    					disk_write(fs->drv, fs->win.d8, wsect, 1);
000056  f2410101          MOV      r1,#0x1001
00005a  5d08              LDRB     r0,[r1,r4]
00005c  2301              MOVS     r3,#1
00005e  462a              MOV      r2,r5
000060  4621              MOV      r1,r4
000062  f7fffffe          BL       disk_write
000066  1e76              SUBS     r6,r6,#1              ;789
                  |L70.104|
000068  2e02              CMP      r6,#2                 ;789
00006a  d2f0              BCS      |L70.78|
                  |L70.108|
;;;792    				}
;;;793    			}
;;;794    		}
;;;795    	}
;;;796    	return res;
00006c  4638              MOV      r0,r7
;;;797    }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;798    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2444   static
;;;2445   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2446   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2447   )
;;;2448   {
000002  4605              MOV      r5,r0
;;;2449   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
000004  462c              MOV      r4,r5
;;;2450   
;;;2451   
;;;2452   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
000006  b304              CBZ      r4,|L71.74|
000008  f44f5080          MOV      r0,#0x1000
00000c  5900              LDR      r0,[r0,r4]
00000e  b1e0              CBZ      r0,|L71.74|
000010  f44f5080          MOV      r0,#0x1000
000014  5900              LDR      r0,[r0,r4]
000016  f5005080          ADD      r0,r0,#0x1000
00001a  7800              LDRB     r0,[r0,#0]
00001c  b1a8              CBZ      r0,|L71.74|
00001e  f44f5080          MOV      r0,#0x1000
000022  5900              LDR      r0,[r0,r4]
000024  f5005080          ADD      r0,r0,#0x1000
000028  88c1              LDRH     r1,[r0,#6]
00002a  f2410004          MOV      r0,#0x1004
00002e  5b00              LDRH     r0,[r0,r4]
000030  4281              CMP      r1,r0
000032  d10a              BNE      |L71.74|
000034  f44f5180          MOV      r1,#0x1000
000038  5909              LDR      r1,[r1,r4]
00003a  f5015180          ADD      r1,r1,#0x1000
00003e  7848              LDRB     r0,[r1,#1]
000040  f7fffffe          BL       disk_status
000044  f0000001          AND      r0,r0,#1
000048  b108              CBZ      r0,|L71.78|
                  |L71.74|
;;;2453   		return FR_INVALID_OBJECT;
00004a  2009              MOVS     r0,#9
                  |L71.76|
;;;2454   
;;;2455   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2456   
;;;2457   	return FR_OK;
;;;2458   }
00004c  bd70              POP      {r4-r6,pc}
                  |L71.78|
00004e  2000              MOVS     r0,#0                 ;2457
000050  e7fc              B        |L71.76|
;;;2459   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Files
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  CHANNEL_OFFSET_TAB
000000  081c3044          DCB      0x08,0x1c,0x30,0x44
000004  586c80            DCB      0x58,0x6c,0x80
                  ExCvt
000007  80                DCB      0x80
000008  9a90418e          DCB      0x9a,0x90,0x41,0x8e
00000c  418f8045          DCB      0x41,0x8f,0x80,0x45
000010  45454949          DCB      0x45,0x45,0x49,0x49
000014  498e8f90          DCB      0x49,0x8e,0x8f,0x90
000018  92924f99          DCB      0x92,0x92,0x4f,0x99
00001c  4f555559          DCB      0x4f,0x55,0x55,0x59
000020  999a9b9c          DCB      0x99,0x9a,0x9b,0x9c
000024  9d9e9f41          DCB      0x9d,0x9e,0x9f,0x41
000028  494f55a5          DCB      0x49,0x4f,0x55,0xa5
00002c  a5a6a7a8          DCB      0xa5,0xa6,0xa7,0xa8
000030  a9aaabac          DCB      0xa9,0xaa,0xab,0xac
000034  21aeafb0          DCB      0x21,0xae,0xaf,0xb0
000038  b1b2b3b4          DCB      0xb1,0xb2,0xb3,0xb4
00003c  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
000040  b9babbbc          DCB      0xb9,0xba,0xbb,0xbc
000044  bdbebfc0          DCB      0xbd,0xbe,0xbf,0xc0
000048  c1c2c3c4          DCB      0xc1,0xc2,0xc3,0xc4
00004c  c5c6c7c8          DCB      0xc5,0xc6,0xc7,0xc8
000050  c9cacbcc          DCB      0xc9,0xca,0xcb,0xcc
000054  cdcecfd0          DCB      0xcd,0xce,0xcf,0xd0
000058  d1d2d3d4          DCB      0xd1,0xd2,0xd3,0xd4
00005c  d5d6d7d8          DCB      0xd5,0xd6,0xd7,0xd8
000060  d9dadbdc          DCB      0xd9,0xda,0xdb,0xdc
000064  dddedfe0          DCB      0xdd,0xde,0xdf,0xe0
000068  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
00006c  e5e6e7e8          DCB      0xe5,0xe6,0xe7,0xe8
000070  e9eaebec          DCB      0xe9,0xea,0xeb,0xec
000074  edeeeff0          DCB      0xed,0xee,0xef,0xf0
000078  f1f2f3f4          DCB      0xf1,0xf2,0xf3,0xf4
00007c  f5f6f7f8          DCB      0xf5,0xf6,0xf7,0xf8
000080  f9fafbfc          DCB      0xf9,0xfa,0xfb,0xfc
000084  fdfeff            DCB      0xfd,0xfe,0xff
                  LfnOfs
000087  01                DCB      0x01
000088  03050709          DCB      0x03,0x05,0x07,0x09
00008c  0e101214          DCB      0x0e,0x10,0x12,0x14
000090  16181c1e          DCB      0x16,0x18,0x1c,0x1e
                  vst
000094  04000200          DCW      0x0400,0x0200
000098  01000080          DCW      0x0100,0x0080
00009c  00400020          DCW      0x0040,0x0020
0000a0  00100008          DCW      0x0010,0x0008
0000a4  00040002          DCW      0x0004,0x0002
0000a8  0000              DCW      0x0000
                  ||cst||
0000aa  8000              DCW      0x8000
0000ac  40002000          DCW      0x4000,0x2000
0000b0  10000800          DCW      0x1000,0x0800
0000b4  40002000          DCW      0x4000,0x2000
0000b8  10000800          DCW      0x1000,0x0800
0000bc  04000200          DCW      0x0400,0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "../Middlewares/Third_Party/FatFs/src/ff.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___4_ff_c_3f41df3e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___4_ff_c_3f41df3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___4_ff_c_3f41df3e____REVSH|
#line 478
|__asm___4_ff_c_3f41df3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___4_ff_c_3f41df3e____RRX|
#line 665
|__asm___4_ff_c_3f41df3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
